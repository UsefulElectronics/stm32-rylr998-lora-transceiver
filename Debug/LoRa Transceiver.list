
LoRa Transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003ed0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08004068  08004068  00014068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040f4  080040f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080040f4  080040f4  000140f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040fc  080040fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040fc  080040fc  000140fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004100  08004100  00014100  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004104  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  2000000c  08004110  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000033c  08004110  0002033c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc7a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001b23  00000000  00000000  0002dcb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007b0  00000000  00000000  0002f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000718  00000000  00000000  0002ff90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00016354  00000000  00000000  000306a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008218  00000000  00000000  000469fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000863d8  00000000  00000000  0004ec14  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d4fec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb4  00000000  00000000  000d5068  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004050 	.word	0x08004050

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004050 	.word	0x08004050

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fb82 	bl	8000bf4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f886 	bl	8000600 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f93e 	bl	8000774 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f8:	f000 f914 	bl	8000724 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80004fc:	f000 f8e8 	bl	80006d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  rylr998_enable();
 8000500:	f003 fc9c 	bl	8003e3c <rylr998_enable>
  HAL_Delay(100);
 8000504:	2064      	movs	r0, #100	; 0x64
 8000506:	f000 fbe7 	bl	8000cd8 <HAL_Delay>
  rylr998Get(&hLoRaModule, Rylr998_ADDRESS);
 800050a:	2103      	movs	r1, #3
 800050c:	4837      	ldr	r0, [pc, #220]	; (80005ec <main+0x104>)
 800050e:	f003 faed 	bl	8003aec <rylr998Get>
//  rylr998GetAddress(&hLoRaModule);
  hLoRaModule.rylr998NetworkId = 6;
 8000512:	4b36      	ldr	r3, [pc, #216]	; (80005ec <main+0x104>)
 8000514:	2206      	movs	r2, #6
 8000516:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
  hLoRaModule.Rylr998RfPower   = 22;
 800051a:	4b34      	ldr	r3, [pc, #208]	; (80005ec <main+0x104>)
 800051c:	2216      	movs	r2, #22
 800051e:	f883 2206 	strb.w	r2, [r3, #518]	; 0x206
  hLoRaModule.rylr998Transmitter.address[0] = '1';
 8000522:	4b32      	ldr	r3, [pc, #200]	; (80005ec <main+0x104>)
 8000524:	2231      	movs	r2, #49	; 0x31
 8000526:	761a      	strb	r2, [r3, #24]
  hLoRaModule.rylr998Transmitter.timer = HAL_GetTick();
 8000528:	f000 fbca 	bl	8000cc0 <HAL_GetTick>
 800052c:	4602      	mov	r2, r0
 800052e:	4b2f      	ldr	r3, [pc, #188]	; (80005ec <main+0x104>)
 8000530:	615a      	str	r2, [r3, #20]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, hLoRaModule.rylr998Receiver.rxBuffer, 100);
 8000532:	2264      	movs	r2, #100	; 0x64
 8000534:	492e      	ldr	r1, [pc, #184]	; (80005f0 <main+0x108>)
 8000536:	482f      	ldr	r0, [pc, #188]	; (80005f4 <main+0x10c>)
 8000538:	f002 f825 	bl	8002586 <HAL_UARTEx_ReceiveToIdle_DMA>
//  HAL_Delay(20);
//  rylr998SetNetworkId			(hLoRaModule.rylr998NetworkId);
  HAL_Delay(30);
 800053c:	201e      	movs	r0, #30
 800053e:	f000 fbcb 	bl	8000cd8 <HAL_Delay>
//  rylr998SetOutputPower			(hLoRaModule.Rylr998RfPower);
  HAL_Delay(20);
 8000542:	2014      	movs	r0, #20
 8000544:	f000 fbc8 	bl	8000cd8 <HAL_Delay>
//  HAL_UART_Transmit(&huart1, "AT+CRC=0\r\n", 10, 10);
  HAL_Delay(20);
 8000548:	2014      	movs	r0, #20
 800054a:	f000 fbc5 	bl	8000cd8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(RYLR998_ReadInterruptFlag())
 800054e:	4b27      	ldr	r3, [pc, #156]	; (80005ec <main+0x104>)
 8000550:	7a1b      	ldrb	r3, [r3, #8]
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	2b00      	cmp	r3, #0
 800055a:	d007      	beq.n	800056c <main+0x84>
	  {
		  RYLR998_WriteInterruptFlag(DISABLE);
 800055c:	4a23      	ldr	r2, [pc, #140]	; (80005ec <main+0x104>)
 800055e:	7a13      	ldrb	r3, [r2, #8]
 8000560:	f36f 0300 	bfc	r3, #0, #1
 8000564:	7213      	strb	r3, [r2, #8]

		  rylr998ReceivePacketParser(&hLoRaModule);
 8000566:	4821      	ldr	r0, [pc, #132]	; (80005ec <main+0x104>)
 8000568:	f003 fa3e 	bl	80039e8 <rylr998ReceivePacketParser>
	  }
	 if(RYLR998_ReadSuccessfulTxFlag())
 800056c:	4b1f      	ldr	r3, [pc, #124]	; (80005ec <main+0x104>)
 800056e:	7a1b      	ldrb	r3, [r3, #8]
 8000570:	f003 0304 	and.w	r3, r3, #4
 8000574:	b2db      	uxtb	r3, r3
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00f      	beq.n	800059a <main+0xb2>
	 {
		 RYLR998_WriteSuccessfulTxFlag(DISABLE);
 800057a:	4a1c      	ldr	r2, [pc, #112]	; (80005ec <main+0x104>)
 800057c:	7a13      	ldrb	r3, [r2, #8]
 800057e:	f36f 0382 	bfc	r3, #2, #1
 8000582:	7213      	strb	r3, [r2, #8]
		 hLoRaModule.rylr998Timer = HAL_GetTick();
 8000584:	f000 fb9c 	bl	8000cc0 <HAL_GetTick>
 8000588:	4602      	mov	r2, r0
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <main+0x104>)
 800058c:	605a      	str	r2, [r3, #4]
		 LED_ON;
 800058e:	2200      	movs	r2, #0
 8000590:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000594:	4818      	ldr	r0, [pc, #96]	; (80005f8 <main+0x110>)
 8000596:	f001 fa6d 	bl	8001a74 <HAL_GPIO_WritePin>
	 }
	  if(!HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 800059a:	2101      	movs	r1, #1
 800059c:	4817      	ldr	r0, [pc, #92]	; (80005fc <main+0x114>)
 800059e:	f001 fa51 	bl	8001a44 <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d111      	bne.n	80005cc <main+0xe4>
	  {
		  if(HAL_GetTick() - hLoRaModule.rylr998Transmitter.timer >= 1000)
 80005a8:	f000 fb8a 	bl	8000cc0 <HAL_GetTick>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <main+0x104>)
 80005b0:	695b      	ldr	r3, [r3, #20]
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005b8:	d308      	bcc.n	80005cc <main+0xe4>
		  {
			  hLoRaModule.rylr998Transmitter.timer = HAL_GetTick();
 80005ba:	f000 fb81 	bl	8000cc0 <HAL_GetTick>
 80005be:	4602      	mov	r2, r0
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <main+0x104>)
 80005c2:	615a      	str	r2, [r3, #20]

			  rylr998Send(&hLoRaModule, ULORA_CONN_COUNT);
 80005c4:	2102      	movs	r1, #2
 80005c6:	4809      	ldr	r0, [pc, #36]	; (80005ec <main+0x104>)
 80005c8:	f003 f930 	bl	800382c <rylr998Send>
		  }
	  }


	  if(HAL_GetTick() - hLoRaModule.rylr998Timer > 300)
 80005cc:	f000 fb78 	bl	8000cc0 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	4b06      	ldr	r3, [pc, #24]	; (80005ec <main+0x104>)
 80005d4:	685b      	ldr	r3, [r3, #4]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80005dc:	d9b7      	bls.n	800054e <main+0x66>
	  {
		  LED_OFF;
 80005de:	2201      	movs	r2, #1
 80005e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e4:	4804      	ldr	r0, [pc, #16]	; (80005f8 <main+0x110>)
 80005e6:	f001 fa45 	bl	8001a74 <HAL_GPIO_WritePin>
	  if(RYLR998_ReadInterruptFlag())
 80005ea:	e7b0      	b.n	800054e <main+0x66>
 80005ec:	20000130 	.word	0x20000130
 80005f0:	2000023f 	.word	0x2000023f
 80005f4:	200000e8 	.word	0x200000e8
 80005f8:	40020800 	.word	0x40020800
 80005fc:	40020000 	.word	0x40020000

08000600 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b094      	sub	sp, #80	; 0x50
 8000604:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000606:	f107 0320 	add.w	r3, r7, #32
 800060a:	2230      	movs	r2, #48	; 0x30
 800060c:	2100      	movs	r1, #0
 800060e:	4618      	mov	r0, r3
 8000610:	f003 fd06 	bl	8004020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000614:	f107 030c 	add.w	r3, r7, #12
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	4b27      	ldr	r3, [pc, #156]	; (80006c8 <SystemClock_Config+0xc8>)
 800062a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062c:	4a26      	ldr	r2, [pc, #152]	; (80006c8 <SystemClock_Config+0xc8>)
 800062e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000632:	6413      	str	r3, [r2, #64]	; 0x40
 8000634:	4b24      	ldr	r3, [pc, #144]	; (80006c8 <SystemClock_Config+0xc8>)
 8000636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800063c:	60bb      	str	r3, [r7, #8]
 800063e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	4b21      	ldr	r3, [pc, #132]	; (80006cc <SystemClock_Config+0xcc>)
 8000646:	681b      	ldr	r3, [r3, #0]
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xcc>)
 800064a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xcc>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800065c:	2301      	movs	r3, #1
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000660:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000664:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000666:	2302      	movs	r3, #2
 8000668:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000670:	230c      	movs	r3, #12
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000674:	2360      	movs	r3, #96	; 0x60
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800067c:	2304      	movs	r3, #4
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fa33 	bl	8001af0 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000690:	f000 f936 	bl	8000900 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2103      	movs	r1, #3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fc8d 	bl	8001fd0 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80006bc:	f000 f920 	bl	8000900 <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006d6:	4a12      	ldr	r2, [pc, #72]	; (8000720 <MX_USART1_UART_Init+0x50>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_USART1_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_USART1_UART_Init+0x4c>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_USART1_UART_Init+0x4c>)
 8000708:	f001 fe2e 	bl	8002368 <HAL_UART_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000712:	f000 f8f5 	bl	8000900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	200000e8 	.word	0x200000e8
 8000720:	40011000 	.word	0x40011000

08000724 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800072a:	2300      	movs	r3, #0
 800072c:	607b      	str	r3, [r7, #4]
 800072e:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_DMA_Init+0x4c>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	4a0f      	ldr	r2, [pc, #60]	; (8000770 <MX_DMA_Init+0x4c>)
 8000734:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000738:	6313      	str	r3, [r2, #48]	; 0x30
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_DMA_Init+0x4c>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8000746:	2200      	movs	r2, #0
 8000748:	2100      	movs	r1, #0
 800074a:	203a      	movs	r0, #58	; 0x3a
 800074c:	f000 fbc1 	bl	8000ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000750:	203a      	movs	r0, #58	; 0x3a
 8000752:	f000 fbda 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000756:	2200      	movs	r2, #0
 8000758:	2100      	movs	r1, #0
 800075a:	2046      	movs	r0, #70	; 0x46
 800075c:	f000 fbb9 	bl	8000ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000760:	2046      	movs	r0, #70	; 0x46
 8000762:	f000 fbd2 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	40023800 	.word	0x40023800

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 0314 	add.w	r3, r7, #20
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b3c      	ldr	r3, [pc, #240]	; (8000880 <MX_GPIO_Init+0x10c>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a3b      	ldr	r2, [pc, #236]	; (8000880 <MX_GPIO_Init+0x10c>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b39      	ldr	r3, [pc, #228]	; (8000880 <MX_GPIO_Init+0x10c>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b35      	ldr	r3, [pc, #212]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a34      	ldr	r2, [pc, #208]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b32      	ldr	r3, [pc, #200]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
 80007c6:	4b2e      	ldr	r3, [pc, #184]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a2d      	ldr	r2, [pc, #180]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007cc:	f043 0301 	orr.w	r3, r3, #1
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b2b      	ldr	r3, [pc, #172]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	60bb      	str	r3, [r7, #8]
 80007dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b27      	ldr	r3, [pc, #156]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a26      	ldr	r2, [pc, #152]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007e8:	f043 0302 	orr.w	r3, r3, #2
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <MX_GPIO_Init+0x10c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0302 	and.w	r3, r3, #2
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80007fa:	2200      	movs	r2, #0
 80007fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000800:	4820      	ldr	r0, [pc, #128]	; (8000884 <MX_GPIO_Init+0x110>)
 8000802:	f001 f937 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RYLR998_RST_GPIO_Port, RYLR998_RST_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800080c:	481e      	ldr	r0, [pc, #120]	; (8000888 <MX_GPIO_Init+0x114>)
 800080e:	f001 f931 	bl	8001a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8000812:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4816      	ldr	r0, [pc, #88]	; (8000884 <MX_GPIO_Init+0x110>)
 800082c:	f000 ff88 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000834:	4b15      	ldr	r3, [pc, #84]	; (800088c <MX_GPIO_Init+0x118>)
 8000836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000838:	2301      	movs	r3, #1
 800083a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 0314 	add.w	r3, r7, #20
 8000840:	4619      	mov	r1, r3
 8000842:	4813      	ldr	r0, [pc, #76]	; (8000890 <MX_GPIO_Init+0x11c>)
 8000844:	f000 ff7c 	bl	8001740 <HAL_GPIO_Init>

  /*Configure GPIO pin : RYLR998_RST_Pin */
  GPIO_InitStruct.Pin = RYLR998_RST_Pin;
 8000848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800084c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084e:	2301      	movs	r3, #1
 8000850:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000852:	2300      	movs	r3, #0
 8000854:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RYLR998_RST_GPIO_Port, &GPIO_InitStruct);
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	4619      	mov	r1, r3
 8000860:	4809      	ldr	r0, [pc, #36]	; (8000888 <MX_GPIO_Init+0x114>)
 8000862:	f000 ff6d 	bl	8001740 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000866:	2200      	movs	r2, #0
 8000868:	2100      	movs	r1, #0
 800086a:	2006      	movs	r0, #6
 800086c:	f000 fb31 	bl	8000ed2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000870:	2006      	movs	r0, #6
 8000872:	f000 fb4a 	bl	8000f0a <HAL_NVIC_EnableIRQ>

}
 8000876:	bf00      	nop
 8000878:	3728      	adds	r7, #40	; 0x28
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800
 8000884:	40020800 	.word	0x40020800
 8000888:	40020400 	.word	0x40020400
 800088c:	10210000 	.word	0x10210000
 8000890:	40020000 	.word	0x40020000

08000894 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	 RYLR998_WriteInterruptFlag(ENABLE);
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <HAL_UART_RxCpltCallback+0x20>)
 800089e:	7a13      	ldrb	r3, [r2, #8]
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	7213      	strb	r3, [r2, #8]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80008a6:	bf00      	nop
 80008a8:	370c      	adds	r7, #12
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	20000130 	.word	0x20000130

080008b8 <HAL_UARTEx_RxEventCallback>:

 void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
 {
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	460b      	mov	r3, r1
 80008c2:	807b      	strh	r3, [r7, #2]
 	RYLR998_WriteInterruptFlag(ENABLE);
 80008c4:	4a0a      	ldr	r2, [pc, #40]	; (80008f0 <HAL_UARTEx_RxEventCallback+0x38>)
 80008c6:	7a13      	ldrb	r3, [r2, #8]
 80008c8:	f043 0301 	orr.w	r3, r3, #1
 80008cc:	7213      	strb	r3, [r2, #8]
 	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, hLoRaModule.rylr998Receiver.rxBuffer, 100);
 80008ce:	2264      	movs	r2, #100	; 0x64
 80008d0:	4908      	ldr	r1, [pc, #32]	; (80008f4 <HAL_UARTEx_RxEventCallback+0x3c>)
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_UARTEx_RxEventCallback+0x40>)
 80008d4:	f001 fe57 	bl	8002586 <HAL_UARTEx_ReceiveToIdle_DMA>
 	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <HAL_UARTEx_RxEventCallback+0x44>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	4b07      	ldr	r3, [pc, #28]	; (80008fc <HAL_UARTEx_RxEventCallback+0x44>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f022 0208 	bic.w	r2, r2, #8
 80008e6:	601a      	str	r2, [r3, #0]
 }
 80008e8:	bf00      	nop
 80008ea:	3708      	adds	r7, #8
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000130 	.word	0x20000130
 80008f4:	2000023f 	.word	0x2000023f
 80008f8:	200000e8 	.word	0x200000e8
 80008fc:	20000088 	.word	0x20000088

08000900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000900:	b480      	push	{r7}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000904:	bf00      	nop
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	4a0f      	ldr	r2, [pc, #60]	; (800095c <HAL_MspInit+0x4c>)
 8000920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000924:	6453      	str	r3, [r2, #68]	; 0x44
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <HAL_MspInit+0x4c>)
 8000928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092e:	607b      	str	r3, [r7, #4]
 8000930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x4c>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	6413      	str	r3, [r2, #64]	; 0x40
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x4c>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40023800 	.word	0x40023800

08000960 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08a      	sub	sp, #40	; 0x28
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a4c      	ldr	r2, [pc, #304]	; (8000ab0 <HAL_UART_MspInit+0x150>)
 800097e:	4293      	cmp	r3, r2
 8000980:	f040 8091 	bne.w	8000aa6 <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000984:	2300      	movs	r3, #0
 8000986:	613b      	str	r3, [r7, #16]
 8000988:	4b4a      	ldr	r3, [pc, #296]	; (8000ab4 <HAL_UART_MspInit+0x154>)
 800098a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098c:	4a49      	ldr	r2, [pc, #292]	; (8000ab4 <HAL_UART_MspInit+0x154>)
 800098e:	f043 0310 	orr.w	r3, r3, #16
 8000992:	6453      	str	r3, [r2, #68]	; 0x44
 8000994:	4b47      	ldr	r3, [pc, #284]	; (8000ab4 <HAL_UART_MspInit+0x154>)
 8000996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000998:	f003 0310 	and.w	r3, r3, #16
 800099c:	613b      	str	r3, [r7, #16]
 800099e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	4b43      	ldr	r3, [pc, #268]	; (8000ab4 <HAL_UART_MspInit+0x154>)
 80009a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a8:	4a42      	ldr	r2, [pc, #264]	; (8000ab4 <HAL_UART_MspInit+0x154>)
 80009aa:	f043 0301 	orr.w	r3, r3, #1
 80009ae:	6313      	str	r3, [r2, #48]	; 0x30
 80009b0:	4b40      	ldr	r3, [pc, #256]	; (8000ab4 <HAL_UART_MspInit+0x154>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009bc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ca:	2303      	movs	r3, #3
 80009cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009ce:	2307      	movs	r3, #7
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4619      	mov	r1, r3
 80009d8:	4837      	ldr	r0, [pc, #220]	; (8000ab8 <HAL_UART_MspInit+0x158>)
 80009da:	f000 feb1 	bl	8001740 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <HAL_UART_MspInit+0x15c>)
 80009e0:	4a37      	ldr	r2, [pc, #220]	; (8000ac0 <HAL_UART_MspInit+0x160>)
 80009e2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80009e4:	4b35      	ldr	r3, [pc, #212]	; (8000abc <HAL_UART_MspInit+0x15c>)
 80009e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009ea:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009ec:	4b33      	ldr	r3, [pc, #204]	; (8000abc <HAL_UART_MspInit+0x15c>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009f2:	4b32      	ldr	r3, [pc, #200]	; (8000abc <HAL_UART_MspInit+0x15c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <HAL_UART_MspInit+0x15c>)
 80009fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009fe:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a00:	4b2e      	ldr	r3, [pc, #184]	; (8000abc <HAL_UART_MspInit+0x15c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <HAL_UART_MspInit+0x15c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <HAL_UART_MspInit+0x15c>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <HAL_UART_MspInit+0x15c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <HAL_UART_MspInit+0x15c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000a1e:	4827      	ldr	r0, [pc, #156]	; (8000abc <HAL_UART_MspInit+0x15c>)
 8000a20:	f000 fa8e 	bl	8000f40 <HAL_DMA_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000a2a:	f7ff ff69 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	4a22      	ldr	r2, [pc, #136]	; (8000abc <HAL_UART_MspInit+0x15c>)
 8000a32:	639a      	str	r2, [r3, #56]	; 0x38
 8000a34:	4a21      	ldr	r2, [pc, #132]	; (8000abc <HAL_UART_MspInit+0x15c>)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a3c:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <HAL_UART_MspInit+0x168>)
 8000a3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000a40:	4b20      	ldr	r3, [pc, #128]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a46:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a54:	4b1b      	ldr	r3, [pc, #108]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a56:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a5a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a62:	4b18      	ldr	r3, [pc, #96]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000a68:	4b16      	ldr	r3, [pc, #88]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a6e:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a7a:	4812      	ldr	r0, [pc, #72]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a7c:	f000 fa60 	bl	8000f40 <HAL_DMA_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000a86:	f7ff ff3b 	bl	8000900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	4a0d      	ldr	r2, [pc, #52]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a8e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a90:	4a0c      	ldr	r2, [pc, #48]	; (8000ac4 <HAL_UART_MspInit+0x164>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2025      	movs	r0, #37	; 0x25
 8000a9c:	f000 fa19 	bl	8000ed2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aa0:	2025      	movs	r0, #37	; 0x25
 8000aa2:	f000 fa32 	bl	8000f0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40011000 	.word	0x40011000
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40020000 	.word	0x40020000
 8000abc:	20000088 	.word	0x20000088
 8000ac0:	40026440 	.word	0x40026440
 8000ac4:	20000028 	.word	0x20000028
 8000ac8:	400264b8 	.word	0x400264b8

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ad0:	bf00      	nop
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f8ba 	bl	8000c98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000b2c:	2001      	movs	r0, #1
 8000b2e:	f000 ffbb 	bl	8001aa8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	RYLR998_WirteInterruptFlag(ENABLE);

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000b3c:	4802      	ldr	r0, [pc, #8]	; (8000b48 <USART1_IRQHandler+0x10>)
 8000b3e:	f001 fd87 	bl	8002650 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000b42:	bf00      	nop
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200000e8 	.word	0x200000e8

08000b4c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000b50:	4802      	ldr	r0, [pc, #8]	; (8000b5c <DMA2_Stream2_IRQHandler+0x10>)
 8000b52:	f000 fb8d 	bl	8001270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000088 	.word	0x20000088

08000b60 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000b64:	4802      	ldr	r0, [pc, #8]	; (8000b70 <DMA2_Stream7_IRQHandler+0x10>)
 8000b66:	f000 fb83 	bl	8001270 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	20000028 	.word	0x20000028

08000b74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <SystemInit+0x28>)
 8000b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <SystemInit+0x28>)
 8000b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <SystemInit+0x28>)
 8000b8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ba0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ba4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ba6:	e003      	b.n	8000bb0 <LoopCopyDataInit>

08000ba8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ba8:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000baa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000bac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000bae:	3104      	adds	r1, #4

08000bb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000bb0:	480b      	ldr	r0, [pc, #44]	; (8000be0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000bb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000bb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000bb8:	d3f6      	bcc.n	8000ba8 <CopyDataInit>
  ldr  r2, =_sbss
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000bbc:	e002      	b.n	8000bc4 <LoopFillZerobss>

08000bbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000bbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000bc0:	f842 3b04 	str.w	r3, [r2], #4

08000bc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000bc4:	4b09      	ldr	r3, [pc, #36]	; (8000bec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000bc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000bc8:	d3f9      	bcc.n	8000bbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000bca:	f7ff ffd3 	bl	8000b74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bce:	f003 f9e9 	bl	8003fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bd2:	f7ff fc89 	bl	80004e8 <main>
  bx  lr    
 8000bd6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000bdc:	08004104 	.word	0x08004104
  ldr  r0, =_sdata
 8000be0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000be4:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000be8:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000bec:	2000033c 	.word	0x2000033c

08000bf0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bf0:	e7fe      	b.n	8000bf0 <ADC_IRQHandler>
	...

08000bf4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bf8:	4b0e      	ldr	r3, [pc, #56]	; (8000c34 <HAL_Init+0x40>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <HAL_Init+0x40>)
 8000bfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c04:	4b0b      	ldr	r3, [pc, #44]	; (8000c34 <HAL_Init+0x40>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	4a0a      	ldr	r2, [pc, #40]	; (8000c34 <HAL_Init+0x40>)
 8000c0a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_Init+0x40>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_Init+0x40>)
 8000c16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f94d 	bl	8000ebc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f808 	bl	8000c38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c28:	f7ff fe72 	bl	8000910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c2c:	2300      	movs	r3, #0
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40023c00 	.word	0x40023c00

08000c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <HAL_InitTick+0x54>)
 8000c42:	681a      	ldr	r2, [r3, #0]
 8000c44:	4b12      	ldr	r3, [pc, #72]	; (8000c90 <HAL_InitTick+0x58>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	4619      	mov	r1, r3
 8000c4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 f965 	bl	8000f26 <HAL_SYSTICK_Config>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	e00e      	b.n	8000c84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2b0f      	cmp	r3, #15
 8000c6a:	d80a      	bhi.n	8000c82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	6879      	ldr	r1, [r7, #4]
 8000c70:	f04f 30ff 	mov.w	r0, #4294967295
 8000c74:	f000 f92d 	bl	8000ed2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c78:	4a06      	ldr	r2, [pc, #24]	; (8000c94 <HAL_InitTick+0x5c>)
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3708      	adds	r7, #8
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000008 	.word	0x20000008
 8000c94:	20000004 	.word	0x20000004

08000c98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c9c:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <HAL_IncTick+0x20>)
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_IncTick+0x24>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	4a04      	ldr	r2, [pc, #16]	; (8000cbc <HAL_IncTick+0x24>)
 8000caa:	6013      	str	r3, [r2, #0]
}
 8000cac:	bf00      	nop
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	2000012c 	.word	0x2000012c

08000cc0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cc4:	4b03      	ldr	r3, [pc, #12]	; (8000cd4 <HAL_GetTick+0x14>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	2000012c 	.word	0x2000012c

08000cd8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ce0:	f7ff ffee 	bl	8000cc0 <HAL_GetTick>
 8000ce4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cf0:	d005      	beq.n	8000cfe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cf2:	4b09      	ldr	r3, [pc, #36]	; (8000d18 <HAL_Delay+0x40>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	461a      	mov	r2, r3
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cfe:	bf00      	nop
 8000d00:	f7ff ffde 	bl	8000cc0 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	68fa      	ldr	r2, [r7, #12]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d8f7      	bhi.n	8000d00 <HAL_Delay+0x28>
  {
  }
}
 8000d10:	bf00      	nop
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000008 	.word	0x20000008

08000d1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b085      	sub	sp, #20
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0307 	and.w	r3, r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d2e:	68db      	ldr	r3, [r3, #12]
 8000d30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d38:	4013      	ands	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d4e:	4a04      	ldr	r2, [pc, #16]	; (8000d60 <__NVIC_SetPriorityGrouping+0x44>)
 8000d50:	68bb      	ldr	r3, [r7, #8]
 8000d52:	60d3      	str	r3, [r2, #12]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000ed00 	.word	0xe000ed00

08000d64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d68:	4b04      	ldr	r3, [pc, #16]	; (8000d7c <__NVIC_GetPriorityGrouping+0x18>)
 8000d6a:	68db      	ldr	r3, [r3, #12]
 8000d6c:	0a1b      	lsrs	r3, r3, #8
 8000d6e:	f003 0307 	and.w	r3, r3, #7
}
 8000d72:	4618      	mov	r0, r3
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	e000ed00 	.word	0xe000ed00

08000d80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b083      	sub	sp, #12
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	4603      	mov	r3, r0
 8000d88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	db0b      	blt.n	8000daa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d92:	79fb      	ldrb	r3, [r7, #7]
 8000d94:	f003 021f 	and.w	r2, r3, #31
 8000d98:	4907      	ldr	r1, [pc, #28]	; (8000db8 <__NVIC_EnableIRQ+0x38>)
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	095b      	lsrs	r3, r3, #5
 8000da0:	2001      	movs	r0, #1
 8000da2:	fa00 f202 	lsl.w	r2, r0, r2
 8000da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000daa:	bf00      	nop
 8000dac:	370c      	adds	r7, #12
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
	...

08000e78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	3b01      	subs	r3, #1
 8000e84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e88:	d301      	bcc.n	8000e8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e00f      	b.n	8000eae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <SysTick_Config+0x40>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e96:	210f      	movs	r1, #15
 8000e98:	f04f 30ff 	mov.w	r0, #4294967295
 8000e9c:	f7ff ff8e 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ea0:	4b05      	ldr	r3, [pc, #20]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea6:	4b04      	ldr	r3, [pc, #16]	; (8000eb8 <SysTick_Config+0x40>)
 8000ea8:	2207      	movs	r2, #7
 8000eaa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000eac:	2300      	movs	r3, #0
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	e000e010 	.word	0xe000e010

08000ebc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec4:	6878      	ldr	r0, [r7, #4]
 8000ec6:	f7ff ff29 	bl	8000d1c <__NVIC_SetPriorityGrouping>
}
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b086      	sub	sp, #24
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	4603      	mov	r3, r0
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee4:	f7ff ff3e 	bl	8000d64 <__NVIC_GetPriorityGrouping>
 8000ee8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	6978      	ldr	r0, [r7, #20]
 8000ef0:	f7ff ff8e 	bl	8000e10 <NVIC_EncodePriority>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efa:	4611      	mov	r1, r2
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5d 	bl	8000dbc <__NVIC_SetPriority>
}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}

08000f0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0a:	b580      	push	{r7, lr}
 8000f0c:	b082      	sub	sp, #8
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	4603      	mov	r3, r0
 8000f12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff ff31 	bl	8000d80 <__NVIC_EnableIRQ>
}
 8000f1e:	bf00      	nop
 8000f20:	3708      	adds	r7, #8
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffa2 	bl	8000e78 <SysTick_Config>
 8000f34:	4603      	mov	r3, r0
}
 8000f36:	4618      	mov	r0, r3
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff feb8 	bl	8000cc0 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d101      	bne.n	8000f5c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e099      	b.n	8001090 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2202      	movs	r2, #2
 8000f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	681a      	ldr	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f022 0201 	bic.w	r2, r2, #1
 8000f7a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f7c:	e00f      	b.n	8000f9e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f7e:	f7ff fe9f 	bl	8000cc0 <HAL_GetTick>
 8000f82:	4602      	mov	r2, r0
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	1ad3      	subs	r3, r2, r3
 8000f88:	2b05      	cmp	r3, #5
 8000f8a:	d908      	bls.n	8000f9e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	2220      	movs	r2, #32
 8000f90:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2203      	movs	r2, #3
 8000f96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e078      	b.n	8001090 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 0301 	and.w	r3, r3, #1
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1e8      	bne.n	8000f7e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000fb4:	697a      	ldr	r2, [r7, #20]
 8000fb6:	4b38      	ldr	r3, [pc, #224]	; (8001098 <HAL_DMA_Init+0x158>)
 8000fb8:	4013      	ands	r3, r2
 8000fba:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fca:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	691b      	ldr	r3, [r3, #16]
 8000fd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fe2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6a1b      	ldr	r3, [r3, #32]
 8000fe8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff4:	2b04      	cmp	r3, #4
 8000ff6:	d107      	bne.n	8001008 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4313      	orrs	r3, r2
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	4313      	orrs	r3, r2
 8001006:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f023 0307 	bic.w	r3, r3, #7
 800101e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001024:	697a      	ldr	r2, [r7, #20]
 8001026:	4313      	orrs	r3, r2
 8001028:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	2b04      	cmp	r3, #4
 8001030:	d117      	bne.n	8001062 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	697a      	ldr	r2, [r7, #20]
 8001038:	4313      	orrs	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	2b00      	cmp	r3, #0
 8001042:	d00e      	beq.n	8001062 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f000 fb01 	bl	800164c <DMA_CheckFifoParam>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d008      	beq.n	8001062 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2240      	movs	r2, #64	; 0x40
 8001054:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800105e:	2301      	movs	r3, #1
 8001060:	e016      	b.n	8001090 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	697a      	ldr	r2, [r7, #20]
 8001068:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f000 fab8 	bl	80015e0 <DMA_CalcBaseAndBitshift>
 8001070:	4603      	mov	r3, r0
 8001072:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001078:	223f      	movs	r2, #63	; 0x3f
 800107a:	409a      	lsls	r2, r3
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2200      	movs	r2, #0
 8001084:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2201      	movs	r2, #1
 800108a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800108e:	2300      	movs	r3, #0
}
 8001090:	4618      	mov	r0, r3
 8001092:	3718      	adds	r7, #24
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	f010803f 	.word	0xf010803f

0800109c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
 80010a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010aa:	2300      	movs	r3, #0
 80010ac:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d101      	bne.n	80010c2 <HAL_DMA_Start_IT+0x26>
 80010be:	2302      	movs	r3, #2
 80010c0:	e040      	b.n	8001144 <HAL_DMA_Start_IT+0xa8>
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	2201      	movs	r2, #1
 80010c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b01      	cmp	r3, #1
 80010d4:	d12f      	bne.n	8001136 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2202      	movs	r2, #2
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	2200      	movs	r2, #0
 80010e2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	687a      	ldr	r2, [r7, #4]
 80010e8:	68b9      	ldr	r1, [r7, #8]
 80010ea:	68f8      	ldr	r0, [r7, #12]
 80010ec:	f000 fa4a 	bl	8001584 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010f4:	223f      	movs	r2, #63	; 0x3f
 80010f6:	409a      	lsls	r2, r3
 80010f8:	693b      	ldr	r3, [r7, #16]
 80010fa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f042 0216 	orr.w	r2, r2, #22
 800110a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	2b00      	cmp	r3, #0
 8001112:	d007      	beq.n	8001124 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 0208 	orr.w	r2, r2, #8
 8001122:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e005      	b.n	8001142 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800113e:	2302      	movs	r3, #2
 8001140:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001158:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800115a:	f7ff fdb1 	bl	8000cc0 <HAL_GetTick>
 800115e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b02      	cmp	r3, #2
 800116a:	d008      	beq.n	800117e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2280      	movs	r2, #128	; 0x80
 8001170:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2200      	movs	r2, #0
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e052      	b.n	8001224 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f022 0216 	bic.w	r2, r2, #22
 800118c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	695a      	ldr	r2, [r3, #20]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800119c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d103      	bne.n	80011ae <HAL_DMA_Abort+0x62>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d007      	beq.n	80011be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 0208 	bic.w	r2, r2, #8
 80011bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011ce:	e013      	b.n	80011f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011d0:	f7ff fd76 	bl	8000cc0 <HAL_GetTick>
 80011d4:	4602      	mov	r2, r0
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	2b05      	cmp	r3, #5
 80011dc:	d90c      	bls.n	80011f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2220      	movs	r2, #32
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2200      	movs	r2, #0
 80011e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2203      	movs	r2, #3
 80011f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e015      	b.n	8001224 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1e4      	bne.n	80011d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800120a:	223f      	movs	r2, #63	; 0x3f
 800120c:	409a      	lsls	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d004      	beq.n	800124a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2280      	movs	r2, #128	; 0x80
 8001244:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00c      	b.n	8001264 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2205      	movs	r2, #5
 800124e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f022 0201 	bic.w	r2, r2, #1
 8001260:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001278:	2300      	movs	r3, #0
 800127a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800127c:	4b92      	ldr	r3, [pc, #584]	; (80014c8 <HAL_DMA_IRQHandler+0x258>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a92      	ldr	r2, [pc, #584]	; (80014cc <HAL_DMA_IRQHandler+0x25c>)
 8001282:	fba2 2303 	umull	r2, r3, r2, r3
 8001286:	0a9b      	lsrs	r3, r3, #10
 8001288:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	2208      	movs	r2, #8
 800129c:	409a      	lsls	r2, r3
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d01a      	beq.n	80012dc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d013      	beq.n	80012dc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f022 0204 	bic.w	r2, r2, #4
 80012c2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012c8:	2208      	movs	r2, #8
 80012ca:	409a      	lsls	r2, r3
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012d4:	f043 0201 	orr.w	r2, r3, #1
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e0:	2201      	movs	r2, #1
 80012e2:	409a      	lsls	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4013      	ands	r3, r2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d012      	beq.n	8001312 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00b      	beq.n	8001312 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012fe:	2201      	movs	r2, #1
 8001300:	409a      	lsls	r2, r3
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800130a:	f043 0202 	orr.w	r2, r3, #2
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001316:	2204      	movs	r2, #4
 8001318:	409a      	lsls	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	4013      	ands	r3, r2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d012      	beq.n	8001348 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	2b00      	cmp	r3, #0
 800132e:	d00b      	beq.n	8001348 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2204      	movs	r2, #4
 8001336:	409a      	lsls	r2, r3
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001340:	f043 0204 	orr.w	r2, r3, #4
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800134c:	2210      	movs	r2, #16
 800134e:	409a      	lsls	r2, r3
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4013      	ands	r3, r2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d043      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f003 0308 	and.w	r3, r3, #8
 8001362:	2b00      	cmp	r3, #0
 8001364:	d03c      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800136a:	2210      	movs	r2, #16
 800136c:	409a      	lsls	r2, r3
 800136e:	693b      	ldr	r3, [r7, #16]
 8001370:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d018      	beq.n	80013b2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d108      	bne.n	80013a0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001392:	2b00      	cmp	r3, #0
 8001394:	d024      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	4798      	blx	r3
 800139e:	e01f      	b.n	80013e0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01b      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	4798      	blx	r3
 80013b0:	e016      	b.n	80013e0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d107      	bne.n	80013d0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0208 	bic.w	r2, r2, #8
 80013ce:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d003      	beq.n	80013e0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013dc:	6878      	ldr	r0, [r7, #4]
 80013de:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013e4:	2220      	movs	r2, #32
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4013      	ands	r3, r2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	f000 808e 	beq.w	800150e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0310 	and.w	r3, r3, #16
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 8086 	beq.w	800150e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001406:	2220      	movs	r2, #32
 8001408:	409a      	lsls	r2, r3
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001414:	b2db      	uxtb	r3, r3
 8001416:	2b05      	cmp	r3, #5
 8001418:	d136      	bne.n	8001488 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f022 0216 	bic.w	r2, r2, #22
 8001428:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	695a      	ldr	r2, [r3, #20]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001438:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	2b00      	cmp	r3, #0
 8001440:	d103      	bne.n	800144a <HAL_DMA_IRQHandler+0x1da>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0208 	bic.w	r2, r2, #8
 8001458:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800145e:	223f      	movs	r2, #63	; 0x3f
 8001460:	409a      	lsls	r2, r3
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2200      	movs	r2, #0
 800146a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147a:	2b00      	cmp	r3, #0
 800147c:	d07d      	beq.n	800157a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	4798      	blx	r3
        }
        return;
 8001486:	e078      	b.n	800157a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d01c      	beq.n	80014d0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d108      	bne.n	80014b6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d030      	beq.n	800150e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	6878      	ldr	r0, [r7, #4]
 80014b2:	4798      	blx	r3
 80014b4:	e02b      	b.n	800150e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d027      	beq.n	800150e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	4798      	blx	r3
 80014c6:	e022      	b.n	800150e <HAL_DMA_IRQHandler+0x29e>
 80014c8:	20000000 	.word	0x20000000
 80014cc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d10f      	bne.n	80014fe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f022 0210 	bic.w	r2, r2, #16
 80014ec:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2201      	movs	r2, #1
 80014fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001512:	2b00      	cmp	r3, #0
 8001514:	d032      	beq.n	800157c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	2b00      	cmp	r3, #0
 8001520:	d022      	beq.n	8001568 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	697a      	ldr	r2, [r7, #20]
 8001542:	429a      	cmp	r2, r3
 8001544:	d307      	bcc.n	8001556 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1f2      	bne.n	800153a <HAL_DMA_IRQHandler+0x2ca>
 8001554:	e000      	b.n	8001558 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001556:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156c:	2b00      	cmp	r3, #0
 800156e:	d005      	beq.n	800157c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001574:	6878      	ldr	r0, [r7, #4]
 8001576:	4798      	blx	r3
 8001578:	e000      	b.n	800157c <HAL_DMA_IRQHandler+0x30c>
        return;
 800157a:	bf00      	nop
    }
  }
}
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop

08001584 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	60f8      	str	r0, [r7, #12]
 800158c:	60b9      	str	r1, [r7, #8]
 800158e:	607a      	str	r2, [r7, #4]
 8001590:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	2b40      	cmp	r3, #64	; 0x40
 80015b0:	d108      	bne.n	80015c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68ba      	ldr	r2, [r7, #8]
 80015c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80015c2:	e007      	b.n	80015d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	687a      	ldr	r2, [r7, #4]
 80015d2:	60da      	str	r2, [r3, #12]
}
 80015d4:	bf00      	nop
 80015d6:	3714      	adds	r7, #20
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b085      	sub	sp, #20
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3b10      	subs	r3, #16
 80015f0:	4a14      	ldr	r2, [pc, #80]	; (8001644 <DMA_CalcBaseAndBitshift+0x64>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <DMA_CalcBaseAndBitshift+0x68>)
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4413      	add	r3, r2
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	2b03      	cmp	r3, #3
 800160c:	d909      	bls.n	8001622 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001616:	f023 0303 	bic.w	r3, r3, #3
 800161a:	1d1a      	adds	r2, r3, #4
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	659a      	str	r2, [r3, #88]	; 0x58
 8001620:	e007      	b.n	8001632 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800162a:	f023 0303 	bic.w	r3, r3, #3
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001636:	4618      	mov	r0, r3
 8001638:	3714      	adds	r7, #20
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	aaaaaaab 	.word	0xaaaaaaab
 8001648:	080040ec 	.word	0x080040ec

0800164c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800165c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d11f      	bne.n	80016a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b03      	cmp	r3, #3
 800166a:	d855      	bhi.n	8001718 <DMA_CheckFifoParam+0xcc>
 800166c:	a201      	add	r2, pc, #4	; (adr r2, 8001674 <DMA_CheckFifoParam+0x28>)
 800166e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001672:	bf00      	nop
 8001674:	08001685 	.word	0x08001685
 8001678:	08001697 	.word	0x08001697
 800167c:	08001685 	.word	0x08001685
 8001680:	08001719 	.word	0x08001719
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001688:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d045      	beq.n	800171c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001694:	e042      	b.n	800171c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800169e:	d13f      	bne.n	8001720 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016a4:	e03c      	b.n	8001720 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80016ae:	d121      	bne.n	80016f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	2b03      	cmp	r3, #3
 80016b4:	d836      	bhi.n	8001724 <DMA_CheckFifoParam+0xd8>
 80016b6:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <DMA_CheckFifoParam+0x70>)
 80016b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	080016d3 	.word	0x080016d3
 80016c4:	080016cd 	.word	0x080016cd
 80016c8:	080016e5 	.word	0x080016e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
      break;
 80016d0:	e02f      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d024      	beq.n	8001728 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016e2:	e021      	b.n	8001728 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80016ec:	d11e      	bne.n	800172c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80016f2:	e01b      	b.n	800172c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d902      	bls.n	8001700 <DMA_CheckFifoParam+0xb4>
 80016fa:	2b03      	cmp	r3, #3
 80016fc:	d003      	beq.n	8001706 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80016fe:	e018      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	73fb      	strb	r3, [r7, #15]
      break;
 8001704:	e015      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800170a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00e      	beq.n	8001730 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	73fb      	strb	r3, [r7, #15]
      break;
 8001716:	e00b      	b.n	8001730 <DMA_CheckFifoParam+0xe4>
      break;
 8001718:	bf00      	nop
 800171a:	e00a      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 800171c:	bf00      	nop
 800171e:	e008      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 8001720:	bf00      	nop
 8001722:	e006      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 8001724:	bf00      	nop
 8001726:	e004      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 8001728:	bf00      	nop
 800172a:	e002      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;   
 800172c:	bf00      	nop
 800172e:	e000      	b.n	8001732 <DMA_CheckFifoParam+0xe6>
      break;
 8001730:	bf00      	nop
    }
  } 
  
  return status; 
 8001732:	7bfb      	ldrb	r3, [r7, #15]
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800174a:	2300      	movs	r3, #0
 800174c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800174e:	2300      	movs	r3, #0
 8001750:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001756:	2300      	movs	r3, #0
 8001758:	61fb      	str	r3, [r7, #28]
 800175a:	e159      	b.n	8001a10 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800175c:	2201      	movs	r2, #1
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	fa02 f303 	lsl.w	r3, r2, r3
 8001764:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	697a      	ldr	r2, [r7, #20]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	429a      	cmp	r2, r3
 8001776:	f040 8148 	bne.w	8001a0a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d00b      	beq.n	800179a <HAL_GPIO_Init+0x5a>
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b02      	cmp	r3, #2
 8001788:	d007      	beq.n	800179a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800178e:	2b11      	cmp	r3, #17
 8001790:	d003      	beq.n	800179a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b12      	cmp	r3, #18
 8001798:	d130      	bne.n	80017fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	68da      	ldr	r2, [r3, #12]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	fa02 f303 	lsl.w	r3, r2, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017d0:	2201      	movs	r2, #1
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	091b      	lsrs	r3, r3, #4
 80017e6:	f003 0201 	and.w	r2, r3, #1
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	2203      	movs	r2, #3
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	43db      	mvns	r3, r3
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	4013      	ands	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	4313      	orrs	r3, r2
 8001824:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69ba      	ldr	r2, [r7, #24]
 800182a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0xfc>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d123      	bne.n	8001884 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	08da      	lsrs	r2, r3, #3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	3208      	adds	r2, #8
 8001844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	691a      	ldr	r2, [r3, #16]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4313      	orrs	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	08da      	lsrs	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	3208      	adds	r2, #8
 800187e:	69b9      	ldr	r1, [r7, #24]
 8001880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	2203      	movs	r2, #3
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	43db      	mvns	r3, r3
 8001896:	69ba      	ldr	r2, [r7, #24]
 8001898:	4013      	ands	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0203 	and.w	r2, r3, #3
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	fa02 f303 	lsl.w	r3, r2, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f000 80a2 	beq.w	8001a0a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b56      	ldr	r3, [pc, #344]	; (8001a24 <HAL_GPIO_Init+0x2e4>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a55      	ldr	r2, [pc, #340]	; (8001a24 <HAL_GPIO_Init+0x2e4>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b53      	ldr	r3, [pc, #332]	; (8001a24 <HAL_GPIO_Init+0x2e4>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018e2:	4a51      	ldr	r2, [pc, #324]	; (8001a28 <HAL_GPIO_Init+0x2e8>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a48      	ldr	r2, [pc, #288]	; (8001a2c <HAL_GPIO_Init+0x2ec>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d019      	beq.n	8001942 <HAL_GPIO_Init+0x202>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a47      	ldr	r2, [pc, #284]	; (8001a30 <HAL_GPIO_Init+0x2f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d013      	beq.n	800193e <HAL_GPIO_Init+0x1fe>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a46      	ldr	r2, [pc, #280]	; (8001a34 <HAL_GPIO_Init+0x2f4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d00d      	beq.n	800193a <HAL_GPIO_Init+0x1fa>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a45      	ldr	r2, [pc, #276]	; (8001a38 <HAL_GPIO_Init+0x2f8>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d007      	beq.n	8001936 <HAL_GPIO_Init+0x1f6>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a44      	ldr	r2, [pc, #272]	; (8001a3c <HAL_GPIO_Init+0x2fc>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_GPIO_Init+0x1f2>
 800192e:	2304      	movs	r3, #4
 8001930:	e008      	b.n	8001944 <HAL_GPIO_Init+0x204>
 8001932:	2307      	movs	r3, #7
 8001934:	e006      	b.n	8001944 <HAL_GPIO_Init+0x204>
 8001936:	2303      	movs	r3, #3
 8001938:	e004      	b.n	8001944 <HAL_GPIO_Init+0x204>
 800193a:	2302      	movs	r3, #2
 800193c:	e002      	b.n	8001944 <HAL_GPIO_Init+0x204>
 800193e:	2301      	movs	r3, #1
 8001940:	e000      	b.n	8001944 <HAL_GPIO_Init+0x204>
 8001942:	2300      	movs	r3, #0
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	f002 0203 	and.w	r2, r2, #3
 800194a:	0092      	lsls	r2, r2, #2
 800194c:	4093      	lsls	r3, r2
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001954:	4934      	ldr	r1, [pc, #208]	; (8001a28 <HAL_GPIO_Init+0x2e8>)
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	089b      	lsrs	r3, r3, #2
 800195a:	3302      	adds	r3, #2
 800195c:	69ba      	ldr	r2, [r7, #24]
 800195e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001962:	4b37      	ldr	r3, [pc, #220]	; (8001a40 <HAL_GPIO_Init+0x300>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	43db      	mvns	r3, r3
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	4013      	ands	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4313      	orrs	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001986:	4a2e      	ldr	r2, [pc, #184]	; (8001a40 <HAL_GPIO_Init+0x300>)
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800198c:	4b2c      	ldr	r3, [pc, #176]	; (8001a40 <HAL_GPIO_Init+0x300>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d003      	beq.n	80019b0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019b0:	4a23      	ldr	r2, [pc, #140]	; (8001a40 <HAL_GPIO_Init+0x300>)
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019b6:	4b22      	ldr	r3, [pc, #136]	; (8001a40 <HAL_GPIO_Init+0x300>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	43db      	mvns	r3, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4013      	ands	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d003      	beq.n	80019da <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019da:	4a19      	ldr	r2, [pc, #100]	; (8001a40 <HAL_GPIO_Init+0x300>)
 80019dc:	69bb      	ldr	r3, [r7, #24]
 80019de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019e0:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <HAL_GPIO_Init+0x300>)
 80019e2:	68db      	ldr	r3, [r3, #12]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	43db      	mvns	r3, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4013      	ands	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d003      	beq.n	8001a04 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a04:	4a0e      	ldr	r2, [pc, #56]	; (8001a40 <HAL_GPIO_Init+0x300>)
 8001a06:	69bb      	ldr	r3, [r7, #24]
 8001a08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	61fb      	str	r3, [r7, #28]
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	2b0f      	cmp	r3, #15
 8001a14:	f67f aea2 	bls.w	800175c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3724      	adds	r7, #36	; 0x24
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40013800 	.word	0x40013800
 8001a2c:	40020000 	.word	0x40020000
 8001a30:	40020400 	.word	0x40020400
 8001a34:	40020800 	.word	0x40020800
 8001a38:	40020c00 	.word	0x40020c00
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40013c00 	.word	0x40013c00

08001a44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	691a      	ldr	r2, [r3, #16]
 8001a54:	887b      	ldrh	r3, [r7, #2]
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d002      	beq.n	8001a62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	73fb      	strb	r3, [r7, #15]
 8001a60:	e001      	b.n	8001a66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a62:	2300      	movs	r3, #0
 8001a64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	807b      	strh	r3, [r7, #2]
 8001a80:	4613      	mov	r3, r2
 8001a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a84:	787b      	ldrb	r3, [r7, #1]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d003      	beq.n	8001a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a90:	e003      	b.n	8001a9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a92:	887b      	ldrh	r3, [r7, #2]
 8001a94:	041a      	lsls	r2, r3, #16
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	619a      	str	r2, [r3, #24]
}
 8001a9a:	bf00      	nop
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	4603      	mov	r3, r0
 8001ab0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ab4:	695a      	ldr	r2, [r3, #20]
 8001ab6:	88fb      	ldrh	r3, [r7, #6]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d006      	beq.n	8001acc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001abe:	4a05      	ldr	r2, [pc, #20]	; (8001ad4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac0:	88fb      	ldrh	r3, [r7, #6]
 8001ac2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ac4:	88fb      	ldrh	r3, [r7, #6]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f000 f806 	bl	8001ad8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001acc:	bf00      	nop
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013c00 	.word	0x40013c00

08001ad8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ae2:	bf00      	nop
 8001ae4:	370c      	adds	r7, #12
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aec:	4770      	bx	lr
	...

08001af0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e25b      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d075      	beq.n	8001bfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b0e:	4ba3      	ldr	r3, [pc, #652]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 030c 	and.w	r3, r3, #12
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d00c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b1a:	4ba0      	ldr	r3, [pc, #640]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b22:	2b08      	cmp	r3, #8
 8001b24:	d112      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b26:	4b9d      	ldr	r3, [pc, #628]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b32:	d10b      	bne.n	8001b4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b34:	4b99      	ldr	r3, [pc, #612]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d05b      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x108>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d157      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e236      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b54:	d106      	bne.n	8001b64 <HAL_RCC_OscConfig+0x74>
 8001b56:	4b91      	ldr	r3, [pc, #580]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a90      	ldr	r2, [pc, #576]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	e01d      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b6c:	d10c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x98>
 8001b6e:	4b8b      	ldr	r3, [pc, #556]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a8a      	ldr	r2, [pc, #552]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	4b88      	ldr	r3, [pc, #544]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a87      	ldr	r2, [pc, #540]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	e00b      	b.n	8001ba0 <HAL_RCC_OscConfig+0xb0>
 8001b88:	4b84      	ldr	r3, [pc, #528]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a83      	ldr	r2, [pc, #524]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b92:	6013      	str	r3, [r2, #0]
 8001b94:	4b81      	ldr	r3, [pc, #516]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a80      	ldr	r2, [pc, #512]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001b9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ba8:	f7ff f88a 	bl	8000cc0 <HAL_GetTick>
 8001bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bae:	e008      	b.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bb0:	f7ff f886 	bl	8000cc0 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	2b64      	cmp	r3, #100	; 0x64
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e1fb      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bc2:	4b76      	ldr	r3, [pc, #472]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0f0      	beq.n	8001bb0 <HAL_RCC_OscConfig+0xc0>
 8001bce:	e014      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd0:	f7ff f876 	bl	8000cc0 <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bd6:	e008      	b.n	8001bea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bd8:	f7ff f872 	bl	8000cc0 <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b64      	cmp	r3, #100	; 0x64
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e1e7      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bea:	4b6c      	ldr	r3, [pc, #432]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f0      	bne.n	8001bd8 <HAL_RCC_OscConfig+0xe8>
 8001bf6:	e000      	b.n	8001bfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d063      	beq.n	8001cce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c06:	4b65      	ldr	r3, [pc, #404]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00b      	beq.n	8001c2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c12:	4b62      	ldr	r3, [pc, #392]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c1a:	2b08      	cmp	r3, #8
 8001c1c:	d11c      	bne.n	8001c58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c1e:	4b5f      	ldr	r3, [pc, #380]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d116      	bne.n	8001c58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2a:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d005      	beq.n	8001c42 <HAL_RCC_OscConfig+0x152>
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d001      	beq.n	8001c42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e1bb      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c42:	4b56      	ldr	r3, [pc, #344]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4952      	ldr	r1, [pc, #328]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c56:	e03a      	b.n	8001cce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d020      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c60:	4b4f      	ldr	r3, [pc, #316]	; (8001da0 <HAL_RCC_OscConfig+0x2b0>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c66:	f7ff f82b 	bl	8000cc0 <HAL_GetTick>
 8001c6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c6c:	e008      	b.n	8001c80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c6e:	f7ff f827 	bl	8000cc0 <HAL_GetTick>
 8001c72:	4602      	mov	r2, r0
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	1ad3      	subs	r3, r2, r3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d901      	bls.n	8001c80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e19c      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c80:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d0f0      	beq.n	8001c6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c8c:	4b43      	ldr	r3, [pc, #268]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	00db      	lsls	r3, r3, #3
 8001c9a:	4940      	ldr	r1, [pc, #256]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]
 8001ca0:	e015      	b.n	8001cce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ca2:	4b3f      	ldr	r3, [pc, #252]	; (8001da0 <HAL_RCC_OscConfig+0x2b0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff f80a 	bl	8000cc0 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f806 	bl	8000cc0 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e17b      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cc2:	4b36      	ldr	r3, [pc, #216]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1f0      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d030      	beq.n	8001d3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	695b      	ldr	r3, [r3, #20]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d016      	beq.n	8001d10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ce2:	4b30      	ldr	r3, [pc, #192]	; (8001da4 <HAL_RCC_OscConfig+0x2b4>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce8:	f7fe ffea 	bl	8000cc0 <HAL_GetTick>
 8001cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cee:	e008      	b.n	8001d02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf0:	f7fe ffe6 	bl	8000cc0 <HAL_GetTick>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	1ad3      	subs	r3, r2, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d901      	bls.n	8001d02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e15b      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d02:	4b26      	ldr	r3, [pc, #152]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f0      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x200>
 8001d0e:	e015      	b.n	8001d3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_RCC_OscConfig+0x2b4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d16:	f7fe ffd3 	bl	8000cc0 <HAL_GetTick>
 8001d1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d1c:	e008      	b.n	8001d30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d1e:	f7fe ffcf 	bl	8000cc0 <HAL_GetTick>
 8001d22:	4602      	mov	r2, r0
 8001d24:	693b      	ldr	r3, [r7, #16]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d901      	bls.n	8001d30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d2c:	2303      	movs	r3, #3
 8001d2e:	e144      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d30:	4b1a      	ldr	r3, [pc, #104]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d1f0      	bne.n	8001d1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	f000 80a0 	beq.w	8001e8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d4e:	4b13      	ldr	r3, [pc, #76]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d10f      	bne.n	8001d7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	4a0e      	ldr	r2, [pc, #56]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d68:	6413      	str	r3, [r2, #64]	; 0x40
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <HAL_RCC_OscConfig+0x2ac>)
 8001d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d76:	2301      	movs	r3, #1
 8001d78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7a:	4b0b      	ldr	r3, [pc, #44]	; (8001da8 <HAL_RCC_OscConfig+0x2b8>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d121      	bne.n	8001dca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d86:	4b08      	ldr	r3, [pc, #32]	; (8001da8 <HAL_RCC_OscConfig+0x2b8>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a07      	ldr	r2, [pc, #28]	; (8001da8 <HAL_RCC_OscConfig+0x2b8>)
 8001d8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d92:	f7fe ff95 	bl	8000cc0 <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d98:	e011      	b.n	8001dbe <HAL_RCC_OscConfig+0x2ce>
 8001d9a:	bf00      	nop
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	42470000 	.word	0x42470000
 8001da4:	42470e80 	.word	0x42470e80
 8001da8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dac:	f7fe ff88 	bl	8000cc0 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e0fd      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dbe:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <HAL_RCC_OscConfig+0x4d4>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d106      	bne.n	8001de0 <HAL_RCC_OscConfig+0x2f0>
 8001dd2:	4b7d      	ldr	r3, [pc, #500]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001dd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd6:	4a7c      	ldr	r2, [pc, #496]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001dd8:	f043 0301 	orr.w	r3, r3, #1
 8001ddc:	6713      	str	r3, [r2, #112]	; 0x70
 8001dde:	e01c      	b.n	8001e1a <HAL_RCC_OscConfig+0x32a>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	2b05      	cmp	r3, #5
 8001de6:	d10c      	bne.n	8001e02 <HAL_RCC_OscConfig+0x312>
 8001de8:	4b77      	ldr	r3, [pc, #476]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dec:	4a76      	ldr	r2, [pc, #472]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001dee:	f043 0304 	orr.w	r3, r3, #4
 8001df2:	6713      	str	r3, [r2, #112]	; 0x70
 8001df4:	4b74      	ldr	r3, [pc, #464]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001df6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df8:	4a73      	ldr	r2, [pc, #460]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6713      	str	r3, [r2, #112]	; 0x70
 8001e00:	e00b      	b.n	8001e1a <HAL_RCC_OscConfig+0x32a>
 8001e02:	4b71      	ldr	r3, [pc, #452]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e06:	4a70      	ldr	r2, [pc, #448]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e08:	f023 0301 	bic.w	r3, r3, #1
 8001e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e0e:	4b6e      	ldr	r3, [pc, #440]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e12:	4a6d      	ldr	r2, [pc, #436]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e14:	f023 0304 	bic.w	r3, r3, #4
 8001e18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d015      	beq.n	8001e4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7fe ff4d 	bl	8000cc0 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e28:	e00a      	b.n	8001e40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2a:	f7fe ff49 	bl	8000cc0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e0bc      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e40:	4b61      	ldr	r3, [pc, #388]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ee      	beq.n	8001e2a <HAL_RCC_OscConfig+0x33a>
 8001e4c:	e014      	b.n	8001e78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7fe ff37 	bl	8000cc0 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7fe ff33 	bl	8000cc0 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0a6      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e6c:	4b56      	ldr	r3, [pc, #344]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ee      	bne.n	8001e56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e78:	7dfb      	ldrb	r3, [r7, #23]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b52      	ldr	r3, [pc, #328]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e82:	4a51      	ldr	r2, [pc, #324]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	699b      	ldr	r3, [r3, #24]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8092 	beq.w	8001fb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e94:	4b4c      	ldr	r3, [pc, #304]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001e96:	689b      	ldr	r3, [r3, #8]
 8001e98:	f003 030c 	and.w	r3, r3, #12
 8001e9c:	2b08      	cmp	r3, #8
 8001e9e:	d05c      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d141      	bne.n	8001f2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea8:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <HAL_RCC_OscConfig+0x4dc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7fe ff07 	bl	8000cc0 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb6:	f7fe ff03 	bl	8000cc0 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e078      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ec8:	4b3f      	ldr	r3, [pc, #252]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	69da      	ldr	r2, [r3, #28]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a1b      	ldr	r3, [r3, #32]
 8001edc:	431a      	orrs	r2, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	019b      	lsls	r3, r3, #6
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	3b01      	subs	r3, #1
 8001eee:	041b      	lsls	r3, r3, #16
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef6:	061b      	lsls	r3, r3, #24
 8001ef8:	4933      	ldr	r1, [pc, #204]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001efa:	4313      	orrs	r3, r2
 8001efc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efe:	4b33      	ldr	r3, [pc, #204]	; (8001fcc <HAL_RCC_OscConfig+0x4dc>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe fedc 	bl	8000cc0 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7fe fed8 	bl	8000cc0 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e04d      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f1e:	4b2a      	ldr	r3, [pc, #168]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d0f0      	beq.n	8001f0c <HAL_RCC_OscConfig+0x41c>
 8001f2a:	e045      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2c:	4b27      	ldr	r3, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x4dc>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7fe fec5 	bl	8000cc0 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f3a:	f7fe fec1 	bl	8000cc0 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e036      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f4c:	4b1e      	ldr	r3, [pc, #120]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d1f0      	bne.n	8001f3a <HAL_RCC_OscConfig+0x44a>
 8001f58:	e02e      	b.n	8001fb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e029      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_RCC_OscConfig+0x4d8>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d11c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d115      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001f88:	68fa      	ldr	r2, [r7, #12]
 8001f8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f8e:	4013      	ands	r3, r2
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10d      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d106      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d001      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e000      	b.n	8001fba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	42470060 	.word	0x42470060

08001fd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d101      	bne.n	8001fe4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e0cc      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fe4:	4b68      	ldr	r3, [pc, #416]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	683a      	ldr	r2, [r7, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	d90c      	bls.n	800200c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ff2:	4b65      	ldr	r3, [pc, #404]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	b2d2      	uxtb	r2, r2
 8001ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ffa:	4b63      	ldr	r3, [pc, #396]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	429a      	cmp	r2, r3
 8002006:	d001      	beq.n	800200c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	e0b8      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0302 	and.w	r3, r3, #2
 8002014:	2b00      	cmp	r3, #0
 8002016:	d020      	beq.n	800205a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	2b00      	cmp	r3, #0
 8002022:	d005      	beq.n	8002030 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002024:	4b59      	ldr	r3, [pc, #356]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	4a58      	ldr	r2, [pc, #352]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800202a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800202e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0308 	and.w	r3, r3, #8
 8002038:	2b00      	cmp	r3, #0
 800203a:	d005      	beq.n	8002048 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800203c:	4b53      	ldr	r3, [pc, #332]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002042:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002046:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002048:	4b50      	ldr	r3, [pc, #320]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	494d      	ldr	r1, [pc, #308]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002056:	4313      	orrs	r3, r2
 8002058:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d044      	beq.n	80020f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d107      	bne.n	800207e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800206e:	4b47      	ldr	r3, [pc, #284]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d119      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e07f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	2b02      	cmp	r3, #2
 8002084:	d003      	beq.n	800208e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800208a:	2b03      	cmp	r3, #3
 800208c:	d107      	bne.n	800209e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208e:	4b3f      	ldr	r3, [pc, #252]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d109      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e06f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800209e:	4b3b      	ldr	r3, [pc, #236]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e067      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ae:	4b37      	ldr	r3, [pc, #220]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f023 0203 	bic.w	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	4934      	ldr	r1, [pc, #208]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020bc:	4313      	orrs	r3, r2
 80020be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c0:	f7fe fdfe 	bl	8000cc0 <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020c6:	e00a      	b.n	80020de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020c8:	f7fe fdfa 	bl	8000cc0 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d901      	bls.n	80020de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	e04f      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 020c 	and.w	r2, r3, #12
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d1eb      	bne.n	80020c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 030f 	and.w	r3, r3, #15
 80020f8:	683a      	ldr	r2, [r7, #0]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d20c      	bcs.n	8002118 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fe:	4b22      	ldr	r3, [pc, #136]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	b2d2      	uxtb	r2, r2
 8002104:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d001      	beq.n	8002118 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e032      	b.n	800217e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0304 	and.w	r3, r3, #4
 8002120:	2b00      	cmp	r3, #0
 8002122:	d008      	beq.n	8002136 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002124:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4916      	ldr	r1, [pc, #88]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002132:	4313      	orrs	r3, r2
 8002134:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d009      	beq.n	8002156 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002142:	4b12      	ldr	r3, [pc, #72]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	691b      	ldr	r3, [r3, #16]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	490e      	ldr	r1, [pc, #56]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	4313      	orrs	r3, r2
 8002154:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002156:	f000 f821 	bl	800219c <HAL_RCC_GetSysClockFreq>
 800215a:	4601      	mov	r1, r0
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	091b      	lsrs	r3, r3, #4
 8002162:	f003 030f 	and.w	r3, r3, #15
 8002166:	4a0a      	ldr	r2, [pc, #40]	; (8002190 <HAL_RCC_ClockConfig+0x1c0>)
 8002168:	5cd3      	ldrb	r3, [r2, r3]
 800216a:	fa21 f303 	lsr.w	r3, r1, r3
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_RCC_ClockConfig+0x1c4>)
 8002170:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002172:	4b09      	ldr	r3, [pc, #36]	; (8002198 <HAL_RCC_ClockConfig+0x1c8>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe fd5e 	bl	8000c38 <HAL_InitTick>

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40023c00 	.word	0x40023c00
 800218c:	40023800 	.word	0x40023800
 8002190:	080040d4 	.word	0x080040d4
 8002194:	20000000 	.word	0x20000000
 8002198:	20000004 	.word	0x20000004

0800219c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800219c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800219e:	b085      	sub	sp, #20
 80021a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80021a2:	2300      	movs	r3, #0
 80021a4:	607b      	str	r3, [r7, #4]
 80021a6:	2300      	movs	r3, #0
 80021a8:	60fb      	str	r3, [r7, #12]
 80021aa:	2300      	movs	r3, #0
 80021ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021b2:	4b50      	ldr	r3, [pc, #320]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	f003 030c 	and.w	r3, r3, #12
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	d007      	beq.n	80021ce <HAL_RCC_GetSysClockFreq+0x32>
 80021be:	2b08      	cmp	r3, #8
 80021c0:	d008      	beq.n	80021d4 <HAL_RCC_GetSysClockFreq+0x38>
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	f040 808d 	bne.w	80022e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021c8:	4b4b      	ldr	r3, [pc, #300]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021ca:	60bb      	str	r3, [r7, #8]
       break;
 80021cc:	e08c      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ce:	4b4b      	ldr	r3, [pc, #300]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 80021d0:	60bb      	str	r3, [r7, #8]
      break;
 80021d2:	e089      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021d4:	4b47      	ldr	r3, [pc, #284]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021de:	4b45      	ldr	r3, [pc, #276]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d023      	beq.n	8002232 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021ea:	4b42      	ldr	r3, [pc, #264]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	099b      	lsrs	r3, r3, #6
 80021f0:	f04f 0400 	mov.w	r4, #0
 80021f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021f8:	f04f 0200 	mov.w	r2, #0
 80021fc:	ea03 0501 	and.w	r5, r3, r1
 8002200:	ea04 0602 	and.w	r6, r4, r2
 8002204:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 8002206:	fb02 f106 	mul.w	r1, r2, r6
 800220a:	2200      	movs	r2, #0
 800220c:	fb02 f205 	mul.w	r2, r2, r5
 8002210:	440a      	add	r2, r1
 8002212:	493a      	ldr	r1, [pc, #232]	; (80022fc <HAL_RCC_GetSysClockFreq+0x160>)
 8002214:	fba5 0101 	umull	r0, r1, r5, r1
 8002218:	1853      	adds	r3, r2, r1
 800221a:	4619      	mov	r1, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f04f 0400 	mov.w	r4, #0
 8002222:	461a      	mov	r2, r3
 8002224:	4623      	mov	r3, r4
 8002226:	f7fd ffdf 	bl	80001e8 <__aeabi_uldivmod>
 800222a:	4603      	mov	r3, r0
 800222c:	460c      	mov	r4, r1
 800222e:	60fb      	str	r3, [r7, #12]
 8002230:	e049      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	099b      	lsrs	r3, r3, #6
 8002238:	f04f 0400 	mov.w	r4, #0
 800223c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	ea03 0501 	and.w	r5, r3, r1
 8002248:	ea04 0602 	and.w	r6, r4, r2
 800224c:	4629      	mov	r1, r5
 800224e:	4632      	mov	r2, r6
 8002250:	f04f 0300 	mov.w	r3, #0
 8002254:	f04f 0400 	mov.w	r4, #0
 8002258:	0154      	lsls	r4, r2, #5
 800225a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800225e:	014b      	lsls	r3, r1, #5
 8002260:	4619      	mov	r1, r3
 8002262:	4622      	mov	r2, r4
 8002264:	1b49      	subs	r1, r1, r5
 8002266:	eb62 0206 	sbc.w	r2, r2, r6
 800226a:	f04f 0300 	mov.w	r3, #0
 800226e:	f04f 0400 	mov.w	r4, #0
 8002272:	0194      	lsls	r4, r2, #6
 8002274:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002278:	018b      	lsls	r3, r1, #6
 800227a:	1a5b      	subs	r3, r3, r1
 800227c:	eb64 0402 	sbc.w	r4, r4, r2
 8002280:	f04f 0100 	mov.w	r1, #0
 8002284:	f04f 0200 	mov.w	r2, #0
 8002288:	00e2      	lsls	r2, r4, #3
 800228a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800228e:	00d9      	lsls	r1, r3, #3
 8002290:	460b      	mov	r3, r1
 8002292:	4614      	mov	r4, r2
 8002294:	195b      	adds	r3, r3, r5
 8002296:	eb44 0406 	adc.w	r4, r4, r6
 800229a:	f04f 0100 	mov.w	r1, #0
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	02a2      	lsls	r2, r4, #10
 80022a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022a8:	0299      	lsls	r1, r3, #10
 80022aa:	460b      	mov	r3, r1
 80022ac:	4614      	mov	r4, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	4621      	mov	r1, r4
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f04f 0400 	mov.w	r4, #0
 80022b8:	461a      	mov	r2, r3
 80022ba:	4623      	mov	r3, r4
 80022bc:	f7fd ff94 	bl	80001e8 <__aeabi_uldivmod>
 80022c0:	4603      	mov	r3, r0
 80022c2:	460c      	mov	r4, r1
 80022c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022c6:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	3301      	adds	r3, #1
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022d6:	68fa      	ldr	r2, [r7, #12]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	fbb2 f3f3 	udiv	r3, r2, r3
 80022de:	60bb      	str	r3, [r7, #8]
      break;
 80022e0:	e002      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022e2:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80022e4:	60bb      	str	r3, [r7, #8]
      break;
 80022e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022e8:	68bb      	ldr	r3, [r7, #8]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3714      	adds	r7, #20
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023800 	.word	0x40023800
 80022f8:	00f42400 	.word	0x00f42400
 80022fc:	017d7840 	.word	0x017d7840

08002300 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002300:	b480      	push	{r7}
 8002302:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002304:	4b03      	ldr	r3, [pc, #12]	; (8002314 <HAL_RCC_GetHCLKFreq+0x14>)
 8002306:	681b      	ldr	r3, [r3, #0]
}
 8002308:	4618      	mov	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	20000000 	.word	0x20000000

08002318 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800231c:	f7ff fff0 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002320:	4601      	mov	r1, r0
 8002322:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	0a9b      	lsrs	r3, r3, #10
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4a03      	ldr	r2, [pc, #12]	; (800233c <HAL_RCC_GetPCLK1Freq+0x24>)
 800232e:	5cd3      	ldrb	r3, [r2, r3]
 8002330:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002334:	4618      	mov	r0, r3
 8002336:	bd80      	pop	{r7, pc}
 8002338:	40023800 	.word	0x40023800
 800233c:	080040e4 	.word	0x080040e4

08002340 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002344:	f7ff ffdc 	bl	8002300 <HAL_RCC_GetHCLKFreq>
 8002348:	4601      	mov	r1, r0
 800234a:	4b05      	ldr	r3, [pc, #20]	; (8002360 <HAL_RCC_GetPCLK2Freq+0x20>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	0b5b      	lsrs	r3, r3, #13
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	4a03      	ldr	r2, [pc, #12]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	fa21 f303 	lsr.w	r3, r1, r3
}
 800235c:	4618      	mov	r0, r3
 800235e:	bd80      	pop	{r7, pc}
 8002360:	40023800 	.word	0x40023800
 8002364:	080040e4 	.word	0x080040e4

08002368 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e03f      	b.n	80023fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fae6 	bl	8000960 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	; 0x24
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68da      	ldr	r2, [r3, #12]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 ffff 	bl	80033b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	695a      	ldr	r2, [r3, #20]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	68da      	ldr	r2, [r3, #12]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2220      	movs	r2, #32
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b08a      	sub	sp, #40	; 0x28
 8002406:	af02      	add	r7, sp, #8
 8002408:	60f8      	str	r0, [r7, #12]
 800240a:	60b9      	str	r1, [r7, #8]
 800240c:	603b      	str	r3, [r7, #0]
 800240e:	4613      	mov	r3, r2
 8002410:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002412:	2300      	movs	r3, #0
 8002414:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b20      	cmp	r3, #32
 8002420:	d17c      	bne.n	800251c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_UART_Transmit+0x2c>
 8002428:	88fb      	ldrh	r3, [r7, #6]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e075      	b.n	800251e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_UART_Transmit+0x3e>
 800243c:	2302      	movs	r3, #2
 800243e:	e06e      	b.n	800251e <HAL_UART_Transmit+0x11c>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2221      	movs	r2, #33	; 0x21
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002456:	f7fe fc33 	bl	8000cc0 <HAL_GetTick>
 800245a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	88fa      	ldrh	r2, [r7, #6]
 8002460:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	88fa      	ldrh	r2, [r7, #6]
 8002466:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002470:	d108      	bne.n	8002484 <HAL_UART_Transmit+0x82>
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d104      	bne.n	8002484 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800247e:	68bb      	ldr	r3, [r7, #8]
 8002480:	61bb      	str	r3, [r7, #24]
 8002482:	e003      	b.n	800248c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002494:	e02a      	b.n	80024ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	9300      	str	r3, [sp, #0]
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	2200      	movs	r2, #0
 800249e:	2180      	movs	r1, #128	; 0x80
 80024a0:	68f8      	ldr	r0, [r7, #12]
 80024a2:	f000 fc79 	bl	8002d98 <UART_WaitOnFlagUntilTimeout>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d001      	beq.n	80024b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e036      	b.n	800251e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d10b      	bne.n	80024ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	881b      	ldrh	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	3302      	adds	r3, #2
 80024ca:	61bb      	str	r3, [r7, #24]
 80024cc:	e007      	b.n	80024de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	781a      	ldrb	r2, [r3, #0]
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	3301      	adds	r3, #1
 80024dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1cf      	bne.n	8002496 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2140      	movs	r1, #64	; 0x40
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fc49 	bl	8002d98 <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e006      	b.n	800251e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	e000      	b.n	800251e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800251c:	2302      	movs	r3, #2
  }
}
 800251e:	4618      	mov	r0, r3
 8002520:	3720      	adds	r7, #32
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}

08002526 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	60b9      	str	r1, [r7, #8]
 8002530:	4613      	mov	r3, r2
 8002532:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b20      	cmp	r3, #32
 800253e:	d11d      	bne.n	800257c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d002      	beq.n	800254c <HAL_UART_Receive_IT+0x26>
 8002546:	88fb      	ldrh	r3, [r7, #6]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d101      	bne.n	8002550 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e016      	b.n	800257e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_UART_Receive_IT+0x38>
 800255a:	2302      	movs	r3, #2
 800255c:	e00f      	b.n	800257e <HAL_UART_Receive_IT+0x58>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800256c:	88fb      	ldrh	r3, [r7, #6]
 800256e:	461a      	mov	r2, r3
 8002570:	68b9      	ldr	r1, [r7, #8]
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f000 fc7e 	bl	8002e74 <UART_Start_Receive_IT>
 8002578:	4603      	mov	r3, r0
 800257a:	e000      	b.n	800257e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800257c:	2302      	movs	r3, #2
  }
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b08c      	sub	sp, #48	; 0x30
 800258a:	af00      	add	r7, sp, #0
 800258c:	60f8      	str	r0, [r7, #12]
 800258e:	60b9      	str	r1, [r7, #8]
 8002590:	4613      	mov	r3, r2
 8002592:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800259a:	b2db      	uxtb	r3, r3
 800259c:	2b20      	cmp	r3, #32
 800259e:	d152      	bne.n	8002646 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d002      	beq.n	80025ac <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80025a6:	88fb      	ldrh	r3, [r7, #6]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e04b      	b.n	8002648 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025b6:	2b01      	cmp	r3, #1
 80025b8:	d101      	bne.n	80025be <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80025ba:	2302      	movs	r3, #2
 80025bc:	e044      	b.n	8002648 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80025cc:	88fb      	ldrh	r3, [r7, #6]
 80025ce:	461a      	mov	r2, r3
 80025d0:	68b9      	ldr	r1, [r7, #8]
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fc8c 	bl	8002ef0 <UART_Start_Receive_DMA>
 80025d8:	4603      	mov	r3, r0
 80025da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80025de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d12c      	bne.n	8002640 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d125      	bne.n	800263a <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ee:	2300      	movs	r3, #0
 80025f0:	613b      	str	r3, [r7, #16]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	613b      	str	r3, [r7, #16]
 8002602:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	330c      	adds	r3, #12
 800260a:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	e853 3f00 	ldrex	r3, [r3]
 8002612:	617b      	str	r3, [r7, #20]
   return(result);
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	f043 0310 	orr.w	r3, r3, #16
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	330c      	adds	r3, #12
 8002622:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002624:	627a      	str	r2, [r7, #36]	; 0x24
 8002626:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002628:	6a39      	ldr	r1, [r7, #32]
 800262a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262c:	e841 2300 	strex	r3, r2, [r1]
 8002630:	61fb      	str	r3, [r7, #28]
   return(result);
 8002632:	69fb      	ldr	r3, [r7, #28]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1e5      	bne.n	8002604 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002638:	e002      	b.n	8002640 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002644:	e000      	b.n	8002648 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002646:	2302      	movs	r3, #2
  }
}
 8002648:	4618      	mov	r0, r3
 800264a:	3730      	adds	r7, #48	; 0x30
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0ba      	sub	sp, #232	; 0xe8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002676:	2300      	movs	r3, #0
 8002678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800267c:	2300      	movs	r3, #0
 800267e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800268e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002696:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_UART_IRQHandler+0x66>
 80026a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a6:	f003 0320 	and.w	r3, r3, #32
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d003      	beq.n	80026b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 fdc3 	bl	800323a <UART_Receive_IT>
      return;
 80026b4:	e257      	b.n	8002b66 <HAL_UART_IRQHandler+0x516>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80026b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	f000 80de 	beq.w	800287c <HAL_UART_IRQHandler+0x22c>
 80026c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80026c4:	f003 0301 	and.w	r3, r3, #1
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d106      	bne.n	80026da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80026cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026d0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 80d1 	beq.w	800287c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80026da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00b      	beq.n	80026fe <HAL_UART_IRQHandler+0xae>
 80026e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d005      	beq.n	80026fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80026fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002702:	f003 0304 	and.w	r3, r3, #4
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_UART_IRQHandler+0xd2>
 800270a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	2b00      	cmp	r3, #0
 8002714:	d005      	beq.n	8002722 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f043 0202 	orr.w	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_UART_IRQHandler+0xf6>
 800272e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	f043 0204 	orr.w	r2, r3, #4
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002746:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d011      	beq.n	8002776 <HAL_UART_IRQHandler+0x126>
 8002752:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b00      	cmp	r3, #0
 800275c:	d105      	bne.n	800276a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800275e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	f043 0208 	orr.w	r2, r3, #8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	2b00      	cmp	r3, #0
 800277c:	f000 81ee 	beq.w	8002b5c <HAL_UART_IRQHandler+0x50c>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002780:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_UART_IRQHandler+0x14e>
 800278c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b00      	cmp	r3, #0
 8002796:	d002      	beq.n	800279e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 fd4e 	bl	800323a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	695b      	ldr	r3, [r3, #20]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	bf0c      	ite	eq
 80027ac:	2301      	moveq	r3, #1
 80027ae:	2300      	movne	r3, #0
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d103      	bne.n	80027ca <HAL_UART_IRQHandler+0x17a>
 80027c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d04f      	beq.n	800286a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fc56 	bl	800307c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027da:	2b40      	cmp	r3, #64	; 0x40
 80027dc:	d141      	bne.n	8002862 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	3314      	adds	r3, #20
 80027e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80027ec:	e853 3f00 	ldrex	r3, [r3]
 80027f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80027f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80027f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	3314      	adds	r3, #20
 8002806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800280a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800280e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800281a:	e841 2300 	strex	r3, r2, [r1]
 800281e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d1d9      	bne.n	80027de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282e:	2b00      	cmp	r3, #0
 8002830:	d013      	beq.n	800285a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002836:	4a7d      	ldr	r2, [pc, #500]	; (8002a2c <HAL_UART_IRQHandler+0x3dc>)
 8002838:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283e:	4618      	mov	r0, r3
 8002840:	f7fe fcf4 	bl	800122c <HAL_DMA_Abort_IT>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d016      	beq.n	8002878 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800284e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002854:	4610      	mov	r0, r2
 8002856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002858:	e00e      	b.n	8002878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f99a 	bl	8002b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002860:	e00a      	b.n	8002878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f996 	bl	8002b94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002868:	e006      	b.n	8002878 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f992 	bl	8002b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002876:	e171      	b.n	8002b5c <HAL_UART_IRQHandler+0x50c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002878:	bf00      	nop
    return;
 800287a:	e16f      	b.n	8002b5c <HAL_UART_IRQHandler+0x50c>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 814a 	bne.w	8002b1a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800288a:	f003 0310 	and.w	r3, r3, #16
 800288e:	2b00      	cmp	r3, #0
 8002890:	f000 8143 	beq.w	8002b1a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002898:	f003 0310 	and.w	r3, r3, #16
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 813c 	beq.w	8002b1a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80028a2:	2300      	movs	r3, #0
 80028a4:	60bb      	str	r3, [r7, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	60bb      	str	r3, [r7, #8]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	f040 80b4 	bne.w	8002a30 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80028d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80028d8:	2b00      	cmp	r3, #0
 80028da:	f000 8141 	beq.w	8002b60 <HAL_UART_IRQHandler+0x510>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028e6:	429a      	cmp	r2, r3
 80028e8:	f080 813a 	bcs.w	8002b60 <HAL_UART_IRQHandler+0x510>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80028f2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f8:	69db      	ldr	r3, [r3, #28]
 80028fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028fe:	f000 8088 	beq.w	8002a12 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	330c      	adds	r3, #12
 8002908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002910:	e853 3f00 	ldrex	r3, [r3]
 8002914:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002918:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800291c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002920:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	330c      	adds	r3, #12
 800292a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800292e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002932:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002936:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800293a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800293e:	e841 2300 	strex	r3, r2, [r1]
 8002942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002946:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1d9      	bne.n	8002902 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	3314      	adds	r3, #20
 8002954:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002956:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002958:	e853 3f00 	ldrex	r3, [r3]
 800295c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800295e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002960:	f023 0301 	bic.w	r3, r3, #1
 8002964:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3314      	adds	r3, #20
 800296e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002972:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002976:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002978:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800297a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800297e:	e841 2300 	strex	r3, r2, [r1]
 8002982:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002986:	2b00      	cmp	r3, #0
 8002988:	d1e1      	bne.n	800294e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	3314      	adds	r3, #20
 8002990:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002994:	e853 3f00 	ldrex	r3, [r3]
 8002998:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800299a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800299c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	3314      	adds	r3, #20
 80029aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029ae:	66fa      	str	r2, [r7, #108]	; 0x6c
 80029b0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80029b4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80029b6:	e841 2300 	strex	r3, r2, [r1]
 80029ba:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80029bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1e3      	bne.n	800298a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	330c      	adds	r3, #12
 80029d6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029da:	e853 3f00 	ldrex	r3, [r3]
 80029de:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80029e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e2:	f023 0310 	bic.w	r3, r3, #16
 80029e6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	330c      	adds	r3, #12
 80029f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80029f4:	65ba      	str	r2, [r7, #88]	; 0x58
 80029f6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80029fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029fc:	e841 2300 	strex	r3, r2, [r1]
 8002a00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002a02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e3      	bne.n	80029d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fe fb9d 	bl	800114c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a1a:	b29b      	uxth	r3, r3
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	b29b      	uxth	r3, r3
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7fd ff48 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a28:	e09a      	b.n	8002b60 <HAL_UART_IRQHandler+0x510>
 8002a2a:	bf00      	nop
 8002a2c:	08003143 	.word	0x08003143
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 808c 	beq.w	8002b64 <HAL_UART_IRQHandler+0x514>
          && (nb_rx_data > 0U))
 8002a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f000 8087 	beq.w	8002b64 <HAL_UART_IRQHandler+0x514>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	330c      	adds	r3, #12
 8002a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a60:	e853 3f00 	ldrex	r3, [r3]
 8002a64:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002a6c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	330c      	adds	r3, #12
 8002a76:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002a7a:	647a      	str	r2, [r7, #68]	; 0x44
 8002a7c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a7e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002a80:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a82:	e841 2300 	strex	r3, r2, [r1]
 8002a86:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1e3      	bne.n	8002a56 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	3314      	adds	r3, #20
 8002a94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	e853 3f00 	ldrex	r3, [r3]
 8002a9c:	623b      	str	r3, [r7, #32]
   return(result);
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	f023 0301 	bic.w	r3, r3, #1
 8002aa4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	3314      	adds	r3, #20
 8002aae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ab2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ab6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aba:	e841 2300 	strex	r3, r2, [r1]
 8002abe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e3      	bne.n	8002a8e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2220      	movs	r2, #32
 8002aca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	330c      	adds	r3, #12
 8002ada:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	e853 3f00 	ldrex	r3, [r3]
 8002ae2:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f023 0310 	bic.w	r3, r3, #16
 8002aea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	330c      	adds	r3, #12
 8002af4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002af8:	61fa      	str	r2, [r7, #28]
 8002afa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002afc:	69b9      	ldr	r1, [r7, #24]
 8002afe:	69fa      	ldr	r2, [r7, #28]
 8002b00:	e841 2300 	strex	r3, r2, [r1]
 8002b04:	617b      	str	r3, [r7, #20]
   return(result);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e3      	bne.n	8002ad4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002b10:	4619      	mov	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd fed0 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b18:	e024      	b.n	8002b64 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_UART_IRQHandler+0x4ea>
 8002b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fb19 	bl	800316a <UART_Transmit_IT>
    return;
 8002b38:	e015      	b.n	8002b66 <HAL_UART_IRQHandler+0x516>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00f      	beq.n	8002b66 <HAL_UART_IRQHandler+0x516>
 8002b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d009      	beq.n	8002b66 <HAL_UART_IRQHandler+0x516>
  {
    UART_EndTransmit_IT(huart);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 fb59 	bl	800320a <UART_EndTransmit_IT>
    return;
 8002b58:	bf00      	nop
 8002b5a:	e004      	b.n	8002b66 <HAL_UART_IRQHandler+0x516>
    return;
 8002b5c:	bf00      	nop
 8002b5e:	e002      	b.n	8002b66 <HAL_UART_IRQHandler+0x516>
      return;
 8002b60:	bf00      	nop
 8002b62:	e000      	b.n	8002b66 <HAL_UART_IRQHandler+0x516>
      return;
 8002b64:	bf00      	nop
  }
}
 8002b66:	37e8      	adds	r7, #232	; 0xe8
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}

08002b6c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b09c      	sub	sp, #112	; 0x70
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bb4:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d172      	bne.n	8002caa <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8002bc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002bca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002bda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002be0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002bea:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bec:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002bf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e5      	bne.n	8002bca <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	3314      	adds	r3, #20
 8002c04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c10:	f023 0301 	bic.w	r3, r3, #1
 8002c14:	667b      	str	r3, [r7, #100]	; 0x64
 8002c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	3314      	adds	r3, #20
 8002c1c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002c1e:	647a      	str	r2, [r7, #68]	; 0x44
 8002c20:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002c24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e5      	bne.n	8002bfe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3314      	adds	r3, #20
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	623b      	str	r3, [r7, #32]
   return(result);
 8002c42:	6a3b      	ldr	r3, [r7, #32]
 8002c44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c48:	663b      	str	r3, [r7, #96]	; 0x60
 8002c4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002c52:	633a      	str	r2, [r7, #48]	; 0x30
 8002c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e5      	bne.n	8002c32 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002c66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d119      	bne.n	8002caa <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	330c      	adds	r3, #12
 8002c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	e853 3f00 	ldrex	r3, [r3]
 8002c84:	60fb      	str	r3, [r7, #12]
   return(result);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f023 0310 	bic.w	r3, r3, #16
 8002c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	330c      	adds	r3, #12
 8002c94:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002c96:	61fa      	str	r2, [r7, #28]
 8002c98:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c9a:	69b9      	ldr	r1, [r7, #24]
 8002c9c:	69fa      	ldr	r2, [r7, #28]
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	617b      	str	r3, [r7, #20]
   return(result);
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e5      	bne.n	8002c76 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d106      	bne.n	8002cc0 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002cb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002cb6:	4619      	mov	r1, r3
 8002cb8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002cba:	f7fd fdfd 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002cbe:	e002      	b.n	8002cc6 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8002cc0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8002cc2:	f7fd fde7 	bl	8000894 <HAL_UART_RxCpltCallback>
}
 8002cc6:	bf00      	nop
 8002cc8:	3770      	adds	r7, #112	; 0x70
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b084      	sub	sp, #16
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cda:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d108      	bne.n	8002cf6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4619      	mov	r1, r3
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f7fd fde2 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002cf4:	e002      	b.n	8002cfc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff ff42 	bl	8002b80 <HAL_UART_RxHalfCpltCallback>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	695b      	ldr	r3, [r3, #20]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	bf0c      	ite	eq
 8002d24:	2301      	moveq	r3, #1
 8002d26:	2300      	movne	r3, #0
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b21      	cmp	r3, #33	; 0x21
 8002d36:	d108      	bne.n	8002d4a <UART_DMAError+0x46>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d005      	beq.n	8002d4a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	2200      	movs	r2, #0
 8002d42:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002d44:	68b8      	ldr	r0, [r7, #8]
 8002d46:	f000 f971 	bl	800302c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d54:	2b40      	cmp	r3, #64	; 0x40
 8002d56:	bf0c      	ite	eq
 8002d58:	2301      	moveq	r3, #1
 8002d5a:	2300      	movne	r3, #0
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b22      	cmp	r3, #34	; 0x22
 8002d6a:	d108      	bne.n	8002d7e <UART_DMAError+0x7a>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d005      	beq.n	8002d7e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	2200      	movs	r2, #0
 8002d76:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002d78:	68b8      	ldr	r0, [r7, #8]
 8002d7a:	f000 f97f 	bl	800307c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d82:	f043 0210 	orr.w	r2, r3, #16
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d8a:	68b8      	ldr	r0, [r7, #8]
 8002d8c:	f7ff ff02 	bl	8002b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b090      	sub	sp, #64	; 0x40
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	60f8      	str	r0, [r7, #12]
 8002da0:	60b9      	str	r1, [r7, #8]
 8002da2:	603b      	str	r3, [r7, #0]
 8002da4:	4613      	mov	r3, r2
 8002da6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002da8:	e050      	b.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db0:	d04c      	beq.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002db2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d007      	beq.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x30>
 8002db8:	f7fd ff82 	bl	8000cc0 <HAL_GetTick>
 8002dbc:	4602      	mov	r2, r0
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d241      	bcs.n	8002e4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	330c      	adds	r3, #12
 8002dce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dda:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	330c      	adds	r3, #12
 8002de6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002de8:	637a      	str	r2, [r7, #52]	; 0x34
 8002dea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	3314      	adds	r3, #20
 8002e02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	e853 3f00 	ldrex	r3, [r3]
 8002e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f023 0301 	bic.w	r3, r3, #1
 8002e12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	3314      	adds	r3, #20
 8002e1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e1c:	623a      	str	r2, [r7, #32]
 8002e1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e20:	69f9      	ldr	r1, [r7, #28]
 8002e22:	6a3a      	ldr	r2, [r7, #32]
 8002e24:	e841 2300 	strex	r3, r2, [r1]
 8002e28:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1e5      	bne.n	8002dfc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2200      	movs	r2, #0
 8002e44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e00f      	b.n	8002e6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	4013      	ands	r3, r2
 8002e56:	68ba      	ldr	r2, [r7, #8]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	bf0c      	ite	eq
 8002e5c:	2301      	moveq	r3, #1
 8002e5e:	2300      	movne	r3, #0
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	461a      	mov	r2, r3
 8002e64:	79fb      	ldrb	r3, [r7, #7]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d09f      	beq.n	8002daa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e6a:	2300      	movs	r3, #0
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3740      	adds	r7, #64	; 0x40
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b085      	sub	sp, #20
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	88fa      	ldrh	r2, [r7, #6]
 8002e8c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	88fa      	ldrh	r2, [r7, #6]
 8002e92:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2222      	movs	r2, #34	; 0x22
 8002e9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	691b      	ldr	r3, [r3, #16]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d007      	beq.n	8002ec2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	68da      	ldr	r2, [r3, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ec0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f042 0201 	orr.w	r2, r2, #1
 8002ed0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0220 	orr.w	r2, r2, #32
 8002ee0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eee:	4770      	bx	lr

08002ef0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b098      	sub	sp, #96	; 0x60
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	4613      	mov	r3, r2
 8002efc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002efe:	68ba      	ldr	r2, [r7, #8]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	88fa      	ldrh	r2, [r7, #6]
 8002f08:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2222      	movs	r2, #34	; 0x22
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1c:	4a40      	ldr	r2, [pc, #256]	; (8003020 <UART_Start_Receive_DMA+0x130>)
 8002f1e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f24:	4a3f      	ldr	r2, [pc, #252]	; (8003024 <UART_Start_Receive_DMA+0x134>)
 8002f26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	4a3e      	ldr	r2, [pc, #248]	; (8003028 <UART_Start_Receive_DMA+0x138>)
 8002f2e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f34:	2200      	movs	r2, #0
 8002f36:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002f38:	f107 0308 	add.w	r3, r7, #8
 8002f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	3304      	adds	r3, #4
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	88fb      	ldrh	r3, [r7, #6]
 8002f50:	f7fe f8a4 	bl	800109c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	613b      	str	r3, [r7, #16]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	613b      	str	r3, [r7, #16]
 8002f68:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d019      	beq.n	8002fae <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	330c      	adds	r3, #12
 8002f80:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f84:	e853 3f00 	ldrex	r3, [r3]
 8002f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f90:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f9a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f9e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8002fa0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002fa2:	e841 2300 	strex	r3, r2, [r1]
 8002fa6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8002fa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1e5      	bne.n	8002f7a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3314      	adds	r3, #20
 8002fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fc0:	f043 0301 	orr.w	r3, r3, #1
 8002fc4:	657b      	str	r3, [r7, #84]	; 0x54
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	3314      	adds	r3, #20
 8002fcc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002fce:	63ba      	str	r2, [r7, #56]	; 0x38
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002fd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fd6:	e841 2300 	strex	r3, r2, [r1]
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d1e5      	bne.n	8002fae <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3314      	adds	r3, #20
 8002fe8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	e853 3f00 	ldrex	r3, [r3]
 8002ff0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff8:	653b      	str	r3, [r7, #80]	; 0x50
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	3314      	adds	r3, #20
 8003000:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003002:	627a      	str	r2, [r7, #36]	; 0x24
 8003004:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003006:	6a39      	ldr	r1, [r7, #32]
 8003008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800300a:	e841 2300 	strex	r3, r2, [r1]
 800300e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1e5      	bne.n	8002fe2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3760      	adds	r7, #96	; 0x60
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	08002ba9 	.word	0x08002ba9
 8003024:	08002ccf 	.word	0x08002ccf
 8003028:	08002d05 	.word	0x08002d05

0800302c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b089      	sub	sp, #36	; 0x24
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	330c      	adds	r3, #12
 800303a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	e853 3f00 	ldrex	r3, [r3]
 8003042:	60bb      	str	r3, [r7, #8]
   return(result);
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800304a:	61fb      	str	r3, [r7, #28]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	330c      	adds	r3, #12
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	61ba      	str	r2, [r7, #24]
 8003056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003058:	6979      	ldr	r1, [r7, #20]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	613b      	str	r3, [r7, #16]
   return(result);
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1e5      	bne.n	8003034 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2220      	movs	r2, #32
 800306c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003070:	bf00      	nop
 8003072:	3724      	adds	r7, #36	; 0x24
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr

0800307c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b095      	sub	sp, #84	; 0x54
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	330c      	adds	r3, #12
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800308c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800308e:	e853 3f00 	ldrex	r3, [r3]
 8003092:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800309a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	330c      	adds	r3, #12
 80030a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80030a4:	643a      	str	r2, [r7, #64]	; 0x40
 80030a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80030ac:	e841 2300 	strex	r3, r2, [r1]
 80030b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80030b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d1e5      	bne.n	8003084 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	3314      	adds	r3, #20
 80030be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030c0:	6a3b      	ldr	r3, [r7, #32]
 80030c2:	e853 3f00 	ldrex	r3, [r3]
 80030c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	f023 0301 	bic.w	r3, r3, #1
 80030ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	3314      	adds	r3, #20
 80030d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030e0:	e841 2300 	strex	r3, r2, [r1]
 80030e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d1e5      	bne.n	80030b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d119      	bne.n	8003128 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	e853 3f00 	ldrex	r3, [r3]
 8003102:	60bb      	str	r3, [r7, #8]
   return(result);
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f023 0310 	bic.w	r3, r3, #16
 800310a:	647b      	str	r3, [r7, #68]	; 0x44
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	330c      	adds	r3, #12
 8003112:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003114:	61ba      	str	r2, [r7, #24]
 8003116:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003118:	6979      	ldr	r1, [r7, #20]
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	e841 2300 	strex	r3, r2, [r1]
 8003120:	613b      	str	r3, [r7, #16]
   return(result);
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e5      	bne.n	80030f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2220      	movs	r2, #32
 800312c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003136:	bf00      	nop
 8003138:	3754      	adds	r7, #84	; 0x54
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr

08003142 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b084      	sub	sp, #16
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2200      	movs	r2, #0
 800315a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f7ff fd19 	bl	8002b94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800316a:	b480      	push	{r7}
 800316c:	b085      	sub	sp, #20
 800316e:	af00      	add	r7, sp, #0
 8003170:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b21      	cmp	r3, #33	; 0x21
 800317c:	d13e      	bne.n	80031fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003186:	d114      	bne.n	80031b2 <UART_Transmit_IT+0x48>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d110      	bne.n	80031b2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6a1b      	ldr	r3, [r3, #32]
 8003194:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	461a      	mov	r2, r3
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	1c9a      	adds	r2, r3, #2
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	621a      	str	r2, [r3, #32]
 80031b0:	e008      	b.n	80031c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	1c59      	adds	r1, r3, #1
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6211      	str	r1, [r2, #32]
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10f      	bne.n	80031f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031f8:	2300      	movs	r3, #0
 80031fa:	e000      	b.n	80031fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031fc:	2302      	movs	r3, #2
  }
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr

0800320a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b082      	sub	sp, #8
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003220:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2220      	movs	r2, #32
 8003226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7ff fc9e 	bl	8002b6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800323a:	b580      	push	{r7, lr}
 800323c:	b08c      	sub	sp, #48	; 0x30
 800323e:	af00      	add	r7, sp, #0
 8003240:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b22      	cmp	r3, #34	; 0x22
 800324c:	f040 80ab 	bne.w	80033a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003258:	d117      	bne.n	800328a <UART_Receive_IT+0x50>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	691b      	ldr	r3, [r3, #16]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d113      	bne.n	800328a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003262:	2300      	movs	r3, #0
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003278:	b29a      	uxth	r2, r3
 800327a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800327c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	1c9a      	adds	r2, r3, #2
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	629a      	str	r2, [r3, #40]	; 0x28
 8003288:	e026      	b.n	80032d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800328e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003290:	2300      	movs	r3, #0
 8003292:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800329c:	d007      	beq.n	80032ae <UART_Receive_IT+0x74>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10a      	bne.n	80032bc <UART_Receive_IT+0x82>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	691b      	ldr	r3, [r3, #16]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	b2da      	uxtb	r2, r3
 80032b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b8:	701a      	strb	r2, [r3, #0]
 80032ba:	e008      	b.n	80032ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032c8:	b2da      	uxtb	r2, r3
 80032ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032dc:	b29b      	uxth	r3, r3
 80032de:	3b01      	subs	r3, #1
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	4619      	mov	r1, r3
 80032e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d15a      	bne.n	80033a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0220 	bic.w	r2, r2, #32
 80032fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800330a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	695a      	ldr	r2, [r3, #20]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f022 0201 	bic.w	r2, r2, #1
 800331a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003328:	2b01      	cmp	r3, #1
 800332a:	d135      	bne.n	8003398 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	330c      	adds	r3, #12
 8003338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	e853 3f00 	ldrex	r3, [r3]
 8003340:	613b      	str	r3, [r7, #16]
   return(result);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 0310 	bic.w	r3, r3, #16
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	330c      	adds	r3, #12
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	623a      	str	r2, [r7, #32]
 8003354:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003356:	69f9      	ldr	r1, [r7, #28]
 8003358:	6a3a      	ldr	r2, [r7, #32]
 800335a:	e841 2300 	strex	r3, r2, [r1]
 800335e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1e5      	bne.n	8003332 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0310 	and.w	r3, r3, #16
 8003370:	2b10      	cmp	r3, #16
 8003372:	d10a      	bne.n	800338a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003374:	2300      	movs	r3, #0
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	60fb      	str	r3, [r7, #12]
 8003388:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800338e:	4619      	mov	r1, r3
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f7fd fa91 	bl	80008b8 <HAL_UARTEx_RxEventCallback>
 8003396:	e002      	b.n	800339e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003398:	6878      	ldr	r0, [r7, #4]
 800339a:	f7fd fa7b 	bl	8000894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800339e:	2300      	movs	r3, #0
 80033a0:	e002      	b.n	80033a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80033a6:	2302      	movs	r3, #2
  }
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3730      	adds	r7, #48	; 0x30
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	430a      	orrs	r2, r1
 80033ce:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	691b      	ldr	r3, [r3, #16]
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033f2:	f023 030c 	bic.w	r3, r3, #12
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6812      	ldr	r2, [r2, #0]
 80033fa:	68b9      	ldr	r1, [r7, #8]
 80033fc:	430b      	orrs	r3, r1
 80033fe:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	699a      	ldr	r2, [r3, #24]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4ad0      	ldr	r2, [pc, #832]	; (800375c <UART_SetConfig+0x3ac>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d004      	beq.n	800342a <UART_SetConfig+0x7a>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4ace      	ldr	r2, [pc, #824]	; (8003760 <UART_SetConfig+0x3b0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d103      	bne.n	8003432 <UART_SetConfig+0x82>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800342a:	f7fe ff89 	bl	8002340 <HAL_RCC_GetPCLK2Freq>
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	e002      	b.n	8003438 <UART_SetConfig+0x88>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003432:	f7fe ff71 	bl	8002318 <HAL_RCC_GetPCLK1Freq>
 8003436:	60f8      	str	r0, [r7, #12]
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003440:	f040 80ba 	bne.w	80035b8 <UART_SetConfig+0x208>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	461d      	mov	r5, r3
 8003448:	f04f 0600 	mov.w	r6, #0
 800344c:	46a8      	mov	r8, r5
 800344e:	46b1      	mov	r9, r6
 8003450:	eb18 0308 	adds.w	r3, r8, r8
 8003454:	eb49 0409 	adc.w	r4, r9, r9
 8003458:	4698      	mov	r8, r3
 800345a:	46a1      	mov	r9, r4
 800345c:	eb18 0805 	adds.w	r8, r8, r5
 8003460:	eb49 0906 	adc.w	r9, r9, r6
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003470:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003474:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003478:	4688      	mov	r8, r1
 800347a:	4691      	mov	r9, r2
 800347c:	eb18 0005 	adds.w	r0, r8, r5
 8003480:	eb49 0106 	adc.w	r1, r9, r6
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	461d      	mov	r5, r3
 800348a:	f04f 0600 	mov.w	r6, #0
 800348e:	196b      	adds	r3, r5, r5
 8003490:	eb46 0406 	adc.w	r4, r6, r6
 8003494:	461a      	mov	r2, r3
 8003496:	4623      	mov	r3, r4
 8003498:	f7fc fea6 	bl	80001e8 <__aeabi_uldivmod>
 800349c:	4603      	mov	r3, r0
 800349e:	460c      	mov	r4, r1
 80034a0:	461a      	mov	r2, r3
 80034a2:	4bb0      	ldr	r3, [pc, #704]	; (8003764 <UART_SetConfig+0x3b4>)
 80034a4:	fba3 2302 	umull	r2, r3, r3, r2
 80034a8:	095b      	lsrs	r3, r3, #5
 80034aa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	461d      	mov	r5, r3
 80034b2:	f04f 0600 	mov.w	r6, #0
 80034b6:	46a9      	mov	r9, r5
 80034b8:	46b2      	mov	sl, r6
 80034ba:	eb19 0309 	adds.w	r3, r9, r9
 80034be:	eb4a 040a 	adc.w	r4, sl, sl
 80034c2:	4699      	mov	r9, r3
 80034c4:	46a2      	mov	sl, r4
 80034c6:	eb19 0905 	adds.w	r9, r9, r5
 80034ca:	eb4a 0a06 	adc.w	sl, sl, r6
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034e2:	4689      	mov	r9, r1
 80034e4:	4692      	mov	sl, r2
 80034e6:	eb19 0005 	adds.w	r0, r9, r5
 80034ea:	eb4a 0106 	adc.w	r1, sl, r6
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	461d      	mov	r5, r3
 80034f4:	f04f 0600 	mov.w	r6, #0
 80034f8:	196b      	adds	r3, r5, r5
 80034fa:	eb46 0406 	adc.w	r4, r6, r6
 80034fe:	461a      	mov	r2, r3
 8003500:	4623      	mov	r3, r4
 8003502:	f7fc fe71 	bl	80001e8 <__aeabi_uldivmod>
 8003506:	4603      	mov	r3, r0
 8003508:	460c      	mov	r4, r1
 800350a:	461a      	mov	r2, r3
 800350c:	4b95      	ldr	r3, [pc, #596]	; (8003764 <UART_SetConfig+0x3b4>)
 800350e:	fba3 1302 	umull	r1, r3, r3, r2
 8003512:	095b      	lsrs	r3, r3, #5
 8003514:	2164      	movs	r1, #100	; 0x64
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	00db      	lsls	r3, r3, #3
 800351e:	3332      	adds	r3, #50	; 0x32
 8003520:	4a90      	ldr	r2, [pc, #576]	; (8003764 <UART_SetConfig+0x3b4>)
 8003522:	fba2 2303 	umull	r2, r3, r2, r3
 8003526:	095b      	lsrs	r3, r3, #5
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800352e:	4498      	add	r8, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	461d      	mov	r5, r3
 8003534:	f04f 0600 	mov.w	r6, #0
 8003538:	46a9      	mov	r9, r5
 800353a:	46b2      	mov	sl, r6
 800353c:	eb19 0309 	adds.w	r3, r9, r9
 8003540:	eb4a 040a 	adc.w	r4, sl, sl
 8003544:	4699      	mov	r9, r3
 8003546:	46a2      	mov	sl, r4
 8003548:	eb19 0905 	adds.w	r9, r9, r5
 800354c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	f04f 0200 	mov.w	r2, #0
 8003558:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800355c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003560:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003564:	4689      	mov	r9, r1
 8003566:	4692      	mov	sl, r2
 8003568:	eb19 0005 	adds.w	r0, r9, r5
 800356c:	eb4a 0106 	adc.w	r1, sl, r6
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	461d      	mov	r5, r3
 8003576:	f04f 0600 	mov.w	r6, #0
 800357a:	196b      	adds	r3, r5, r5
 800357c:	eb46 0406 	adc.w	r4, r6, r6
 8003580:	461a      	mov	r2, r3
 8003582:	4623      	mov	r3, r4
 8003584:	f7fc fe30 	bl	80001e8 <__aeabi_uldivmod>
 8003588:	4603      	mov	r3, r0
 800358a:	460c      	mov	r4, r1
 800358c:	461a      	mov	r2, r3
 800358e:	4b75      	ldr	r3, [pc, #468]	; (8003764 <UART_SetConfig+0x3b4>)
 8003590:	fba3 1302 	umull	r1, r3, r3, r2
 8003594:	095b      	lsrs	r3, r3, #5
 8003596:	2164      	movs	r1, #100	; 0x64
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	00db      	lsls	r3, r3, #3
 80035a0:	3332      	adds	r3, #50	; 0x32
 80035a2:	4a70      	ldr	r2, [pc, #448]	; (8003764 <UART_SetConfig+0x3b4>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	095b      	lsrs	r3, r3, #5
 80035aa:	f003 0207 	and.w	r2, r3, #7
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4442      	add	r2, r8
 80035b4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b6:	e0cc      	b.n	8003752 <UART_SetConfig+0x3a2>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	469a      	mov	sl, r3
 80035bc:	f04f 0b00 	mov.w	fp, #0
 80035c0:	46d0      	mov	r8, sl
 80035c2:	46d9      	mov	r9, fp
 80035c4:	eb18 0308 	adds.w	r3, r8, r8
 80035c8:	eb49 0409 	adc.w	r4, r9, r9
 80035cc:	4698      	mov	r8, r3
 80035ce:	46a1      	mov	r9, r4
 80035d0:	eb18 080a 	adds.w	r8, r8, sl
 80035d4:	eb49 090b 	adc.w	r9, r9, fp
 80035d8:	f04f 0100 	mov.w	r1, #0
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035e4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035e8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035ec:	4688      	mov	r8, r1
 80035ee:	4691      	mov	r9, r2
 80035f0:	eb1a 0508 	adds.w	r5, sl, r8
 80035f4:	eb4b 0609 	adc.w	r6, fp, r9
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	4619      	mov	r1, r3
 80035fe:	f04f 0200 	mov.w	r2, #0
 8003602:	f04f 0300 	mov.w	r3, #0
 8003606:	f04f 0400 	mov.w	r4, #0
 800360a:	0094      	lsls	r4, r2, #2
 800360c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003610:	008b      	lsls	r3, r1, #2
 8003612:	461a      	mov	r2, r3
 8003614:	4623      	mov	r3, r4
 8003616:	4628      	mov	r0, r5
 8003618:	4631      	mov	r1, r6
 800361a:	f7fc fde5 	bl	80001e8 <__aeabi_uldivmod>
 800361e:	4603      	mov	r3, r0
 8003620:	460c      	mov	r4, r1
 8003622:	461a      	mov	r2, r3
 8003624:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <UART_SetConfig+0x3b4>)
 8003626:	fba3 2302 	umull	r2, r3, r3, r2
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	469b      	mov	fp, r3
 8003634:	f04f 0c00 	mov.w	ip, #0
 8003638:	46d9      	mov	r9, fp
 800363a:	46e2      	mov	sl, ip
 800363c:	eb19 0309 	adds.w	r3, r9, r9
 8003640:	eb4a 040a 	adc.w	r4, sl, sl
 8003644:	4699      	mov	r9, r3
 8003646:	46a2      	mov	sl, r4
 8003648:	eb19 090b 	adds.w	r9, r9, fp
 800364c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003650:	f04f 0100 	mov.w	r1, #0
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800365c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003660:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003664:	4689      	mov	r9, r1
 8003666:	4692      	mov	sl, r2
 8003668:	eb1b 0509 	adds.w	r5, fp, r9
 800366c:	eb4c 060a 	adc.w	r6, ip, sl
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	4619      	mov	r1, r3
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	f04f 0400 	mov.w	r4, #0
 8003682:	0094      	lsls	r4, r2, #2
 8003684:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003688:	008b      	lsls	r3, r1, #2
 800368a:	461a      	mov	r2, r3
 800368c:	4623      	mov	r3, r4
 800368e:	4628      	mov	r0, r5
 8003690:	4631      	mov	r1, r6
 8003692:	f7fc fda9 	bl	80001e8 <__aeabi_uldivmod>
 8003696:	4603      	mov	r3, r0
 8003698:	460c      	mov	r4, r1
 800369a:	461a      	mov	r2, r3
 800369c:	4b31      	ldr	r3, [pc, #196]	; (8003764 <UART_SetConfig+0x3b4>)
 800369e:	fba3 1302 	umull	r1, r3, r3, r2
 80036a2:	095b      	lsrs	r3, r3, #5
 80036a4:	2164      	movs	r1, #100	; 0x64
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	011b      	lsls	r3, r3, #4
 80036ae:	3332      	adds	r3, #50	; 0x32
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <UART_SetConfig+0x3b4>)
 80036b2:	fba2 2303 	umull	r2, r3, r2, r3
 80036b6:	095b      	lsrs	r3, r3, #5
 80036b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80036bc:	4498      	add	r8, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	469b      	mov	fp, r3
 80036c2:	f04f 0c00 	mov.w	ip, #0
 80036c6:	46d9      	mov	r9, fp
 80036c8:	46e2      	mov	sl, ip
 80036ca:	eb19 0309 	adds.w	r3, r9, r9
 80036ce:	eb4a 040a 	adc.w	r4, sl, sl
 80036d2:	4699      	mov	r9, r3
 80036d4:	46a2      	mov	sl, r4
 80036d6:	eb19 090b 	adds.w	r9, r9, fp
 80036da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80036de:	f04f 0100 	mov.w	r1, #0
 80036e2:	f04f 0200 	mov.w	r2, #0
 80036e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036f2:	4689      	mov	r9, r1
 80036f4:	4692      	mov	sl, r2
 80036f6:	eb1b 0509 	adds.w	r5, fp, r9
 80036fa:	eb4c 060a 	adc.w	r6, ip, sl
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4619      	mov	r1, r3
 8003704:	f04f 0200 	mov.w	r2, #0
 8003708:	f04f 0300 	mov.w	r3, #0
 800370c:	f04f 0400 	mov.w	r4, #0
 8003710:	0094      	lsls	r4, r2, #2
 8003712:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003716:	008b      	lsls	r3, r1, #2
 8003718:	461a      	mov	r2, r3
 800371a:	4623      	mov	r3, r4
 800371c:	4628      	mov	r0, r5
 800371e:	4631      	mov	r1, r6
 8003720:	f7fc fd62 	bl	80001e8 <__aeabi_uldivmod>
 8003724:	4603      	mov	r3, r0
 8003726:	460c      	mov	r4, r1
 8003728:	461a      	mov	r2, r3
 800372a:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <UART_SetConfig+0x3b4>)
 800372c:	fba3 1302 	umull	r1, r3, r3, r2
 8003730:	095b      	lsrs	r3, r3, #5
 8003732:	2164      	movs	r1, #100	; 0x64
 8003734:	fb01 f303 	mul.w	r3, r1, r3
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	3332      	adds	r3, #50	; 0x32
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <UART_SetConfig+0x3b4>)
 8003740:	fba2 2303 	umull	r2, r3, r2, r3
 8003744:	095b      	lsrs	r3, r3, #5
 8003746:	f003 020f 	and.w	r2, r3, #15
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4442      	add	r2, r8
 8003750:	609a      	str	r2, [r3, #8]
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375c:	40011000 	.word	0x40011000
 8003760:	40011400 	.word	0x40011400
 8003764:	51eb851f 	.word	0x51eb851f

08003768 <rylr998SetAddress>:

	return ret;
}
//AT+ADDRESS=<Address>
Rylr998_Status_t rylr998SetAddress(uint8_t* address)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
	Rylr998_Status_t 	ret 				= Rylr998_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	77fb      	strb	r3, [r7, #31]
	const uint16_t 		packetSize 			= 14;
 8003774:	230e      	movs	r3, #14
 8003776:	83bb      	strh	r3, [r7, #28]
	char	 			uartTxBuffer[14] 	= {0};
 8003778:	f107 030c 	add.w	r3, r7, #12
 800377c:	2200      	movs	r2, #0
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	605a      	str	r2, [r3, #4]
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	819a      	strh	r2, [r3, #12]

	memcpy(uartTxBuffer, AT, AT_PRIFEX_SIZE);
 8003786:	f107 030c 	add.w	r3, r7, #12
 800378a:	2203      	movs	r2, #3
 800378c:	4922      	ldr	r1, [pc, #136]	; (8003818 <rylr998SetAddress+0xb0>)
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fc3b 	bl	800400a <memcpy>
	strcat(uartTxBuffer, ADDRESS);
 8003794:	f107 030c 	add.w	r3, r7, #12
 8003798:	4618      	mov	r0, r3
 800379a:	f7fc fd1d 	bl	80001d8 <strlen>
 800379e:	4603      	mov	r3, r0
 80037a0:	461a      	mov	r2, r3
 80037a2:	f107 030c 	add.w	r3, r7, #12
 80037a6:	4413      	add	r3, r2
 80037a8:	491c      	ldr	r1, [pc, #112]	; (800381c <rylr998SetAddress+0xb4>)
 80037aa:	461a      	mov	r2, r3
 80037ac:	460b      	mov	r3, r1
 80037ae:	cb03      	ldmia	r3!, {r0, r1}
 80037b0:	6010      	str	r0, [r2, #0]
 80037b2:	6051      	str	r1, [r2, #4]
	strcat(uartTxBuffer, SET_VALUE);
 80037b4:	f107 030c 	add.w	r3, r7, #12
 80037b8:	4618      	mov	r0, r3
 80037ba:	f7fc fd0d 	bl	80001d8 <strlen>
 80037be:	4603      	mov	r3, r0
 80037c0:	461a      	mov	r2, r3
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	4413      	add	r3, r2
 80037c8:	4915      	ldr	r1, [pc, #84]	; (8003820 <rylr998SetAddress+0xb8>)
 80037ca:	461a      	mov	r2, r3
 80037cc:	460b      	mov	r3, r1
 80037ce:	881b      	ldrh	r3, [r3, #0]
 80037d0:	8013      	strh	r3, [r2, #0]

	strcat((char*) uartTxBuffer, (char*)  address);
 80037d2:	f107 030c 	add.w	r3, r7, #12
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	4618      	mov	r0, r3
 80037da:	f000 fc29 	bl	8004030 <strcat>
	strcat((char*) uartTxBuffer, TERMINATOR);
 80037de:	f107 030c 	add.w	r3, r7, #12
 80037e2:	4618      	mov	r0, r3
 80037e4:	f7fc fcf8 	bl	80001d8 <strlen>
 80037e8:	4603      	mov	r3, r0
 80037ea:	461a      	mov	r2, r3
 80037ec:	f107 030c 	add.w	r3, r7, #12
 80037f0:	4413      	add	r3, r2
 80037f2:	4a0c      	ldr	r2, [pc, #48]	; (8003824 <rylr998SetAddress+0xbc>)
 80037f4:	8811      	ldrh	r1, [r2, #0]
 80037f6:	7892      	ldrb	r2, [r2, #2]
 80037f8:	8019      	strh	r1, [r3, #0]
 80037fa:	709a      	strb	r2, [r3, #2]

	ret = HAL_UART_Transmit(&huart1,(uint8_t*) uartTxBuffer, packetSize, 10);
 80037fc:	8bba      	ldrh	r2, [r7, #28]
 80037fe:	f107 010c 	add.w	r1, r7, #12
 8003802:	230a      	movs	r3, #10
 8003804:	4808      	ldr	r0, [pc, #32]	; (8003828 <rylr998SetAddress+0xc0>)
 8003806:	f7fe fdfc 	bl	8002402 <HAL_UART_Transmit>
 800380a:	4603      	mov	r3, r0
 800380c:	77fb      	strb	r3, [r7, #31]

	return ret;
 800380e:	7ffb      	ldrb	r3, [r7, #31]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3720      	adds	r7, #32
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	08004068 	.word	0x08004068
 800381c:	08004070 	.word	0x08004070
 8003820:	08004078 	.word	0x08004078
 8003824:	0800406c 	.word	0x0800406c
 8003828:	200000e8 	.word	0x200000e8

0800382c <rylr998Send>:
}

//AT+SEND=<Address>,<Payload Length>,<Data>
Rylr998_Status_t rylr998Send(Rylr998Handler_t* hRylr998, UloraCommand_e uLoRaCommand)
//Rylr998_Status_t rylr998Send(uint16_t address, uint8_t payloadLength, uint8_t* txBuffer)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b0c4      	sub	sp, #272	; 0x110
 8003830:	af00      	add	r7, sp, #0
 8003832:	1d3b      	adds	r3, r7, #4
 8003834:	6018      	str	r0, [r3, #0]
 8003836:	460a      	mov	r2, r1
 8003838:	1cfb      	adds	r3, r7, #3
 800383a:	701a      	strb	r2, [r3, #0]
	Rylr998_Status_t 	ret 					= Rylr998_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d
	uint8_t 			uartTxBuffer[256] 		= {0};
 8003842:	f107 030c 	add.w	r3, r7, #12
 8003846:	4618      	mov	r0, r3
 8003848:	f44f 7380 	mov.w	r3, #256	; 0x100
 800384c:	461a      	mov	r2, r3
 800384e:	2100      	movs	r1, #0
 8003850:	f000 fbe6 	bl	8004020 <memset>
	uint16_t			packetSize				= 0;
 8003854:	2300      	movs	r3, #0
 8003856:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
	uint8_t				packetSizeAscii[2]		= {0};
 800385a:	f107 0308 	add.w	r3, r7, #8
 800385e:	2200      	movs	r2, #0
 8003860:	801a      	strh	r2, [r3, #0]

	UloraCommand_e				Command			= uLoRaCommand;
 8003862:	1cfb      	adds	r3, r7, #3
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
	switch (Command)
 800386a:	f997 310c 	ldrsb.w	r3, [r7, #268]	; 0x10c
 800386e:	2b01      	cmp	r3, #1
 8003870:	d003      	beq.n	800387a <rylr998Send+0x4e>
 8003872:	2b02      	cmp	r3, #2
 8003874:	d00e      	beq.n	8003894 <rylr998Send+0x68>
 8003876:	2b00      	cmp	r3, #0
	{
		case ULORA_NAK:

			break;
 8003878:	e024      	b.n	80038c4 <rylr998Send+0x98>
		case ULORA_ACK:
			hRylr998->rylr998Transmitter.TxBuffer[0] = ULORA_ACK;
 800387a:	1d3b      	adds	r3, r7, #4
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2201      	movs	r2, #1
 8003880:	771a      	strb	r2, [r3, #28]
			hRylr998->rylr998Transmitter.TxBuffer[1] = 0;
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2200      	movs	r2, #0
 8003888:	775a      	strb	r2, [r3, #29]
//			++packetSize;
			packetSizeAscii[0] = '1';							//One single byte to transmit
 800388a:	f107 0308 	add.w	r3, r7, #8
 800388e:	2231      	movs	r2, #49	; 0x31
 8003890:	701a      	strb	r2, [r3, #0]
			break;
 8003892:	e017      	b.n	80038c4 <rylr998Send+0x98>
		case ULORA_CONN_COUNT:
			uloraCommunicationTest	(hRylr998->rylr998Transmitter.TxBuffer);
 8003894:	1d3b      	adds	r3, r7, #4
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	331c      	adds	r3, #28
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fada 	bl	8003e54 <uloraCommunicationTest>
			packetSize += hRylr998->rylr998Transmitter.TxBuffer[1] - 1 - '0' ;
 80038a0:	1d3b      	adds	r3, r7, #4
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	7f5b      	ldrb	r3, [r3, #29]
 80038a6:	b29a      	uxth	r2, r3
 80038a8:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80038ac:	4413      	add	r3, r2
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b31      	subs	r3, #49	; 0x31
 80038b2:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
			packetSizeAscii[0] = hRylr998->rylr998Transmitter.TxBuffer[1];
 80038b6:	1d3b      	adds	r3, r7, #4
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	7f5a      	ldrb	r2, [r3, #29]
 80038bc:	f107 0308 	add.w	r3, r7, #8
 80038c0:	701a      	strb	r2, [r3, #0]
			break;
 80038c2:	bf00      	nop
	}
	packetSize += AT_OVERHEAD_SIZE + sizeof(SEND) + 2 + 1 + 1;   //2 is the number of segment separators
 80038c4:	f8b7 310e 	ldrh.w	r3, [r7, #270]	; 0x10e
 80038c8:	330f      	adds	r3, #15
 80038ca:	f8a7 310e 	strh.w	r3, [r7, #270]	; 0x10e
																 //1 is for the receiver address
																 //1 is for the payload
	memcpy(uartTxBuffer, AT, AT_PRIFEX_SIZE);
 80038ce:	f107 030c 	add.w	r3, r7, #12
 80038d2:	2203      	movs	r2, #3
 80038d4:	493e      	ldr	r1, [pc, #248]	; (80039d0 <rylr998Send+0x1a4>)
 80038d6:	4618      	mov	r0, r3
 80038d8:	f000 fb97 	bl	800400a <memcpy>
	strcat((char*) uartTxBuffer, SEND);
 80038dc:	f107 030c 	add.w	r3, r7, #12
 80038e0:	4618      	mov	r0, r3
 80038e2:	f7fc fc79 	bl	80001d8 <strlen>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	f107 030c 	add.w	r3, r7, #12
 80038ee:	4413      	add	r3, r2
 80038f0:	4a38      	ldr	r2, [pc, #224]	; (80039d4 <rylr998Send+0x1a8>)
 80038f2:	6810      	ldr	r0, [r2, #0]
 80038f4:	6018      	str	r0, [r3, #0]
 80038f6:	7912      	ldrb	r2, [r2, #4]
 80038f8:	711a      	strb	r2, [r3, #4]
	strcat((char*) uartTxBuffer, SET_VALUE);
 80038fa:	f107 030c 	add.w	r3, r7, #12
 80038fe:	4618      	mov	r0, r3
 8003900:	f7fc fc6a 	bl	80001d8 <strlen>
 8003904:	4603      	mov	r3, r0
 8003906:	461a      	mov	r2, r3
 8003908:	f107 030c 	add.w	r3, r7, #12
 800390c:	4413      	add	r3, r2
 800390e:	4932      	ldr	r1, [pc, #200]	; (80039d8 <rylr998Send+0x1ac>)
 8003910:	461a      	mov	r2, r3
 8003912:	460b      	mov	r3, r1
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	8013      	strh	r3, [r2, #0]

	strcat((char*) uartTxBuffer, (char*) hRylr998->rylr998Transmitter.address);
 8003918:	1d3b      	adds	r3, r7, #4
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f103 0218 	add.w	r2, r3, #24
 8003920:	f107 030c 	add.w	r3, r7, #12
 8003924:	4611      	mov	r1, r2
 8003926:	4618      	mov	r0, r3
 8003928:	f000 fb82 	bl	8004030 <strcat>
	strcat((char*) uartTxBuffer, SEGMENT_SEPARATOR);
 800392c:	f107 030c 	add.w	r3, r7, #12
 8003930:	4618      	mov	r0, r3
 8003932:	f7fc fc51 	bl	80001d8 <strlen>
 8003936:	4603      	mov	r3, r0
 8003938:	461a      	mov	r2, r3
 800393a:	f107 030c 	add.w	r3, r7, #12
 800393e:	4413      	add	r3, r2
 8003940:	4926      	ldr	r1, [pc, #152]	; (80039dc <rylr998Send+0x1b0>)
 8003942:	461a      	mov	r2, r3
 8003944:	460b      	mov	r3, r1
 8003946:	881b      	ldrh	r3, [r3, #0]
 8003948:	8013      	strh	r3, [r2, #0]
//	packetSizeAscii[0] = hRylr998->rylr998Transmitter.TxBuffer[1];

//	rylr998Int2Ascii(packetSizeAscii);


	strcat((char*) uartTxBuffer, (char*)  packetSizeAscii);
 800394a:	f107 0208 	add.w	r2, r7, #8
 800394e:	f107 030c 	add.w	r3, r7, #12
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f000 fb6b 	bl	8004030 <strcat>
	strcat((char*) uartTxBuffer, SEGMENT_SEPARATOR);
 800395a:	f107 030c 	add.w	r3, r7, #12
 800395e:	4618      	mov	r0, r3
 8003960:	f7fc fc3a 	bl	80001d8 <strlen>
 8003964:	4603      	mov	r3, r0
 8003966:	461a      	mov	r2, r3
 8003968:	f107 030c 	add.w	r3, r7, #12
 800396c:	4413      	add	r3, r2
 800396e:	491b      	ldr	r1, [pc, #108]	; (80039dc <rylr998Send+0x1b0>)
 8003970:	461a      	mov	r2, r3
 8003972:	460b      	mov	r3, r1
 8003974:	881b      	ldrh	r3, [r3, #0]
 8003976:	8013      	strh	r3, [r2, #0]
	strcat((char*) uartTxBuffer, (char*) hRylr998->rylr998Transmitter.TxBuffer);
 8003978:	1d3b      	adds	r3, r7, #4
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f103 021c 	add.w	r2, r3, #28
 8003980:	f107 030c 	add.w	r3, r7, #12
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fb52 	bl	8004030 <strcat>
//	memcpy(uartTxBuffer + 16, TERMINATOR, 2);
	strcat((char*) uartTxBuffer, TERMINATOR);
 800398c:	f107 030c 	add.w	r3, r7, #12
 8003990:	4618      	mov	r0, r3
 8003992:	f7fc fc21 	bl	80001d8 <strlen>
 8003996:	4603      	mov	r3, r0
 8003998:	461a      	mov	r2, r3
 800399a:	f107 030c 	add.w	r3, r7, #12
 800399e:	4413      	add	r3, r2
 80039a0:	4a0f      	ldr	r2, [pc, #60]	; (80039e0 <rylr998Send+0x1b4>)
 80039a2:	8811      	ldrh	r1, [r2, #0]
 80039a4:	7892      	ldrb	r2, [r2, #2]
 80039a6:	8019      	strh	r1, [r3, #0]
 80039a8:	709a      	strb	r2, [r3, #2]

	ret = HAL_UART_Transmit(&huart1, uartTxBuffer, packetSize, 10);
 80039aa:	f8b7 210e 	ldrh.w	r2, [r7, #270]	; 0x10e
 80039ae:	f107 010c 	add.w	r1, r7, #12
 80039b2:	230a      	movs	r3, #10
 80039b4:	480b      	ldr	r0, [pc, #44]	; (80039e4 <rylr998Send+0x1b8>)
 80039b6:	f7fe fd24 	bl	8002402 <HAL_UART_Transmit>
 80039ba:	4603      	mov	r3, r0
 80039bc:	f887 310d 	strb.w	r3, [r7, #269]	; 0x10d

	return ret;
 80039c0:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	f507 7788 	add.w	r7, r7, #272	; 0x110
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	08004068 	.word	0x08004068
 80039d4:	08004094 	.word	0x08004094
 80039d8:	08004078 	.word	0x08004078
 80039dc:	0800409c 	.word	0x0800409c
 80039e0:	0800406c 	.word	0x0800406c
 80039e4:	200000e8 	.word	0x200000e8

080039e8 <rylr998ReceivePacketParser>:

Rylr998_Status_t rylr998ReceivePacketParser(Rylr998Handler_t* hRylr998)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b0c2      	sub	sp, #264	; 0x108
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	6018      	str	r0, [r3, #0]
	Rylr998_Status_t 	ret 						= Rylr998_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	Rylr998RxCommand_e  command						= Rylr998R_NOT_FOUND;
 80039f8:	2304      	movs	r3, #4
 80039fa:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	uint8_t 			tempUartRxBuffer[250] 		= {0};
 80039fe:	f107 030c 	add.w	r3, r7, #12
 8003a02:	22fa      	movs	r2, #250	; 0xfa
 8003a04:	2100      	movs	r1, #0
 8003a06:	4618      	mov	r0, r3
 8003a08:	f000 fb0a 	bl	8004020 <memset>
    //Real size should be used instead
	memcpy(tempUartRxBuffer, hRylr998->rylr998Receiver.rxBuffer, 30);
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f203 110f 	addw	r1, r3, #271	; 0x10f
 8003a14:	f107 030c 	add.w	r3, r7, #12
 8003a18:	221e      	movs	r2, #30
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 faf5 	bl	800400a <memcpy>

	if(!memcmp(tempUartRxBuffer, RX_PACKET_START, 1))
 8003a20:	f107 030c 	add.w	r3, r7, #12
 8003a24:	781a      	ldrb	r2, [r3, #0]
 8003a26:	4b2f      	ldr	r3, [pc, #188]	; (8003ae4 <rylr998ReceivePacketParser+0xfc>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d14d      	bne.n	8003aca <rylr998ReceivePacketParser+0xe2>
	{
		hRylr998->Rylr998LastRXPacket = rylr998ResponseFind	(tempUartRxBuffer + RESPONSE_OFFSET);
 8003a2e:	f107 030c 	add.w	r3, r7, #12
 8003a32:	3301      	adds	r3, #1
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f99d 	bl	8003d74 <rylr998ResponseFind>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	1d3b      	adds	r3, r7, #4
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f883 2207 	strb.w	r2, [r3, #519]	; 0x207
		command = hRylr998->Rylr998LastRXPacket ;
 8003a46:	1d3b      	adds	r3, r7, #4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f893 3207 	ldrb.w	r3, [r3, #519]	; 0x207
 8003a4e:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		switch (command)
 8003a52:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8003a56:	2b03      	cmp	r3, #3
 8003a58:	d839      	bhi.n	8003ace <rylr998ReceivePacketParser+0xe6>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <rylr998ReceivePacketParser+0x78>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003acf 	.word	0x08003acf
 8003a64:	08003a71 	.word	0x08003a71
 8003a68:	08003ab3 	.word	0x08003ab3
 8003a6c:	08003acf 	.word	0x08003acf
		{
			case Rylr998R_OK:

				break;
			case Rylr998R_ADDRESS:
				rylr998Ascii2Int(&hRylr998->rylr998Receiver.rxBuffer[ADDRESS_OFFSET]);
 8003a70:	1d3b      	adds	r3, r7, #4
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 f9cf 	bl	8003e1c <rylr998Ascii2Int>
				if(hRylr998->rylr998Receiver.rxBuffer[ADDRESS_OFFSET] != RYLR998_ADDRESS)
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d023      	beq.n	8003ad2 <rylr998ReceivePacketParser+0xea>
				{
					hRylr998->rylr998Receiver.address[0] = RYLR998_ADDRESS;
 8003a8a:	1d3b      	adds	r3, r7, #4
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2202      	movs	r2, #2
 8003a90:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
					rylr998Int2Ascii(hRylr998->rylr998Receiver.address);
 8003a94:	1d3b      	adds	r3, r7, #4
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f000 f9ad 	bl	8003dfc <rylr998Int2Ascii>
					rylr998SetAddress(hRylr998->rylr998Receiver.address);
 8003aa2:	1d3b      	adds	r3, r7, #4
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7ff fe5c 	bl	8003768 <rylr998SetAddress>
				}
				break;
 8003ab0:	e00f      	b.n	8003ad2 <rylr998ReceivePacketParser+0xea>
			case Rylr998R_RCV:
				hLoRaModule.rylr998Timer = HAL_GetTick();
 8003ab2:	f7fd f905 	bl	8000cc0 <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	4b0b      	ldr	r3, [pc, #44]	; (8003ae8 <rylr998ReceivePacketParser+0x100>)
 8003aba:	605a      	str	r2, [r3, #4]
				uloraPacketStore(tempUartRxBuffer + 9);
 8003abc:	f107 030c 	add.w	r3, r7, #12
 8003ac0:	3309      	adds	r3, #9
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f000 f9ea 	bl	8003e9c <uloraPacketStore>
				break;
 8003ac8:	e004      	b.n	8003ad4 <rylr998ReceivePacketParser+0xec>

				break;
			default:
				break;
		}
	}
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <rylr998ReceivePacketParser+0xec>
				break;
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <rylr998ReceivePacketParser+0xec>
				break;
 8003ad2:	bf00      	nop

	return ret;
 8003ad4:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	080040a0 	.word	0x080040a0
 8003ae8:	20000130 	.word	0x20000130

08003aec <rylr998Get>:
}



Rylr998_Status_t rylr998Get(Rylr998Handler_t* hRylr998, Rylr998Command_e command)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b08a      	sub	sp, #40	; 0x28
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	70fb      	strb	r3, [r7, #3]
	Rylr998_Status_t 	ret 				= Rylr998_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t 			txPacketSize 		= 0;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t 			rxPacketSize 		= 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t 			uartTxBuffer[20] 	= {0};
 8003b08:	f107 030c 	add.w	r3, r7, #12
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	601a      	str	r2, [r3, #0]
 8003b10:	605a      	str	r2, [r3, #4]
 8003b12:	609a      	str	r2, [r3, #8]
 8003b14:	60da      	str	r2, [r3, #12]
 8003b16:	611a      	str	r2, [r3, #16]

	memcpy(uartTxBuffer, 		 AT, AT_PRIFEX_SIZE);
 8003b18:	f107 030c 	add.w	r3, r7, #12
 8003b1c:	2203      	movs	r2, #3
 8003b1e:	4988      	ldr	r1, [pc, #544]	; (8003d40 <rylr998Get+0x254>)
 8003b20:	4618      	mov	r0, r3
 8003b22:	f000 fa72 	bl	800400a <memcpy>

	switch (command)											//This part calculates the command length and
 8003b26:	78fb      	ldrb	r3, [r7, #3]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	f200 80c5 	bhi.w	8003cb8 <rylr998Get+0x1cc>
 8003b2e:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <rylr998Get+0x48>)
 8003b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b7b 	.word	0x08003b7b
 8003b3c:	08003bab 	.word	0x08003bab
 8003b40:	08003bd1 	.word	0x08003bd1
 8003b44:	08003bfd 	.word	0x08003bfd
 8003b48:	08003c29 	.word	0x08003c29
 8003b4c:	08003c4f 	.word	0x08003c4f
 8003b50:	08003c75 	.word	0x08003c75
 8003b54:	08003c97 	.word	0x08003c97
	{															//selects the wanted command string
		case Rylr998_BOUDRATE:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(IPR) - 1;
 8003b58:	2309      	movs	r3, #9
 8003b5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, IPR);
 8003b5e:	f107 030c 	add.w	r3, r7, #12
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7fc fb38 	bl	80001d8 <strlen>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f107 030c 	add.w	r3, r7, #12
 8003b70:	4413      	add	r3, r2
 8003b72:	4a74      	ldr	r2, [pc, #464]	; (8003d44 <rylr998Get+0x258>)
 8003b74:	6810      	ldr	r0, [r2, #0]
 8003b76:	6018      	str	r0, [r3, #0]

			break;
 8003b78:	e09e      	b.n	8003cb8 <rylr998Get+0x1cc>
		case Rylr998_PARAMETER:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(PARAMETER) - 1;
 8003b7a:	230f      	movs	r3, #15
 8003b7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, PARAMETER);
 8003b80:	f107 030c 	add.w	r3, r7, #12
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fb27 	bl	80001d8 <strlen>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f107 030c 	add.w	r3, r7, #12
 8003b92:	4413      	add	r3, r2
 8003b94:	496c      	ldr	r1, [pc, #432]	; (8003d48 <rylr998Get+0x25c>)
 8003b96:	461a      	mov	r2, r3
 8003b98:	460b      	mov	r3, r1
 8003b9a:	cb03      	ldmia	r3!, {r0, r1}
 8003b9c:	6010      	str	r0, [r2, #0]
 8003b9e:	6051      	str	r1, [r2, #4]
 8003ba0:	881b      	ldrh	r3, [r3, #0]
 8003ba2:	8113      	strh	r3, [r2, #8]
			rxPacketSize = 21;
 8003ba4:	2315      	movs	r3, #21
 8003ba6:	84bb      	strh	r3, [r7, #36]	; 0x24

			break;
 8003ba8:	e086      	b.n	8003cb8 <rylr998Get+0x1cc>
		case Rylr998_BAND:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(BAND) - 1;
 8003baa:	230a      	movs	r3, #10
 8003bac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, BAND);
 8003bb0:	f107 030c 	add.w	r3, r7, #12
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fc fb0f 	bl	80001d8 <strlen>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f107 030c 	add.w	r3, r7, #12
 8003bc2:	4413      	add	r3, r2
 8003bc4:	4a61      	ldr	r2, [pc, #388]	; (8003d4c <rylr998Get+0x260>)
 8003bc6:	6810      	ldr	r0, [r2, #0]
 8003bc8:	6018      	str	r0, [r3, #0]
 8003bca:	7912      	ldrb	r2, [r2, #4]
 8003bcc:	711a      	strb	r2, [r3, #4]

			break;
 8003bce:	e073      	b.n	8003cb8 <rylr998Get+0x1cc>
		case Rylr998_ADDRESS:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(ADDRESS) - 1;
 8003bd0:	230d      	movs	r3, #13
 8003bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, ADDRESS);
 8003bd6:	f107 030c 	add.w	r3, r7, #12
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fc fafc 	bl	80001d8 <strlen>
 8003be0:	4603      	mov	r3, r0
 8003be2:	461a      	mov	r2, r3
 8003be4:	f107 030c 	add.w	r3, r7, #12
 8003be8:	4413      	add	r3, r2
 8003bea:	4959      	ldr	r1, [pc, #356]	; (8003d50 <rylr998Get+0x264>)
 8003bec:	461a      	mov	r2, r3
 8003bee:	460b      	mov	r3, r1
 8003bf0:	cb03      	ldmia	r3!, {r0, r1}
 8003bf2:	6010      	str	r0, [r2, #0]
 8003bf4:	6051      	str	r1, [r2, #4]
			rxPacketSize = 12;
 8003bf6:	230c      	movs	r3, #12
 8003bf8:	84bb      	strh	r3, [r7, #36]	; 0x24

			break;
 8003bfa:	e05d      	b.n	8003cb8 <rylr998Get+0x1cc>
		case Rylr998_NETWORKID:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(NETWORKID) - 1;
 8003bfc:	230f      	movs	r3, #15
 8003bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, NETWORKID);
 8003c02:	f107 030c 	add.w	r3, r7, #12
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fc fae6 	bl	80001d8 <strlen>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f107 030c 	add.w	r3, r7, #12
 8003c14:	4413      	add	r3, r2
 8003c16:	494f      	ldr	r1, [pc, #316]	; (8003d54 <rylr998Get+0x268>)
 8003c18:	461a      	mov	r2, r3
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	cb03      	ldmia	r3!, {r0, r1}
 8003c1e:	6010      	str	r0, [r2, #0]
 8003c20:	6051      	str	r1, [r2, #4]
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	8113      	strh	r3, [r2, #8]

			break;
 8003c26:	e047      	b.n	8003cb8 <rylr998Get+0x1cc>
		case Rylr998_CRFOP:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(CRFOP) - 1;
 8003c28:	230b      	movs	r3, #11
 8003c2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, CRFOP);
 8003c2e:	f107 030c 	add.w	r3, r7, #12
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc fad0 	bl	80001d8 <strlen>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f107 030c 	add.w	r3, r7, #12
 8003c40:	4413      	add	r3, r2
 8003c42:	4a45      	ldr	r2, [pc, #276]	; (8003d58 <rylr998Get+0x26c>)
 8003c44:	6810      	ldr	r0, [r2, #0]
 8003c46:	6018      	str	r0, [r3, #0]
 8003c48:	8892      	ldrh	r2, [r2, #4]
 8003c4a:	809a      	strh	r2, [r3, #4]

			break;
 8003c4c:	e034      	b.n	8003cb8 <rylr998Get+0x1cc>
		case Rylr998_SEND:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(SEND) - 1;
 8003c4e:	230a      	movs	r3, #10
 8003c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, SEND);
 8003c54:	f107 030c 	add.w	r3, r7, #12
 8003c58:	4618      	mov	r0, r3
 8003c5a:	f7fc fabd 	bl	80001d8 <strlen>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	461a      	mov	r2, r3
 8003c62:	f107 030c 	add.w	r3, r7, #12
 8003c66:	4413      	add	r3, r2
 8003c68:	4a3c      	ldr	r2, [pc, #240]	; (8003d5c <rylr998Get+0x270>)
 8003c6a:	6810      	ldr	r0, [r2, #0]
 8003c6c:	6018      	str	r0, [r3, #0]
 8003c6e:	7912      	ldrb	r2, [r2, #4]
 8003c70:	711a      	strb	r2, [r3, #4]

			break;
 8003c72:	e021      	b.n	8003cb8 <rylr998Get+0x1cc>
		case Rylr998_UID:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(UID) - 1;
 8003c74:	2309      	movs	r3, #9
 8003c76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, UID);
 8003c7a:	f107 030c 	add.w	r3, r7, #12
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fc faaa 	bl	80001d8 <strlen>
 8003c84:	4603      	mov	r3, r0
 8003c86:	461a      	mov	r2, r3
 8003c88:	f107 030c 	add.w	r3, r7, #12
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4a34      	ldr	r2, [pc, #208]	; (8003d60 <rylr998Get+0x274>)
 8003c90:	6810      	ldr	r0, [r2, #0]
 8003c92:	6018      	str	r0, [r3, #0]

			break;
 8003c94:	e010      	b.n	8003cb8 <rylr998Get+0x1cc>
		case Rylr998_VER:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(VER) - 1;
 8003c96:	2309      	movs	r3, #9
 8003c98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, VER);
 8003c9c:	f107 030c 	add.w	r3, r7, #12
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7fc fa99 	bl	80001d8 <strlen>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f107 030c 	add.w	r3, r7, #12
 8003cae:	4413      	add	r3, r2
 8003cb0:	4a2c      	ldr	r2, [pc, #176]	; (8003d64 <rylr998Get+0x278>)
 8003cb2:	6810      	ldr	r0, [r2, #0]
 8003cb4:	6018      	str	r0, [r3, #0]

			break;
 8003cb6:	bf00      	nop
	}

	strcat((char*)uartTxBuffer,  CHECK);
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	f7fc fa8b 	bl	80001d8 <strlen>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	f107 030c 	add.w	r3, r7, #12
 8003cca:	4413      	add	r3, r2
 8003ccc:	4926      	ldr	r1, [pc, #152]	; (8003d68 <rylr998Get+0x27c>)
 8003cce:	461a      	mov	r2, r3
 8003cd0:	460b      	mov	r3, r1
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	8013      	strh	r3, [r2, #0]
	strcat((char*)uartTxBuffer,  TERMINATOR);
 8003cd6:	f107 030c 	add.w	r3, r7, #12
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fa7c 	bl	80001d8 <strlen>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f107 030c 	add.w	r3, r7, #12
 8003ce8:	4413      	add	r3, r2
 8003cea:	4a20      	ldr	r2, [pc, #128]	; (8003d6c <rylr998Get+0x280>)
 8003cec:	8811      	ldrh	r1, [r2, #0]
 8003cee:	7892      	ldrb	r2, [r2, #2]
 8003cf0:	8019      	strh	r1, [r3, #0]
 8003cf2:	709a      	strb	r2, [r3, #2]

	ret = HAL_UART_Transmit(&huart1, uartTxBuffer, txPacketSize, 10);
 8003cf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	f107 010c 	add.w	r1, r7, #12
 8003cfe:	230a      	movs	r3, #10
 8003d00:	481b      	ldr	r0, [pc, #108]	; (8003d70 <rylr998Get+0x284>)
 8003d02:	f7fe fb7e 	bl	8002402 <HAL_UART_Transmit>
 8003d06:	4603      	mov	r3, r0
 8003d08:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	memset(hRylr998->rylr998Receiver.rxBuffer, RESET, 20);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f203 130f 	addw	r3, r3, #271	; 0x10f
 8003d12:	2214      	movs	r2, #20
 8003d14:	2100      	movs	r1, #0
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 f982 	bl	8004020 <memset>

	ret = HAL_UART_Receive_IT(&huart1, hRylr998->rylr998Receiver.rxBuffer, rxPacketSize);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f203 130f 	addw	r3, r3, #271	; 0x10f
 8003d22:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d24:	4619      	mov	r1, r3
 8003d26:	4812      	ldr	r0, [pc, #72]	; (8003d70 <rylr998Get+0x284>)
 8003d28:	f7fe fbfd 	bl	8002526 <HAL_UART_Receive_IT>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	return ret;
 8003d32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003d36:	4618      	mov	r0, r3
 8003d38:	3728      	adds	r7, #40	; 0x28
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	08004068 	.word	0x08004068
 8003d44:	080040a4 	.word	0x080040a4
 8003d48:	080040a8 	.word	0x080040a8
 8003d4c:	080040b4 	.word	0x080040b4
 8003d50:	08004070 	.word	0x08004070
 8003d54:	0800407c 	.word	0x0800407c
 8003d58:	08004088 	.word	0x08004088
 8003d5c:	08004094 	.word	0x08004094
 8003d60:	080040bc 	.word	0x080040bc
 8003d64:	080040c0 	.word	0x080040c0
 8003d68:	08004090 	.word	0x08004090
 8003d6c:	0800406c 	.word	0x0800406c
 8003d70:	200000e8 	.word	0x200000e8

08003d74 <rylr998ResponseFind>:
	memcpy(hRylr998->rylr998Transmitter.TxBuffer, uartTxBuffer, packetSize);
	return ret;
}

Rylr998RxCommand_e rylr998ResponseFind(uint8_t* rxBuffer)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	Rylr998RxCommand_e 	ret 					= Rylr998R_NOT_FOUND;
 8003d7c:	2304      	movs	r3, #4
 8003d7e:	73fb      	strb	r3, [r7, #15]
	if(!memcmp(rxBuffer, ADDRESS, 7))
 8003d80:	2207      	movs	r2, #7
 8003d82:	491a      	ldr	r1, [pc, #104]	; (8003dec <rylr998ResponseFind+0x78>)
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f931 	bl	8003fec <memcmp>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d103      	bne.n	8003d98 <rylr998ResponseFind+0x24>
	{
		return ret = Rylr998R_ADDRESS;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
 8003d96:	e024      	b.n	8003de2 <rylr998ResponseFind+0x6e>
	}
	else if(!memcmp(rxBuffer, RCV, 3))
 8003d98:	2203      	movs	r2, #3
 8003d9a:	4915      	ldr	r1, [pc, #84]	; (8003df0 <rylr998ResponseFind+0x7c>)
 8003d9c:	6878      	ldr	r0, [r7, #4]
 8003d9e:	f000 f925 	bl	8003fec <memcmp>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <rylr998ResponseFind+0x3c>
	{
		return ret = Rylr998R_RCV;
 8003da8:	2302      	movs	r3, #2
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	e018      	b.n	8003de2 <rylr998ResponseFind+0x6e>
	}
	else if(!memcmp(rxBuffer, OK, 2))
 8003db0:	2202      	movs	r2, #2
 8003db2:	4910      	ldr	r1, [pc, #64]	; (8003df4 <rylr998ResponseFind+0x80>)
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 f919 	bl	8003fec <memcmp>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <rylr998ResponseFind+0x54>
	{
		return ret = Rylr998R_OK;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	73fb      	strb	r3, [r7, #15]
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	e00c      	b.n	8003de2 <rylr998ResponseFind+0x6e>
	}
	else if(!memcmp(rxBuffer, READY, 5))
 8003dc8:	2205      	movs	r2, #5
 8003dca:	490b      	ldr	r1, [pc, #44]	; (8003df8 <rylr998ResponseFind+0x84>)
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f90d 	bl	8003fec <memcmp>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d103      	bne.n	8003de0 <rylr998ResponseFind+0x6c>
	{
		return ret = Rylr998R_RDY;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	73fb      	strb	r3, [r7, #15]
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	e000      	b.n	8003de2 <rylr998ResponseFind+0x6e>
	}
	return ret;
 8003de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3710      	adds	r7, #16
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	08004070 	.word	0x08004070
 8003df0:	080040c4 	.word	0x080040c4
 8003df4:	080040c8 	.word	0x080040c8
 8003df8:	080040cc 	.word	0x080040cc

08003dfc <rylr998Int2Ascii>:
	}
	return ret;
}

void rylr998Int2Ascii(uint8_t* value)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
	*value += 0x30;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	3330      	adds	r3, #48	; 0x30
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	701a      	strb	r2, [r3, #0]
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <rylr998Ascii2Int>:

void rylr998Ascii2Int(uint8_t* value)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b083      	sub	sp, #12
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
	*value -= 0x30;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	3b30      	subs	r3, #48	; 0x30
 8003e2a:	b2da      	uxtb	r2, r3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	701a      	strb	r2, [r3, #0]
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <rylr998_enable>:

void rylr998_enable(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RYLR998_RST_GPIO_Port, RYLR998_RST_Pin, GPIO_PIN_SET);
 8003e40:	2201      	movs	r2, #1
 8003e42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003e46:	4802      	ldr	r0, [pc, #8]	; (8003e50 <rylr998_enable+0x14>)
 8003e48:	f7fd fe14 	bl	8001a74 <HAL_GPIO_WritePin>
}
 8003e4c:	bf00      	nop
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40020400 	.word	0x40020400

08003e54 <uloraCommunicationTest>:

UloraCommand_e 		uloraPacketDetermine(uint8_t idChar);
Rylr998_Status_t 	uloraChecksumValidate(uint8_t* rxBuffer);

Ulora_Status_t uloraCommunicationTest(uint8_t* payloadBuffer)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b085      	sub	sp, #20
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
	ULoraHandler_t uloraHandler;
	Ulora_Status_t ret = Ulora_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	73fb      	strb	r3, [r7, #15]
	uloraHandler.uloraPacketSize  = ULORA_CONN_COUNT_SIZE;
 8003e60:	2304      	movs	r3, #4
 8003e62:	737b      	strb	r3, [r7, #13]
	uloraHandler.uloraDevicesCount = 1;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73bb      	strb	r3, [r7, #14]

	payloadBuffer[0] = ULORA_CONN_COUNT + '0';
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2232      	movs	r2, #50	; 0x32
 8003e6c:	701a      	strb	r2, [r3, #0]
	payloadBuffer[1] = uloraHandler.uloraPacketSize + '0' ;
 8003e6e:	7b7a      	ldrb	r2, [r7, #13]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3301      	adds	r3, #1
 8003e74:	3230      	adds	r2, #48	; 0x30
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]
	payloadBuffer[2] = uloraHandler.uloraDevicesCount + '0';
 8003e7a:	7bba      	ldrb	r2, [r7, #14]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	3302      	adds	r3, #2
 8003e80:	3230      	adds	r2, #48	; 0x30
 8003e82:	b2d2      	uxtb	r2, r2
 8003e84:	701a      	strb	r2, [r3, #0]
//	payloadBuffer[3] =  uloraPacketChecksum(payloadBuffer,
//											uloraHandler.uloraPacketSize) + '0';
	payloadBuffer[3] = '7';
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	3303      	adds	r3, #3
 8003e8a:	2237      	movs	r2, #55	; 0x37
 8003e8c:	701a      	strb	r2, [r3, #0]
	return ret;
 8003e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <uloraPacketStore>:
		checksum += buffer[i];
	}
	return checksum;
}
uint8_t uloraPacketStore(uint8_t* buffer)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
	UloraCommand_e packeId;
	packeId = uloraPacketDetermine(buffer[0]);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 f829 	bl	8003f00 <uloraPacketDetermine>
 8003eae:	4603      	mov	r3, r0
 8003eb0:	73fb      	strb	r3, [r7, #15]
	switch (packeId)
 8003eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d012      	beq.n	8003ee0 <uloraPacketStore+0x44>
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d000      	beq.n	8003ec0 <uloraPacketStore+0x24>
			break;
		case ULORA_ACK:
			RYLR998_WriteSuccessfulTxFlag(ENABLE);
			break;
		default:
			break;
 8003ebe:	e016      	b.n	8003eee <uloraPacketStore+0x52>
			if(Rylr998_OK == uloraChecksumValidate(buffer))
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 f83e 	bl	8003f42 <uloraChecksumValidate>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10f      	bne.n	8003eec <uloraPacketStore+0x50>
				hUloraProtocol.uloraDevicesCount = buffer[3];
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	78da      	ldrb	r2, [r3, #3]
 8003ed0:	4b09      	ldr	r3, [pc, #36]	; (8003ef8 <uloraPacketStore+0x5c>)
 8003ed2:	709a      	strb	r2, [r3, #2]
				RYLR998_WriteSuccessfulRxFlag(ENABLE);
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <uloraPacketStore+0x60>)
 8003ed6:	7a13      	ldrb	r3, [r2, #8]
 8003ed8:	f043 0302 	orr.w	r3, r3, #2
 8003edc:	7213      	strb	r3, [r2, #8]
			break;
 8003ede:	e005      	b.n	8003eec <uloraPacketStore+0x50>
			RYLR998_WriteSuccessfulTxFlag(ENABLE);
 8003ee0:	4a06      	ldr	r2, [pc, #24]	; (8003efc <uloraPacketStore+0x60>)
 8003ee2:	7a13      	ldrb	r3, [r2, #8]
 8003ee4:	f043 0304 	orr.w	r3, r3, #4
 8003ee8:	7213      	strb	r3, [r2, #8]
			break;
 8003eea:	e000      	b.n	8003eee <uloraPacketStore+0x52>
			break;
 8003eec:	bf00      	nop
	}
	return packeId;
 8003eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3710      	adds	r7, #16
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20000338 	.word	0x20000338
 8003efc:	20000130 	.word	0x20000130

08003f00 <uloraPacketDetermine>:
UloraCommand_e uloraPacketDetermine(uint8_t idChar)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b085      	sub	sp, #20
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	71fb      	strb	r3, [r7, #7]
	UloraCommand_e idScanner = ULORA_UNKNOWN;
 8003f0a:	23ff      	movs	r3, #255	; 0xff
 8003f0c:	73fb      	strb	r3, [r7, #15]
//	rylr998Ascii2Int(&idChar);
	for(idScanner = ULORA_UNKNOWN; idScanner < ULORA_MAX_ID; ++idScanner)
 8003f0e:	23ff      	movs	r3, #255	; 0xff
 8003f10:	73fb      	strb	r3, [r7, #15]
 8003f12:	e008      	b.n	8003f26 <uloraPacketDetermine+0x26>
	{
		if(idScanner == idChar)
 8003f14:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8003f18:	79fb      	ldrb	r3, [r7, #7]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d008      	beq.n	8003f30 <uloraPacketDetermine+0x30>
	for(idScanner = ULORA_UNKNOWN; idScanner < ULORA_MAX_ID; ++idScanner)
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	73fb      	strb	r3, [r7, #15]
 8003f26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	ddf2      	ble.n	8003f14 <uloraPacketDetermine+0x14>
 8003f2e:	e000      	b.n	8003f32 <uloraPacketDetermine+0x32>
		{
			break;
 8003f30:	bf00      	nop
		}
	}
	return idScanner;
 8003f32:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3714      	adds	r7, #20
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr

08003f42 <uloraChecksumValidate>:

Rylr998_Status_t uloraChecksumValidate(uint8_t* rxBuffer)
{
 8003f42:	b480      	push	{r7}
 8003f44:	b085      	sub	sp, #20
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	6078      	str	r0, [r7, #4]
	Rylr998_Status_t ret = Rylr998_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum = 0;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73bb      	strb	r3, [r7, #14]
	uint8_t packetSize = rxBuffer[1] - 1 - '0';
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	3301      	adds	r3, #1
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	3b31      	subs	r3, #49	; 0x31
 8003f5a:	733b      	strb	r3, [r7, #12]
	for(uint8_t i = 0; i < packetSize; ++i)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	737b      	strb	r3, [r7, #13]
 8003f60:	e00b      	b.n	8003f7a <uloraChecksumValidate+0x38>
	{
		checksum += rxBuffer[i] - '0';
 8003f62:	7b7b      	ldrb	r3, [r7, #13]
 8003f64:	687a      	ldr	r2, [r7, #4]
 8003f66:	4413      	add	r3, r2
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	7bbb      	ldrb	r3, [r7, #14]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	3b30      	subs	r3, #48	; 0x30
 8003f72:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < packetSize; ++i)
 8003f74:	7b7b      	ldrb	r3, [r7, #13]
 8003f76:	3301      	adds	r3, #1
 8003f78:	737b      	strb	r3, [r7, #13]
 8003f7a:	7b7a      	ldrb	r2, [r7, #13]
 8003f7c:	7b3b      	ldrb	r3, [r7, #12]
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	d3ef      	bcc.n	8003f62 <uloraChecksumValidate+0x20>
	}
	if(checksum == rxBuffer[3] - '0')
 8003f82:	7bba      	ldrb	r2, [r7, #14]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3303      	adds	r3, #3
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	3b30      	subs	r3, #48	; 0x30
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d101      	bne.n	8003f94 <uloraChecksumValidate+0x52>
	{
		ret = Rylr998_OK;
 8003f90:	2300      	movs	r3, #0
 8003f92:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8003f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <__libc_init_array>:
 8003fa4:	b570      	push	{r4, r5, r6, lr}
 8003fa6:	4e0d      	ldr	r6, [pc, #52]	; (8003fdc <__libc_init_array+0x38>)
 8003fa8:	4c0d      	ldr	r4, [pc, #52]	; (8003fe0 <__libc_init_array+0x3c>)
 8003faa:	1ba4      	subs	r4, r4, r6
 8003fac:	10a4      	asrs	r4, r4, #2
 8003fae:	2500      	movs	r5, #0
 8003fb0:	42a5      	cmp	r5, r4
 8003fb2:	d109      	bne.n	8003fc8 <__libc_init_array+0x24>
 8003fb4:	4e0b      	ldr	r6, [pc, #44]	; (8003fe4 <__libc_init_array+0x40>)
 8003fb6:	4c0c      	ldr	r4, [pc, #48]	; (8003fe8 <__libc_init_array+0x44>)
 8003fb8:	f000 f84a 	bl	8004050 <_init>
 8003fbc:	1ba4      	subs	r4, r4, r6
 8003fbe:	10a4      	asrs	r4, r4, #2
 8003fc0:	2500      	movs	r5, #0
 8003fc2:	42a5      	cmp	r5, r4
 8003fc4:	d105      	bne.n	8003fd2 <__libc_init_array+0x2e>
 8003fc6:	bd70      	pop	{r4, r5, r6, pc}
 8003fc8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fcc:	4798      	blx	r3
 8003fce:	3501      	adds	r5, #1
 8003fd0:	e7ee      	b.n	8003fb0 <__libc_init_array+0xc>
 8003fd2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003fd6:	4798      	blx	r3
 8003fd8:	3501      	adds	r5, #1
 8003fda:	e7f2      	b.n	8003fc2 <__libc_init_array+0x1e>
 8003fdc:	080040fc 	.word	0x080040fc
 8003fe0:	080040fc 	.word	0x080040fc
 8003fe4:	080040fc 	.word	0x080040fc
 8003fe8:	08004100 	.word	0x08004100

08003fec <memcmp>:
 8003fec:	b530      	push	{r4, r5, lr}
 8003fee:	2400      	movs	r4, #0
 8003ff0:	42a2      	cmp	r2, r4
 8003ff2:	d101      	bne.n	8003ff8 <memcmp+0xc>
 8003ff4:	2000      	movs	r0, #0
 8003ff6:	e007      	b.n	8004008 <memcmp+0x1c>
 8003ff8:	5d03      	ldrb	r3, [r0, r4]
 8003ffa:	3401      	adds	r4, #1
 8003ffc:	190d      	adds	r5, r1, r4
 8003ffe:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8004002:	42ab      	cmp	r3, r5
 8004004:	d0f4      	beq.n	8003ff0 <memcmp+0x4>
 8004006:	1b58      	subs	r0, r3, r5
 8004008:	bd30      	pop	{r4, r5, pc}

0800400a <memcpy>:
 800400a:	b510      	push	{r4, lr}
 800400c:	1e43      	subs	r3, r0, #1
 800400e:	440a      	add	r2, r1
 8004010:	4291      	cmp	r1, r2
 8004012:	d100      	bne.n	8004016 <memcpy+0xc>
 8004014:	bd10      	pop	{r4, pc}
 8004016:	f811 4b01 	ldrb.w	r4, [r1], #1
 800401a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800401e:	e7f7      	b.n	8004010 <memcpy+0x6>

08004020 <memset>:
 8004020:	4402      	add	r2, r0
 8004022:	4603      	mov	r3, r0
 8004024:	4293      	cmp	r3, r2
 8004026:	d100      	bne.n	800402a <memset+0xa>
 8004028:	4770      	bx	lr
 800402a:	f803 1b01 	strb.w	r1, [r3], #1
 800402e:	e7f9      	b.n	8004024 <memset+0x4>

08004030 <strcat>:
 8004030:	b510      	push	{r4, lr}
 8004032:	4603      	mov	r3, r0
 8004034:	781a      	ldrb	r2, [r3, #0]
 8004036:	1c5c      	adds	r4, r3, #1
 8004038:	b93a      	cbnz	r2, 800404a <strcat+0x1a>
 800403a:	3b01      	subs	r3, #1
 800403c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004040:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004044:	2a00      	cmp	r2, #0
 8004046:	d1f9      	bne.n	800403c <strcat+0xc>
 8004048:	bd10      	pop	{r4, pc}
 800404a:	4623      	mov	r3, r4
 800404c:	e7f2      	b.n	8004034 <strcat+0x4>
	...

08004050 <_init>:
 8004050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004052:	bf00      	nop
 8004054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004056:	bc08      	pop	{r3}
 8004058:	469e      	mov	lr, r3
 800405a:	4770      	bx	lr

0800405c <_fini>:
 800405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800405e:	bf00      	nop
 8004060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004062:	bc08      	pop	{r3}
 8004064:	469e      	mov	lr, r3
 8004066:	4770      	bx	lr
