
LoRa Transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e0c  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002fa4  08002fa4  00012fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003020  08003020  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003020  08003020  00013020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003028  08003028  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003028  08003028  00013028  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800302c  0800302c  0001302c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003030  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000260  2000000c  0800303c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000026c  0800303c  0002026c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aa17  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001969  00000000  00000000  0002aa53  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000718  00000000  00000000  0002c3c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000650  00000000  00000000  0002cad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001602f  00000000  00000000  0002d128  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006f32  00000000  00000000  00043157  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00085aaf  00000000  00000000  0004a089  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cfb38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c00  00000000  00000000  000cfbb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08002f8c 	.word	0x08002f8c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08002f8c 	.word	0x08002f8c

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b972 	b.w	80004e4 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9e08      	ldr	r6, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	4688      	mov	r8, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14b      	bne.n	80002be <__udivmoddi4+0xa6>
 8000226:	428a      	cmp	r2, r1
 8000228:	4615      	mov	r5, r2
 800022a:	d967      	bls.n	80002fc <__udivmoddi4+0xe4>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b14a      	cbz	r2, 8000246 <__udivmoddi4+0x2e>
 8000232:	f1c2 0720 	rsb	r7, r2, #32
 8000236:	fa01 f302 	lsl.w	r3, r1, r2
 800023a:	fa20 f707 	lsr.w	r7, r0, r7
 800023e:	4095      	lsls	r5, r2
 8000240:	ea47 0803 	orr.w	r8, r7, r3
 8000244:	4094      	lsls	r4, r2
 8000246:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024a:	0c23      	lsrs	r3, r4, #16
 800024c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000250:	fa1f fc85 	uxth.w	ip, r5
 8000254:	fb0e 8817 	mls	r8, lr, r7, r8
 8000258:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800025c:	fb07 f10c 	mul.w	r1, r7, ip
 8000260:	4299      	cmp	r1, r3
 8000262:	d909      	bls.n	8000278 <__udivmoddi4+0x60>
 8000264:	18eb      	adds	r3, r5, r3
 8000266:	f107 30ff 	add.w	r0, r7, #4294967295
 800026a:	f080 811b 	bcs.w	80004a4 <__udivmoddi4+0x28c>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 8118 	bls.w	80004a4 <__udivmoddi4+0x28c>
 8000274:	3f02      	subs	r7, #2
 8000276:	442b      	add	r3, r5
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000280:	fb0e 3310 	mls	r3, lr, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 fc0c 	mul.w	ip, r0, ip
 800028c:	45a4      	cmp	ip, r4
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x8c>
 8000290:	192c      	adds	r4, r5, r4
 8000292:	f100 33ff 	add.w	r3, r0, #4294967295
 8000296:	f080 8107 	bcs.w	80004a8 <__udivmoddi4+0x290>
 800029a:	45a4      	cmp	ip, r4
 800029c:	f240 8104 	bls.w	80004a8 <__udivmoddi4+0x290>
 80002a0:	3802      	subs	r0, #2
 80002a2:	442c      	add	r4, r5
 80002a4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002a8:	eba4 040c 	sub.w	r4, r4, ip
 80002ac:	2700      	movs	r7, #0
 80002ae:	b11e      	cbz	r6, 80002b8 <__udivmoddi4+0xa0>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c6 4300 	strd	r4, r3, [r6]
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xbe>
 80002c2:	2e00      	cmp	r6, #0
 80002c4:	f000 80eb 	beq.w	800049e <__udivmoddi4+0x286>
 80002c8:	2700      	movs	r7, #0
 80002ca:	e9c6 0100 	strd	r0, r1, [r6]
 80002ce:	4638      	mov	r0, r7
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f783 	clz	r7, r3
 80002da:	2f00      	cmp	r7, #0
 80002dc:	d147      	bne.n	800036e <__udivmoddi4+0x156>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd0>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80fa 	bhi.w	80004dc <__udivmoddi4+0x2c4>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4698      	mov	r8, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa0>
 80002f6:	e9c6 4800 	strd	r4, r8, [r6]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa0>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xe8>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 808f 	bne.w	8000428 <__udivmoddi4+0x210>
 800030a:	1b49      	subs	r1, r1, r5
 800030c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000310:	fa1f f885 	uxth.w	r8, r5
 8000314:	2701      	movs	r7, #1
 8000316:	fbb1 fcfe 	udiv	ip, r1, lr
 800031a:	0c23      	lsrs	r3, r4, #16
 800031c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb08 f10c 	mul.w	r1, r8, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x124>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x122>
 8000334:	4299      	cmp	r1, r3
 8000336:	f200 80cd 	bhi.w	80004d4 <__udivmoddi4+0x2bc>
 800033a:	4684      	mov	ip, r0
 800033c:	1a59      	subs	r1, r3, r1
 800033e:	b2a3      	uxth	r3, r4
 8000340:	fbb1 f0fe 	udiv	r0, r1, lr
 8000344:	fb0e 1410 	mls	r4, lr, r0, r1
 8000348:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800034c:	fb08 f800 	mul.w	r8, r8, r0
 8000350:	45a0      	cmp	r8, r4
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x14c>
 8000354:	192c      	adds	r4, r5, r4
 8000356:	f100 33ff 	add.w	r3, r0, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x14a>
 800035c:	45a0      	cmp	r8, r4
 800035e:	f200 80b6 	bhi.w	80004ce <__udivmoddi4+0x2b6>
 8000362:	4618      	mov	r0, r3
 8000364:	eba4 0408 	sub.w	r4, r4, r8
 8000368:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800036c:	e79f      	b.n	80002ae <__udivmoddi4+0x96>
 800036e:	f1c7 0c20 	rsb	ip, r7, #32
 8000372:	40bb      	lsls	r3, r7
 8000374:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000378:	ea4e 0e03 	orr.w	lr, lr, r3
 800037c:	fa01 f407 	lsl.w	r4, r1, r7
 8000380:	fa20 f50c 	lsr.w	r5, r0, ip
 8000384:	fa21 f30c 	lsr.w	r3, r1, ip
 8000388:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800038c:	4325      	orrs	r5, r4
 800038e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000392:	0c2c      	lsrs	r4, r5, #16
 8000394:	fb08 3319 	mls	r3, r8, r9, r3
 8000398:	fa1f fa8e 	uxth.w	sl, lr
 800039c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a0:	fb09 f40a 	mul.w	r4, r9, sl
 80003a4:	429c      	cmp	r4, r3
 80003a6:	fa02 f207 	lsl.w	r2, r2, r7
 80003aa:	fa00 f107 	lsl.w	r1, r0, r7
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b0>
 80003b0:	eb1e 0303 	adds.w	r3, lr, r3
 80003b4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003b8:	f080 8087 	bcs.w	80004ca <__udivmoddi4+0x2b2>
 80003bc:	429c      	cmp	r4, r3
 80003be:	f240 8084 	bls.w	80004ca <__udivmoddi4+0x2b2>
 80003c2:	f1a9 0902 	sub.w	r9, r9, #2
 80003c6:	4473      	add	r3, lr
 80003c8:	1b1b      	subs	r3, r3, r4
 80003ca:	b2ad      	uxth	r5, r5
 80003cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d0:	fb08 3310 	mls	r3, r8, r0, r3
 80003d4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003d8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003dc:	45a2      	cmp	sl, r4
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1da>
 80003e0:	eb1e 0404 	adds.w	r4, lr, r4
 80003e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e8:	d26b      	bcs.n	80004c2 <__udivmoddi4+0x2aa>
 80003ea:	45a2      	cmp	sl, r4
 80003ec:	d969      	bls.n	80004c2 <__udivmoddi4+0x2aa>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4474      	add	r4, lr
 80003f2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003f6:	fba0 8902 	umull	r8, r9, r0, r2
 80003fa:	eba4 040a 	sub.w	r4, r4, sl
 80003fe:	454c      	cmp	r4, r9
 8000400:	46c2      	mov	sl, r8
 8000402:	464b      	mov	r3, r9
 8000404:	d354      	bcc.n	80004b0 <__udivmoddi4+0x298>
 8000406:	d051      	beq.n	80004ac <__udivmoddi4+0x294>
 8000408:	2e00      	cmp	r6, #0
 800040a:	d069      	beq.n	80004e0 <__udivmoddi4+0x2c8>
 800040c:	ebb1 050a 	subs.w	r5, r1, sl
 8000410:	eb64 0403 	sbc.w	r4, r4, r3
 8000414:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000418:	40fd      	lsrs	r5, r7
 800041a:	40fc      	lsrs	r4, r7
 800041c:	ea4c 0505 	orr.w	r5, ip, r5
 8000420:	e9c6 5400 	strd	r5, r4, [r6]
 8000424:	2700      	movs	r7, #0
 8000426:	e747      	b.n	80002b8 <__udivmoddi4+0xa0>
 8000428:	f1c2 0320 	rsb	r3, r2, #32
 800042c:	fa20 f703 	lsr.w	r7, r0, r3
 8000430:	4095      	lsls	r5, r2
 8000432:	fa01 f002 	lsl.w	r0, r1, r2
 8000436:	fa21 f303 	lsr.w	r3, r1, r3
 800043a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800043e:	4338      	orrs	r0, r7
 8000440:	0c01      	lsrs	r1, r0, #16
 8000442:	fbb3 f7fe 	udiv	r7, r3, lr
 8000446:	fa1f f885 	uxth.w	r8, r5
 800044a:	fb0e 3317 	mls	r3, lr, r7, r3
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb07 f308 	mul.w	r3, r7, r8
 8000456:	428b      	cmp	r3, r1
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x256>
 800045e:	1869      	adds	r1, r5, r1
 8000460:	f107 3cff 	add.w	ip, r7, #4294967295
 8000464:	d22f      	bcs.n	80004c6 <__udivmoddi4+0x2ae>
 8000466:	428b      	cmp	r3, r1
 8000468:	d92d      	bls.n	80004c6 <__udivmoddi4+0x2ae>
 800046a:	3f02      	subs	r7, #2
 800046c:	4429      	add	r1, r5
 800046e:	1acb      	subs	r3, r1, r3
 8000470:	b281      	uxth	r1, r0
 8000472:	fbb3 f0fe 	udiv	r0, r3, lr
 8000476:	fb0e 3310 	mls	r3, lr, r0, r3
 800047a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047e:	fb00 f308 	mul.w	r3, r0, r8
 8000482:	428b      	cmp	r3, r1
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x27e>
 8000486:	1869      	adds	r1, r5, r1
 8000488:	f100 3cff 	add.w	ip, r0, #4294967295
 800048c:	d217      	bcs.n	80004be <__udivmoddi4+0x2a6>
 800048e:	428b      	cmp	r3, r1
 8000490:	d915      	bls.n	80004be <__udivmoddi4+0x2a6>
 8000492:	3802      	subs	r0, #2
 8000494:	4429      	add	r1, r5
 8000496:	1ac9      	subs	r1, r1, r3
 8000498:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800049c:	e73b      	b.n	8000316 <__udivmoddi4+0xfe>
 800049e:	4637      	mov	r7, r6
 80004a0:	4630      	mov	r0, r6
 80004a2:	e709      	b.n	80002b8 <__udivmoddi4+0xa0>
 80004a4:	4607      	mov	r7, r0
 80004a6:	e6e7      	b.n	8000278 <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fb      	b.n	80002a4 <__udivmoddi4+0x8c>
 80004ac:	4541      	cmp	r1, r8
 80004ae:	d2ab      	bcs.n	8000408 <__udivmoddi4+0x1f0>
 80004b0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b4:	eb69 020e 	sbc.w	r2, r9, lr
 80004b8:	3801      	subs	r0, #1
 80004ba:	4613      	mov	r3, r2
 80004bc:	e7a4      	b.n	8000408 <__udivmoddi4+0x1f0>
 80004be:	4660      	mov	r0, ip
 80004c0:	e7e9      	b.n	8000496 <__udivmoddi4+0x27e>
 80004c2:	4618      	mov	r0, r3
 80004c4:	e795      	b.n	80003f2 <__udivmoddi4+0x1da>
 80004c6:	4667      	mov	r7, ip
 80004c8:	e7d1      	b.n	800046e <__udivmoddi4+0x256>
 80004ca:	4681      	mov	r9, r0
 80004cc:	e77c      	b.n	80003c8 <__udivmoddi4+0x1b0>
 80004ce:	3802      	subs	r0, #2
 80004d0:	442c      	add	r4, r5
 80004d2:	e747      	b.n	8000364 <__udivmoddi4+0x14c>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	442b      	add	r3, r5
 80004da:	e72f      	b.n	800033c <__udivmoddi4+0x124>
 80004dc:	4638      	mov	r0, r7
 80004de:	e708      	b.n	80002f2 <__udivmoddi4+0xda>
 80004e0:	4637      	mov	r7, r6
 80004e2:	e6e9      	b.n	80002b8 <__udivmoddi4+0xa0>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fa9a 	bl	8000a24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f864 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f8f4 	bl	80006e0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80004f8:	f000 f8c8 	bl	800068c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  rylr998_enable();
 80004fc:	f002 fcc0 	bl	8002e80 <rylr998_enable>
  HAL_Delay(100);
 8000500:	2064      	movs	r0, #100	; 0x64
 8000502:	f000 fb01 	bl	8000b08 <HAL_Delay>
  rylr998Get(&hLoRaModule, Rylr998_ADDRESS);
 8000506:	2103      	movs	r1, #3
 8000508:	482b      	ldr	r0, [pc, #172]	; (80005b8 <main+0xd0>)
 800050a:	f002 fb1f 	bl	8002b4c <rylr998Get>
//  rylr998GetAddress(&hLoRaModule);

  hLoRaModule.rylr998Transmitter.address[0] = '1';
 800050e:	4b2a      	ldr	r3, [pc, #168]	; (80005b8 <main+0xd0>)
 8000510:	2231      	movs	r2, #49	; 0x31
 8000512:	741a      	strb	r2, [r3, #16]
  hLoRaModule.rylr998Transmitter.timer = HAL_GetTick();
 8000514:	f000 faec 	bl	8000af0 <HAL_GetTick>
 8000518:	4602      	mov	r2, r0
 800051a:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <main+0xd0>)
 800051c:	60da      	str	r2, [r3, #12]
  while (1)
  {

//	  HAL_Delay(1000);
//	  rylr998GetAddress(&hLoRaModule);
	  if(RYLR998_ReadInterruptFlag())
 800051e:	4b26      	ldr	r3, [pc, #152]	; (80005b8 <main+0xd0>)
 8000520:	789b      	ldrb	r3, [r3, #2]
 8000522:	f003 0301 	and.w	r3, r3, #1
 8000526:	b2db      	uxtb	r3, r3
 8000528:	2b00      	cmp	r3, #0
 800052a:	d007      	beq.n	800053c <main+0x54>
	  {
		  RYLR998_WirteInterruptFlag(DISABLE);
 800052c:	4a22      	ldr	r2, [pc, #136]	; (80005b8 <main+0xd0>)
 800052e:	7893      	ldrb	r3, [r2, #2]
 8000530:	f36f 0300 	bfc	r3, #0, #1
 8000534:	7093      	strb	r3, [r2, #2]

		  rylr998ReceivePacketParser(&hLoRaModule);
 8000536:	4820      	ldr	r0, [pc, #128]	; (80005b8 <main+0xd0>)
 8000538:	f002 faaa 	bl	8002a90 <rylr998ReceivePacketParser>
	  }
	  if(HAL_GetTick() - hLoRaModule.rylr998Transmitter.timer >= 1000)
 800053c:	f000 fad8 	bl	8000af0 <HAL_GetTick>
 8000540:	4602      	mov	r2, r0
 8000542:	4b1d      	ldr	r3, [pc, #116]	; (80005b8 <main+0xd0>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	1ad3      	subs	r3, r2, r3
 8000548:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800054c:	d3e7      	bcc.n	800051e <main+0x36>
	  {
		  hLoRaModule.rylr998Transmitter.timer = HAL_GetTick();
 800054e:	f000 facf 	bl	8000af0 <HAL_GetTick>
 8000552:	4602      	mov	r2, r0
 8000554:	4b18      	ldr	r3, [pc, #96]	; (80005b8 <main+0xd0>)
 8000556:	60da      	str	r2, [r3, #12]

		  rylr998Send(&hLoRaModule, ULORA_CONN_COUNT);
 8000558:	2102      	movs	r1, #2
 800055a:	4817      	ldr	r0, [pc, #92]	; (80005b8 <main+0xd0>)
 800055c:	f002 f9c0 	bl	80028e0 <rylr998Send>

		  HAL_Delay(10);
 8000560:	200a      	movs	r0, #10
 8000562:	f000 fad1 	bl	8000b08 <HAL_Delay>
		  rylr998Get(&hLoRaModule, Rylr998_SEND);
 8000566:	2106      	movs	r1, #6
 8000568:	4813      	ldr	r0, [pc, #76]	; (80005b8 <main+0xd0>)
 800056a:	f002 faef 	bl	8002b4c <rylr998Get>


		  HAL_Delay(10);
 800056e:	200a      	movs	r0, #10
 8000570:	f000 faca 	bl	8000b08 <HAL_Delay>
		  rylr998Get(&hLoRaModule, Rylr998_PARAMETER);
 8000574:	2101      	movs	r1, #1
 8000576:	4810      	ldr	r0, [pc, #64]	; (80005b8 <main+0xd0>)
 8000578:	f002 fae8 	bl	8002b4c <rylr998Get>

		  HAL_Delay(10);
 800057c:	200a      	movs	r0, #10
 800057e:	f000 fac3 	bl	8000b08 <HAL_Delay>
		  rylr998Get(&hLoRaModule, Rylr998_NETWORKID);
 8000582:	2104      	movs	r1, #4
 8000584:	480c      	ldr	r0, [pc, #48]	; (80005b8 <main+0xd0>)
 8000586:	f002 fae1 	bl	8002b4c <rylr998Get>

		  HAL_Delay(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f000 fabc 	bl	8000b08 <HAL_Delay>
		  rylr998Get(&hLoRaModule, Rylr998_CRFOP);
 8000590:	2105      	movs	r1, #5
 8000592:	4809      	ldr	r0, [pc, #36]	; (80005b8 <main+0xd0>)
 8000594:	f002 fada 	bl	8002b4c <rylr998Get>

		  HAL_Delay(10);
 8000598:	200a      	movs	r0, #10
 800059a:	f000 fab5 	bl	8000b08 <HAL_Delay>
		  rylr998Get(&hLoRaModule, Rylr998_BAND);
 800059e:	2102      	movs	r1, #2
 80005a0:	4805      	ldr	r0, [pc, #20]	; (80005b8 <main+0xd0>)
 80005a2:	f002 fad3 	bl	8002b4c <rylr998Get>

		  HAL_Delay(10);
 80005a6:	200a      	movs	r0, #10
 80005a8:	f000 faae 	bl	8000b08 <HAL_Delay>
		  rylr998Get(&hLoRaModule, Rylr998_BOUDRATE);
 80005ac:	2100      	movs	r1, #0
 80005ae:	4802      	ldr	r0, [pc, #8]	; (80005b8 <main+0xd0>)
 80005b0:	f002 facc 	bl	8002b4c <rylr998Get>
	  if(RYLR998_ReadInterruptFlag())
 80005b4:	e7b3      	b.n	800051e <main+0x36>
 80005b6:	bf00      	nop
 80005b8:	2000006c 	.word	0x2000006c

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	2230      	movs	r2, #48	; 0x30
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f002 fcc6 	bl	8002f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	f107 030c 	add.w	r3, r7, #12
 80005d4:	2200      	movs	r2, #0
 80005d6:	601a      	str	r2, [r3, #0]
 80005d8:	605a      	str	r2, [r3, #4]
 80005da:	609a      	str	r2, [r3, #8]
 80005dc:	60da      	str	r2, [r3, #12]
 80005de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e0:	2300      	movs	r3, #0
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	4b27      	ldr	r3, [pc, #156]	; (8000684 <SystemClock_Config+0xc8>)
 80005e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e8:	4a26      	ldr	r2, [pc, #152]	; (8000684 <SystemClock_Config+0xc8>)
 80005ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005ee:	6413      	str	r3, [r2, #64]	; 0x40
 80005f0:	4b24      	ldr	r3, [pc, #144]	; (8000684 <SystemClock_Config+0xc8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f8:	60bb      	str	r3, [r7, #8]
 80005fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b21      	ldr	r3, [pc, #132]	; (8000688 <SystemClock_Config+0xcc>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a20      	ldr	r2, [pc, #128]	; (8000688 <SystemClock_Config+0xcc>)
 8000606:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800060a:	6013      	str	r3, [r2, #0]
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <SystemClock_Config+0xcc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000618:	2301      	movs	r3, #1
 800061a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800061c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000626:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 800062c:	230c      	movs	r3, #12
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000630:	2360      	movs	r3, #96	; 0x60
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063c:	f107 0320 	add.w	r3, r7, #32
 8000640:	4618      	mov	r0, r3
 8000642:	f000 fd77 	bl	8001134 <HAL_RCC_OscConfig>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800064c:	f000 f8ea 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000650:	230f      	movs	r3, #15
 8000652:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000654:	2302      	movs	r3, #2
 8000656:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000660:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000666:	f107 030c 	add.w	r3, r7, #12
 800066a:	2103      	movs	r1, #3
 800066c:	4618      	mov	r0, r3
 800066e:	f000 ffd1 	bl	8001614 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000678:	f000 f8d4 	bl	8000824 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3750      	adds	r7, #80	; 0x50
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40023800 	.word	0x40023800
 8000688:	40007000 	.word	0x40007000

0800068c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000690:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000692:	4a12      	ldr	r2, [pc, #72]	; (80006dc <MX_USART1_UART_Init+0x50>)
 8000694:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000696:	4b10      	ldr	r3, [pc, #64]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 8000698:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800069c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a4:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006b0:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b2:	220c      	movs	r2, #12
 80006b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b6:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c2:	4805      	ldr	r0, [pc, #20]	; (80006d8 <MX_USART1_UART_Init+0x4c>)
 80006c4:	f001 f972 	bl	80019ac <HAL_UART_Init>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ce:	f000 f8a9 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000028 	.word	0x20000028
 80006dc:	40011000 	.word	0x40011000

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b3c      	ldr	r3, [pc, #240]	; (80007ec <MX_GPIO_Init+0x10c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	4a3b      	ldr	r2, [pc, #236]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000700:	f043 0304 	orr.w	r3, r3, #4
 8000704:	6313      	str	r3, [r2, #48]	; 0x30
 8000706:	4b39      	ldr	r3, [pc, #228]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070a:	f003 0304 	and.w	r3, r3, #4
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b35      	ldr	r3, [pc, #212]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a34      	ldr	r2, [pc, #208]	; (80007ec <MX_GPIO_Init+0x10c>)
 800071c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b32      	ldr	r3, [pc, #200]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b2e      	ldr	r3, [pc, #184]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a2d      	ldr	r2, [pc, #180]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b2b      	ldr	r3, [pc, #172]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b27      	ldr	r3, [pc, #156]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a26      	ldr	r2, [pc, #152]	; (80007ec <MX_GPIO_Init+0x10c>)
 8000754:	f043 0302 	orr.w	r3, r3, #2
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b24      	ldr	r3, [pc, #144]	; (80007ec <MX_GPIO_Init+0x10c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0302 	and.w	r3, r3, #2
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800076c:	4820      	ldr	r0, [pc, #128]	; (80007f0 <MX_GPIO_Init+0x110>)
 800076e:	f000 fca3 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RYLR998_RST_GPIO_Port, RYLR998_RST_Pin, GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <MX_GPIO_Init+0x114>)
 800077a:	f000 fc9d 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800077e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000782:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000784:	2301      	movs	r3, #1
 8000786:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000788:	2300      	movs	r3, #0
 800078a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	2300      	movs	r3, #0
 800078e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8000790:	f107 0314 	add.w	r3, r7, #20
 8000794:	4619      	mov	r1, r3
 8000796:	4816      	ldr	r0, [pc, #88]	; (80007f0 <MX_GPIO_Init+0x110>)
 8000798:	f000 fb0c 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800079c:	2301      	movs	r3, #1
 800079e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007a0:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <MX_GPIO_Init+0x118>)
 80007a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007a4:	2301      	movs	r3, #1
 80007a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80007a8:	f107 0314 	add.w	r3, r7, #20
 80007ac:	4619      	mov	r1, r3
 80007ae:	4813      	ldr	r0, [pc, #76]	; (80007fc <MX_GPIO_Init+0x11c>)
 80007b0:	f000 fb00 	bl	8000db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RYLR998_RST_Pin */
  GPIO_InitStruct.Pin = RYLR998_RST_Pin;
 80007b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80007b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ba:	2301      	movs	r3, #1
 80007bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2300      	movs	r3, #0
 80007c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RYLR998_RST_GPIO_Port, &GPIO_InitStruct);
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	4619      	mov	r1, r3
 80007cc:	4809      	ldr	r0, [pc, #36]	; (80007f4 <MX_GPIO_Init+0x114>)
 80007ce:	f000 faf1 	bl	8000db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2100      	movs	r1, #0
 80007d6:	2006      	movs	r0, #6
 80007d8:	f000 fa93 	bl	8000d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007dc:	2006      	movs	r0, #6
 80007de:	f000 faac 	bl	8000d3a <HAL_NVIC_EnableIRQ>

}
 80007e2:	bf00      	nop
 80007e4:	3728      	adds	r7, #40	; 0x28
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40023800 	.word	0x40023800
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020400 	.word	0x40020400
 80007f8:	10210000 	.word	0x10210000
 80007fc:	40020000 	.word	0x40020000

08000800 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000800:	b480      	push	{r7}
 8000802:	b083      	sub	sp, #12
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	 RYLR998_WirteInterruptFlag(ENABLE);
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <HAL_UART_RxCpltCallback+0x20>)
 800080a:	7893      	ldrb	r3, [r2, #2]
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	7093      	strb	r3, [r2, #2]
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8000812:	bf00      	nop
 8000814:	370c      	adds	r7, #12
 8000816:	46bd      	mov	sp, r7
 8000818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop
 8000820:	2000006c 	.word	0x2000006c

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	607b      	str	r3, [r7, #4]
 800083e:	4b10      	ldr	r3, [pc, #64]	; (8000880 <HAL_MspInit+0x4c>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	4a0f      	ldr	r2, [pc, #60]	; (8000880 <HAL_MspInit+0x4c>)
 8000844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000848:	6453      	str	r3, [r2, #68]	; 0x44
 800084a:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800084e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	603b      	str	r3, [r7, #0]
 800085a:	4b09      	ldr	r3, [pc, #36]	; (8000880 <HAL_MspInit+0x4c>)
 800085c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085e:	4a08      	ldr	r2, [pc, #32]	; (8000880 <HAL_MspInit+0x4c>)
 8000860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000864:	6413      	str	r3, [r2, #64]	; 0x40
 8000866:	4b06      	ldr	r3, [pc, #24]	; (8000880 <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000872:	bf00      	nop
 8000874:	370c      	adds	r7, #12
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr
 800087e:	bf00      	nop
 8000880:	40023800 	.word	0x40023800

08000884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08a      	sub	sp, #40	; 0x28
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088c:	f107 0314 	add.w	r3, r7, #20
 8000890:	2200      	movs	r2, #0
 8000892:	601a      	str	r2, [r3, #0]
 8000894:	605a      	str	r2, [r3, #4]
 8000896:	609a      	str	r2, [r3, #8]
 8000898:	60da      	str	r2, [r3, #12]
 800089a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a1d      	ldr	r2, [pc, #116]	; (8000918 <HAL_UART_MspInit+0x94>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d134      	bne.n	8000910 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
 80008aa:	4b1c      	ldr	r3, [pc, #112]	; (800091c <HAL_UART_MspInit+0x98>)
 80008ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ae:	4a1b      	ldr	r2, [pc, #108]	; (800091c <HAL_UART_MspInit+0x98>)
 80008b0:	f043 0310 	orr.w	r3, r3, #16
 80008b4:	6453      	str	r3, [r2, #68]	; 0x44
 80008b6:	4b19      	ldr	r3, [pc, #100]	; (800091c <HAL_UART_MspInit+0x98>)
 80008b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ba:	f003 0310 	and.w	r3, r3, #16
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60fb      	str	r3, [r7, #12]
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <HAL_UART_MspInit+0x98>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a14      	ldr	r2, [pc, #80]	; (800091c <HAL_UART_MspInit+0x98>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <HAL_UART_MspInit+0x98>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80008de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80008f0:	2307      	movs	r3, #7
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4809      	ldr	r0, [pc, #36]	; (8000920 <HAL_UART_MspInit+0x9c>)
 80008fc:	f000 fa5a 	bl	8000db4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000900:	2200      	movs	r2, #0
 8000902:	2100      	movs	r1, #0
 8000904:	2025      	movs	r0, #37	; 0x25
 8000906:	f000 f9fc 	bl	8000d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800090a:	2025      	movs	r0, #37	; 0x25
 800090c:	f000 fa15 	bl	8000d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	; 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40011000 	.word	0x40011000
 800091c:	40023800 	.word	0x40023800
 8000920:	40020000 	.word	0x40020000

08000924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000928:	bf00      	nop
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f8a6 	bl	8000ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000984:	2001      	movs	r0, #1
 8000986:	f000 fbb1 	bl	80010ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	RYLR998_WirteInterruptFlag(ENABLE);

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <USART1_IRQHandler+0x10>)
 8000996:	f001 f945 	bl	8001c24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000028 	.word	0x20000028

080009a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <SystemInit+0x28>)
 80009aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ae:	4a07      	ldr	r2, [pc, #28]	; (80009cc <SystemInit+0x28>)
 80009b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80009b8:	4b04      	ldr	r3, [pc, #16]	; (80009cc <SystemInit+0x28>)
 80009ba:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80009be:	609a      	str	r2, [r3, #8]
#endif
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	e000ed00 	.word	0xe000ed00

080009d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a08 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80009d4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80009d6:	e003      	b.n	80009e0 <LoopCopyDataInit>

080009d8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80009da:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80009dc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80009de:	3104      	adds	r1, #4

080009e0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80009e0:	480b      	ldr	r0, [pc, #44]	; (8000a10 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80009e2:	4b0c      	ldr	r3, [pc, #48]	; (8000a14 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80009e4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80009e6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80009e8:	d3f6      	bcc.n	80009d8 <CopyDataInit>
  ldr  r2, =_sbss
 80009ea:	4a0b      	ldr	r2, [pc, #44]	; (8000a18 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80009ec:	e002      	b.n	80009f4 <LoopFillZerobss>

080009ee <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80009ee:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80009f0:	f842 3b04 	str.w	r3, [r2], #4

080009f4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80009f4:	4b09      	ldr	r3, [pc, #36]	; (8000a1c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80009f6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80009f8:	d3f9      	bcc.n	80009ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80009fa:	f7ff ffd3 	bl	80009a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009fe:	f002 fa6f 	bl	8002ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a02:	f7ff fd71 	bl	80004e8 <main>
  bx  lr    
 8000a06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a08:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000a0c:	08003030 	.word	0x08003030
  ldr  r0, =_sdata
 8000a10:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000a14:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000a18:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000a1c:	2000026c 	.word	0x2000026c

08000a20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a20:	e7fe      	b.n	8000a20 <ADC_IRQHandler>
	...

08000a24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <HAL_Init+0x40>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a0d      	ldr	r2, [pc, #52]	; (8000a64 <HAL_Init+0x40>)
 8000a2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a34:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <HAL_Init+0x40>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <HAL_Init+0x40>)
 8000a3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <HAL_Init+0x40>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a07      	ldr	r2, [pc, #28]	; (8000a64 <HAL_Init+0x40>)
 8000a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a4c:	2003      	movs	r0, #3
 8000a4e:	f000 f94d 	bl	8000cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a52:	2000      	movs	r0, #0
 8000a54:	f000 f808 	bl	8000a68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a58:	f7ff feec 	bl	8000834 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023c00 	.word	0x40023c00

08000a68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a70:	4b12      	ldr	r3, [pc, #72]	; (8000abc <HAL_InitTick+0x54>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <HAL_InitTick+0x58>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	f000 f965 	bl	8000d56 <HAL_SYSTICK_Config>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e00e      	b.n	8000ab4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	2b0f      	cmp	r3, #15
 8000a9a:	d80a      	bhi.n	8000ab2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	6879      	ldr	r1, [r7, #4]
 8000aa0:	f04f 30ff 	mov.w	r0, #4294967295
 8000aa4:	f000 f92d 	bl	8000d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa8:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_InitTick+0x5c>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	e000      	b.n	8000ab4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ab2:	2301      	movs	r3, #1
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3708      	adds	r7, #8
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bd80      	pop	{r7, pc}
 8000abc:	20000000 	.word	0x20000000
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_IncTick+0x20>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <HAL_IncTick+0x24>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	4a04      	ldr	r2, [pc, #16]	; (8000aec <HAL_IncTick+0x24>)
 8000ada:	6013      	str	r3, [r2, #0]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	20000008 	.word	0x20000008
 8000aec:	20000068 	.word	0x20000068

08000af0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0
  return uwTick;
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <HAL_GetTick+0x14>)
 8000af6:	681b      	ldr	r3, [r3, #0]
}
 8000af8:	4618      	mov	r0, r3
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000068 	.word	0x20000068

08000b08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b10:	f7ff ffee 	bl	8000af0 <HAL_GetTick>
 8000b14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b20:	d005      	beq.n	8000b2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_Delay+0x40>)
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	461a      	mov	r2, r3
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b2e:	bf00      	nop
 8000b30:	f7ff ffde 	bl	8000af0 <HAL_GetTick>
 8000b34:	4602      	mov	r2, r0
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	68fa      	ldr	r2, [r7, #12]
 8000b3c:	429a      	cmp	r2, r3
 8000b3e:	d8f7      	bhi.n	8000b30 <HAL_Delay+0x28>
  {
  }
}
 8000b40:	bf00      	nop
 8000b42:	3710      	adds	r7, #16
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000008 	.word	0x20000008

08000b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	; (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	; (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	; (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	; (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	; (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	; 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
         );
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	; 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cb8:	d301      	bcc.n	8000cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cba:	2301      	movs	r3, #1
 8000cbc:	e00f      	b.n	8000cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <SysTick_Config+0x40>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3b01      	subs	r3, #1
 8000cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cc6:	210f      	movs	r1, #15
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ccc:	f7ff ff8e 	bl	8000bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cd6:	4b04      	ldr	r3, [pc, #16]	; (8000ce8 <SysTick_Config+0x40>)
 8000cd8:	2207      	movs	r2, #7
 8000cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	e000e010 	.word	0xe000e010

08000cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cf4:	6878      	ldr	r0, [r7, #4]
 8000cf6:	f7ff ff29 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cfa:	bf00      	nop
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}

08000d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d02:	b580      	push	{r7, lr}
 8000d04:	b086      	sub	sp, #24
 8000d06:	af00      	add	r7, sp, #0
 8000d08:	4603      	mov	r3, r0
 8000d0a:	60b9      	str	r1, [r7, #8]
 8000d0c:	607a      	str	r2, [r7, #4]
 8000d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d14:	f7ff ff3e 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d1a:	687a      	ldr	r2, [r7, #4]
 8000d1c:	68b9      	ldr	r1, [r7, #8]
 8000d1e:	6978      	ldr	r0, [r7, #20]
 8000d20:	f7ff ff8e 	bl	8000c40 <NVIC_EncodePriority>
 8000d24:	4602      	mov	r2, r0
 8000d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d2a:	4611      	mov	r1, r2
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff5d 	bl	8000bec <__NVIC_SetPriority>
}
 8000d32:	bf00      	nop
 8000d34:	3718      	adds	r7, #24
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b082      	sub	sp, #8
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f7ff ff31 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d4e:	bf00      	nop
 8000d50:	3708      	adds	r7, #8
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d56:	b580      	push	{r7, lr}
 8000d58:	b082      	sub	sp, #8
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d5e:	6878      	ldr	r0, [r7, #4]
 8000d60:	f7ff ffa2 	bl	8000ca8 <SysTick_Config>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}

08000d6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d004      	beq.n	8000d8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2280      	movs	r2, #128	; 0x80
 8000d86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	e00c      	b.n	8000da6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	2205      	movs	r2, #5
 8000d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f022 0201 	bic.w	r2, r2, #1
 8000da2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000da4:	2300      	movs	r3, #0
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	370c      	adds	r7, #12
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b089      	sub	sp, #36	; 0x24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e159      	b.n	8001084 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	4013      	ands	r3, r2
 8000de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	429a      	cmp	r2, r3
 8000dea:	f040 8148 	bne.w	800107e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b01      	cmp	r3, #1
 8000df4:	d00b      	beq.n	8000e0e <HAL_GPIO_Init+0x5a>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d007      	beq.n	8000e0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e02:	2b11      	cmp	r3, #17
 8000e04:	d003      	beq.n	8000e0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b12      	cmp	r3, #18
 8000e0c:	d130      	bne.n	8000e70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	2203      	movs	r2, #3
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	68da      	ldr	r2, [r3, #12]
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	4313      	orrs	r3, r2
 8000e36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e44:	2201      	movs	r2, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	091b      	lsrs	r3, r3, #4
 8000e5a:	f003 0201 	and.w	r2, r3, #1
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	fa02 f303 	lsl.w	r3, r2, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	005b      	lsls	r3, r3, #1
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	005b      	lsls	r3, r3, #1
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_GPIO_Init+0xfc>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	2b12      	cmp	r3, #18
 8000eae:	d123      	bne.n	8000ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	08da      	lsrs	r2, r3, #3
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	3208      	adds	r2, #8
 8000eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	f003 0307 	and.w	r3, r3, #7
 8000ec4:	009b      	lsls	r3, r3, #2
 8000ec6:	220f      	movs	r2, #15
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	691a      	ldr	r2, [r3, #16]
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f003 0307 	and.w	r3, r3, #7
 8000ede:	009b      	lsls	r3, r3, #2
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	08da      	lsrs	r2, r3, #3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3208      	adds	r2, #8
 8000ef2:	69b9      	ldr	r1, [r7, #24]
 8000ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	005b      	lsls	r3, r3, #1
 8000f02:	2203      	movs	r2, #3
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f003 0203 	and.w	r2, r3, #3
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	005b      	lsls	r3, r3, #1
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f000 80a2 	beq.w	800107e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b56      	ldr	r3, [pc, #344]	; (8001098 <HAL_GPIO_Init+0x2e4>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_GPIO_Init+0x2e4>)
 8000f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b53      	ldr	r3, [pc, #332]	; (8001098 <HAL_GPIO_Init+0x2e4>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f56:	4a51      	ldr	r2, [pc, #324]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	220f      	movs	r2, #15
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43db      	mvns	r3, r3
 8000f74:	69ba      	ldr	r2, [r7, #24]
 8000f76:	4013      	ands	r3, r2
 8000f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a48      	ldr	r2, [pc, #288]	; (80010a0 <HAL_GPIO_Init+0x2ec>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d019      	beq.n	8000fb6 <HAL_GPIO_Init+0x202>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a47      	ldr	r2, [pc, #284]	; (80010a4 <HAL_GPIO_Init+0x2f0>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d013      	beq.n	8000fb2 <HAL_GPIO_Init+0x1fe>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_GPIO_Init+0x2f4>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d00d      	beq.n	8000fae <HAL_GPIO_Init+0x1fa>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a45      	ldr	r2, [pc, #276]	; (80010ac <HAL_GPIO_Init+0x2f8>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d007      	beq.n	8000faa <HAL_GPIO_Init+0x1f6>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a44      	ldr	r2, [pc, #272]	; (80010b0 <HAL_GPIO_Init+0x2fc>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d101      	bne.n	8000fa6 <HAL_GPIO_Init+0x1f2>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e008      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fa6:	2307      	movs	r3, #7
 8000fa8:	e006      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000faa:	2303      	movs	r3, #3
 8000fac:	e004      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fae:	2302      	movs	r3, #2
 8000fb0:	e002      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <HAL_GPIO_Init+0x204>
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	69fa      	ldr	r2, [r7, #28]
 8000fba:	f002 0203 	and.w	r2, r2, #3
 8000fbe:	0092      	lsls	r2, r2, #2
 8000fc0:	4093      	lsls	r3, r2
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc8:	4934      	ldr	r1, [pc, #208]	; (800109c <HAL_GPIO_Init+0x2e8>)
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	089b      	lsrs	r3, r3, #2
 8000fce:	3302      	adds	r3, #2
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd6:	4b37      	ldr	r3, [pc, #220]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	43db      	mvns	r3, r3
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ffa:	4a2e      	ldr	r2, [pc, #184]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	43db      	mvns	r3, r3
 800100a:	69ba      	ldr	r2, [r7, #24]
 800100c:	4013      	ands	r3, r2
 800100e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001024:	4a23      	ldr	r2, [pc, #140]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8001026:	69bb      	ldr	r3, [r7, #24]
 8001028:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102a:	4b22      	ldr	r3, [pc, #136]	; (80010b4 <HAL_GPIO_Init+0x300>)
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	43db      	mvns	r3, r3
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	4013      	ands	r3, r2
 8001038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d003      	beq.n	800104e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	4313      	orrs	r3, r2
 800104c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800104e:	4a19      	ldr	r2, [pc, #100]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001054:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <HAL_GPIO_Init+0x300>)
 8001056:	68db      	ldr	r3, [r3, #12]
 8001058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106c:	2b00      	cmp	r3, #0
 800106e:	d003      	beq.n	8001078 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001070:	69ba      	ldr	r2, [r7, #24]
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <HAL_GPIO_Init+0x300>)
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	3301      	adds	r3, #1
 8001082:	61fb      	str	r3, [r7, #28]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	2b0f      	cmp	r3, #15
 8001088:	f67f aea2 	bls.w	8000dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800108c:	bf00      	nop
 800108e:	3724      	adds	r7, #36	; 0x24
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80010f6:	4b08      	ldr	r3, [pc, #32]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80010f8:	695a      	ldr	r2, [r3, #20]
 80010fa:	88fb      	ldrh	r3, [r7, #6]
 80010fc:	4013      	ands	r3, r2
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d006      	beq.n	8001110 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001102:	4a05      	ldr	r2, [pc, #20]	; (8001118 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001108:	88fb      	ldrh	r3, [r7, #6]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 f806 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40013c00 	.word	0x40013c00

0800111c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001126:	bf00      	nop
 8001128:	370c      	adds	r7, #12
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr
	...

08001134 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d101      	bne.n	8001146 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001142:	2301      	movs	r3, #1
 8001144:	e25b      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d075      	beq.n	800123e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001152:	4ba3      	ldr	r3, [pc, #652]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	f003 030c 	and.w	r3, r3, #12
 800115a:	2b04      	cmp	r3, #4
 800115c:	d00c      	beq.n	8001178 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800115e:	4ba0      	ldr	r3, [pc, #640]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001166:	2b08      	cmp	r3, #8
 8001168:	d112      	bne.n	8001190 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800116a:	4b9d      	ldr	r3, [pc, #628]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001172:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001176:	d10b      	bne.n	8001190 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	4b99      	ldr	r3, [pc, #612]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d05b      	beq.n	800123c <HAL_RCC_OscConfig+0x108>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d157      	bne.n	800123c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e236      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001198:	d106      	bne.n	80011a8 <HAL_RCC_OscConfig+0x74>
 800119a:	4b91      	ldr	r3, [pc, #580]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a90      	ldr	r2, [pc, #576]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011a4:	6013      	str	r3, [r2, #0]
 80011a6:	e01d      	b.n	80011e4 <HAL_RCC_OscConfig+0xb0>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011b0:	d10c      	bne.n	80011cc <HAL_RCC_OscConfig+0x98>
 80011b2:	4b8b      	ldr	r3, [pc, #556]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a8a      	ldr	r2, [pc, #552]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	4a87      	ldr	r2, [pc, #540]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011c8:	6013      	str	r3, [r2, #0]
 80011ca:	e00b      	b.n	80011e4 <HAL_RCC_OscConfig+0xb0>
 80011cc:	4b84      	ldr	r3, [pc, #528]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a83      	ldr	r2, [pc, #524]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a80      	ldr	r2, [pc, #512]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d013      	beq.n	8001214 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ec:	f7ff fc80 	bl	8000af0 <HAL_GetTick>
 80011f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	e008      	b.n	8001206 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f4:	f7ff fc7c 	bl	8000af0 <HAL_GetTick>
 80011f8:	4602      	mov	r2, r0
 80011fa:	693b      	ldr	r3, [r7, #16]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	2b64      	cmp	r3, #100	; 0x64
 8001200:	d901      	bls.n	8001206 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001202:	2303      	movs	r3, #3
 8001204:	e1fb      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001206:	4b76      	ldr	r3, [pc, #472]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d0f0      	beq.n	80011f4 <HAL_RCC_OscConfig+0xc0>
 8001212:	e014      	b.n	800123e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001214:	f7ff fc6c 	bl	8000af0 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800121c:	f7ff fc68 	bl	8000af0 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e1e7      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800122e:	4b6c      	ldr	r3, [pc, #432]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0xe8>
 800123a:	e000      	b.n	800123e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800123c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d063      	beq.n	8001312 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800124a:	4b65      	ldr	r3, [pc, #404]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f003 030c 	and.w	r3, r3, #12
 8001252:	2b00      	cmp	r3, #0
 8001254:	d00b      	beq.n	800126e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001256:	4b62      	ldr	r3, [pc, #392]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800125e:	2b08      	cmp	r3, #8
 8001260:	d11c      	bne.n	800129c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001262:	4b5f      	ldr	r3, [pc, #380]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d116      	bne.n	800129c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800126e:	4b5c      	ldr	r3, [pc, #368]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d005      	beq.n	8001286 <HAL_RCC_OscConfig+0x152>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	68db      	ldr	r3, [r3, #12]
 800127e:	2b01      	cmp	r3, #1
 8001280:	d001      	beq.n	8001286 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e1bb      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001286:	4b56      	ldr	r3, [pc, #344]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	691b      	ldr	r3, [r3, #16]
 8001292:	00db      	lsls	r3, r3, #3
 8001294:	4952      	ldr	r1, [pc, #328]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001296:	4313      	orrs	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800129a:	e03a      	b.n	8001312 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d020      	beq.n	80012e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012a4:	4b4f      	ldr	r3, [pc, #316]	; (80013e4 <HAL_RCC_OscConfig+0x2b0>)
 80012a6:	2201      	movs	r2, #1
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012aa:	f7ff fc21 	bl	8000af0 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012b2:	f7ff fc1d 	bl	8000af0 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e19c      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012c4:	4b46      	ldr	r3, [pc, #280]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0302 	and.w	r3, r3, #2
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d0f0      	beq.n	80012b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012d0:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	691b      	ldr	r3, [r3, #16]
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4940      	ldr	r1, [pc, #256]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
 80012e4:	e015      	b.n	8001312 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012e6:	4b3f      	ldr	r3, [pc, #252]	; (80013e4 <HAL_RCC_OscConfig+0x2b0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc00 	bl	8000af0 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f4:	f7ff fbfc 	bl	8000af0 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e17b      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001306:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d030      	beq.n	8001380 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d016      	beq.n	8001354 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001326:	4b30      	ldr	r3, [pc, #192]	; (80013e8 <HAL_RCC_OscConfig+0x2b4>)
 8001328:	2201      	movs	r2, #1
 800132a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800132c:	f7ff fbe0 	bl	8000af0 <HAL_GetTick>
 8001330:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001332:	e008      	b.n	8001346 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001334:	f7ff fbdc 	bl	8000af0 <HAL_GetTick>
 8001338:	4602      	mov	r2, r0
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	2b02      	cmp	r3, #2
 8001340:	d901      	bls.n	8001346 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001342:	2303      	movs	r3, #3
 8001344:	e15b      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001346:	4b26      	ldr	r3, [pc, #152]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001348:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d0f0      	beq.n	8001334 <HAL_RCC_OscConfig+0x200>
 8001352:	e015      	b.n	8001380 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001354:	4b24      	ldr	r3, [pc, #144]	; (80013e8 <HAL_RCC_OscConfig+0x2b4>)
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fbc9 	bl	8000af0 <HAL_GetTick>
 800135e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001360:	e008      	b.n	8001374 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001362:	f7ff fbc5 	bl	8000af0 <HAL_GetTick>
 8001366:	4602      	mov	r2, r0
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	1ad3      	subs	r3, r2, r3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d901      	bls.n	8001374 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001370:	2303      	movs	r3, #3
 8001372:	e144      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001374:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001378:	f003 0302 	and.w	r3, r3, #2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1f0      	bne.n	8001362 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 80a0 	beq.w	80014ce <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800138e:	2300      	movs	r3, #0
 8001390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001392:	4b13      	ldr	r3, [pc, #76]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d10f      	bne.n	80013be <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800139e:	2300      	movs	r3, #0
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a6:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6413      	str	r3, [r2, #64]	; 0x40
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_RCC_OscConfig+0x2ac>)
 80013b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	60bb      	str	r3, [r7, #8]
 80013b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013ba:	2301      	movs	r3, #1
 80013bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013be:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_OscConfig+0x2b8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d121      	bne.n	800140e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013ca:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_RCC_OscConfig+0x2b8>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_RCC_OscConfig+0x2b8>)
 80013d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d6:	f7ff fb8b 	bl	8000af0 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	e011      	b.n	8001402 <HAL_RCC_OscConfig+0x2ce>
 80013de:	bf00      	nop
 80013e0:	40023800 	.word	0x40023800
 80013e4:	42470000 	.word	0x42470000
 80013e8:	42470e80 	.word	0x42470e80
 80013ec:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013f0:	f7ff fb7e 	bl	8000af0 <HAL_GetTick>
 80013f4:	4602      	mov	r2, r0
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d901      	bls.n	8001402 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e0fd      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b81      	ldr	r3, [pc, #516]	; (8001608 <HAL_RCC_OscConfig+0x4d4>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d0f0      	beq.n	80013f0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d106      	bne.n	8001424 <HAL_RCC_OscConfig+0x2f0>
 8001416:	4b7d      	ldr	r3, [pc, #500]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800141a:	4a7c      	ldr	r2, [pc, #496]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6713      	str	r3, [r2, #112]	; 0x70
 8001422:	e01c      	b.n	800145e <HAL_RCC_OscConfig+0x32a>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b05      	cmp	r3, #5
 800142a:	d10c      	bne.n	8001446 <HAL_RCC_OscConfig+0x312>
 800142c:	4b77      	ldr	r3, [pc, #476]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800142e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001430:	4a76      	ldr	r2, [pc, #472]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001432:	f043 0304 	orr.w	r3, r3, #4
 8001436:	6713      	str	r3, [r2, #112]	; 0x70
 8001438:	4b74      	ldr	r3, [pc, #464]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800143a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800143c:	4a73      	ldr	r2, [pc, #460]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800143e:	f043 0301 	orr.w	r3, r3, #1
 8001442:	6713      	str	r3, [r2, #112]	; 0x70
 8001444:	e00b      	b.n	800145e <HAL_RCC_OscConfig+0x32a>
 8001446:	4b71      	ldr	r3, [pc, #452]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800144a:	4a70      	ldr	r2, [pc, #448]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800144c:	f023 0301 	bic.w	r3, r3, #1
 8001450:	6713      	str	r3, [r2, #112]	; 0x70
 8001452:	4b6e      	ldr	r3, [pc, #440]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001456:	4a6d      	ldr	r2, [pc, #436]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001458:	f023 0304 	bic.w	r3, r3, #4
 800145c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d015      	beq.n	8001492 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001466:	f7ff fb43 	bl	8000af0 <HAL_GetTick>
 800146a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146c:	e00a      	b.n	8001484 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800146e:	f7ff fb3f 	bl	8000af0 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	f241 3288 	movw	r2, #5000	; 0x1388
 800147c:	4293      	cmp	r3, r2
 800147e:	d901      	bls.n	8001484 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e0bc      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001484:	4b61      	ldr	r3, [pc, #388]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b00      	cmp	r3, #0
 800148e:	d0ee      	beq.n	800146e <HAL_RCC_OscConfig+0x33a>
 8001490:	e014      	b.n	80014bc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001492:	f7ff fb2d 	bl	8000af0 <HAL_GetTick>
 8001496:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001498:	e00a      	b.n	80014b0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800149a:	f7ff fb29 	bl	8000af0 <HAL_GetTick>
 800149e:	4602      	mov	r2, r0
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	1ad3      	subs	r3, r2, r3
 80014a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d901      	bls.n	80014b0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014ac:	2303      	movs	r3, #3
 80014ae:	e0a6      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014b0:	4b56      	ldr	r3, [pc, #344]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80014b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b4:	f003 0302 	and.w	r3, r3, #2
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1ee      	bne.n	800149a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80014bc:	7dfb      	ldrb	r3, [r7, #23]
 80014be:	2b01      	cmp	r3, #1
 80014c0:	d105      	bne.n	80014ce <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c2:	4b52      	ldr	r3, [pc, #328]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a51      	ldr	r2, [pc, #324]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80014c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f000 8092 	beq.w	80015fc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80014d8:	4b4c      	ldr	r3, [pc, #304]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	f003 030c 	and.w	r3, r3, #12
 80014e0:	2b08      	cmp	r3, #8
 80014e2:	d05c      	beq.n	800159e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d141      	bne.n	8001570 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014ec:	4b48      	ldr	r3, [pc, #288]	; (8001610 <HAL_RCC_OscConfig+0x4dc>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014f2:	f7ff fafd 	bl	8000af0 <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014fa:	f7ff faf9 	bl	8000af0 <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e078      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800150c:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f0      	bne.n	80014fa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69da      	ldr	r2, [r3, #28]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1b      	ldr	r3, [r3, #32]
 8001520:	431a      	orrs	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	019b      	lsls	r3, r3, #6
 8001528:	431a      	orrs	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	3b01      	subs	r3, #1
 8001532:	041b      	lsls	r3, r3, #16
 8001534:	431a      	orrs	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153a:	061b      	lsls	r3, r3, #24
 800153c:	4933      	ldr	r1, [pc, #204]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001542:	4b33      	ldr	r3, [pc, #204]	; (8001610 <HAL_RCC_OscConfig+0x4dc>)
 8001544:	2201      	movs	r2, #1
 8001546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fad2 	bl	8000af0 <HAL_GetTick>
 800154c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800154e:	e008      	b.n	8001562 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001550:	f7ff face 	bl	8000af0 <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b02      	cmp	r3, #2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e04d      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f0      	beq.n	8001550 <HAL_RCC_OscConfig+0x41c>
 800156e:	e045      	b.n	80015fc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001570:	4b27      	ldr	r3, [pc, #156]	; (8001610 <HAL_RCC_OscConfig+0x4dc>)
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001576:	f7ff fabb 	bl	8000af0 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800157e:	f7ff fab7 	bl	8000af0 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e036      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001590:	4b1e      	ldr	r3, [pc, #120]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x44a>
 800159c:	e02e      	b.n	80015fc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	699b      	ldr	r3, [r3, #24]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d101      	bne.n	80015aa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e029      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015aa:	4b18      	ldr	r3, [pc, #96]	; (800160c <HAL_RCC_OscConfig+0x4d8>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d11c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d115      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80015d2:	4013      	ands	r3, r2
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80015d8:	4293      	cmp	r3, r2
 80015da:	d10d      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d106      	bne.n	80015f8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d001      	beq.n	80015fc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e000      	b.n	80015fe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40007000 	.word	0x40007000
 800160c:	40023800 	.word	0x40023800
 8001610:	42470060 	.word	0x42470060

08001614 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d101      	bne.n	8001628 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e0cc      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001628:	4b68      	ldr	r3, [pc, #416]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 030f 	and.w	r3, r3, #15
 8001630:	683a      	ldr	r2, [r7, #0]
 8001632:	429a      	cmp	r2, r3
 8001634:	d90c      	bls.n	8001650 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001636:	4b65      	ldr	r3, [pc, #404]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001638:	683a      	ldr	r2, [r7, #0]
 800163a:	b2d2      	uxtb	r2, r2
 800163c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800163e:	4b63      	ldr	r3, [pc, #396]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	683a      	ldr	r2, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	d001      	beq.n	8001650 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e0b8      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d020      	beq.n	800169e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0304 	and.w	r3, r3, #4
 8001664:	2b00      	cmp	r3, #0
 8001666:	d005      	beq.n	8001674 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001668:	4b59      	ldr	r3, [pc, #356]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800166e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001672:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d005      	beq.n	800168c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001680:	4b53      	ldr	r3, [pc, #332]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	4a52      	ldr	r2, [pc, #328]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800168a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800168c:	4b50      	ldr	r3, [pc, #320]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800169a:	4313      	orrs	r3, r2
 800169c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d044      	beq.n	8001734 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d107      	bne.n	80016c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b2:	4b47      	ldr	r3, [pc, #284]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d119      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e07f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d003      	beq.n	80016d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ce:	2b03      	cmp	r3, #3
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d2:	4b3f      	ldr	r3, [pc, #252]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d109      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e06f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e2:	4b3b      	ldr	r3, [pc, #236]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e067      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016f2:	4b37      	ldr	r3, [pc, #220]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0203 	bic.w	r2, r3, #3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	4934      	ldr	r1, [pc, #208]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	4313      	orrs	r3, r2
 8001702:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001704:	f7ff f9f4 	bl	8000af0 <HAL_GetTick>
 8001708:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800170a:	e00a      	b.n	8001722 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800170c:	f7ff f9f0 	bl	8000af0 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	f241 3288 	movw	r2, #5000	; 0x1388
 800171a:	4293      	cmp	r3, r2
 800171c:	d901      	bls.n	8001722 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e04f      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	4b2b      	ldr	r3, [pc, #172]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	f003 020c 	and.w	r2, r3, #12
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	429a      	cmp	r2, r3
 8001732:	d1eb      	bne.n	800170c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001734:	4b25      	ldr	r3, [pc, #148]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f003 030f 	and.w	r3, r3, #15
 800173c:	683a      	ldr	r2, [r7, #0]
 800173e:	429a      	cmp	r2, r3
 8001740:	d20c      	bcs.n	800175c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001742:	4b22      	ldr	r3, [pc, #136]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 8001744:	683a      	ldr	r2, [r7, #0]
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800174a:	4b20      	ldr	r3, [pc, #128]	; (80017cc <HAL_RCC_ClockConfig+0x1b8>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	683a      	ldr	r2, [r7, #0]
 8001754:	429a      	cmp	r2, r3
 8001756:	d001      	beq.n	800175c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	e032      	b.n	80017c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d008      	beq.n	800177a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001768:	4b19      	ldr	r3, [pc, #100]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	4916      	ldr	r1, [pc, #88]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d009      	beq.n	800179a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001786:	4b12      	ldr	r3, [pc, #72]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	689b      	ldr	r3, [r3, #8]
 800178a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	691b      	ldr	r3, [r3, #16]
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	490e      	ldr	r1, [pc, #56]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 8001796:	4313      	orrs	r3, r2
 8001798:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800179a:	f000 f821 	bl	80017e0 <HAL_RCC_GetSysClockFreq>
 800179e:	4601      	mov	r1, r0
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 030f 	and.w	r3, r3, #15
 80017aa:	4a0a      	ldr	r2, [pc, #40]	; (80017d4 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	fa21 f303 	lsr.w	r3, r1, r3
 80017b2:	4a09      	ldr	r2, [pc, #36]	; (80017d8 <HAL_RCC_ClockConfig+0x1c4>)
 80017b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_ClockConfig+0x1c8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff f954 	bl	8000a68 <HAL_InitTick>

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40023c00 	.word	0x40023c00
 80017d0:	40023800 	.word	0x40023800
 80017d4:	08003008 	.word	0x08003008
 80017d8:	20000000 	.word	0x20000000
 80017dc:	20000004 	.word	0x20000004

080017e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80017e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e2:	b085      	sub	sp, #20
 80017e4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	2300      	movs	r3, #0
 80017ec:	60fb      	str	r3, [r7, #12]
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80017f2:	2300      	movs	r3, #0
 80017f4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80017f6:	4b50      	ldr	r3, [pc, #320]	; (8001938 <HAL_RCC_GetSysClockFreq+0x158>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d007      	beq.n	8001812 <HAL_RCC_GetSysClockFreq+0x32>
 8001802:	2b08      	cmp	r3, #8
 8001804:	d008      	beq.n	8001818 <HAL_RCC_GetSysClockFreq+0x38>
 8001806:	2b00      	cmp	r3, #0
 8001808:	f040 808d 	bne.w	8001926 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b4b      	ldr	r3, [pc, #300]	; (800193c <HAL_RCC_GetSysClockFreq+0x15c>)
 800180e:	60bb      	str	r3, [r7, #8]
       break;
 8001810:	e08c      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001812:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 8001814:	60bb      	str	r3, [r7, #8]
      break;
 8001816:	e089      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001818:	4b47      	ldr	r3, [pc, #284]	; (8001938 <HAL_RCC_GetSysClockFreq+0x158>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001820:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001822:	4b45      	ldr	r3, [pc, #276]	; (8001938 <HAL_RCC_GetSysClockFreq+0x158>)
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d023      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800182e:	4b42      	ldr	r3, [pc, #264]	; (8001938 <HAL_RCC_GetSysClockFreq+0x158>)
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	099b      	lsrs	r3, r3, #6
 8001834:	f04f 0400 	mov.w	r4, #0
 8001838:	f240 11ff 	movw	r1, #511	; 0x1ff
 800183c:	f04f 0200 	mov.w	r2, #0
 8001840:	ea03 0501 	and.w	r5, r3, r1
 8001844:	ea04 0602 	and.w	r6, r4, r2
 8001848:	4a3d      	ldr	r2, [pc, #244]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 800184a:	fb02 f106 	mul.w	r1, r2, r6
 800184e:	2200      	movs	r2, #0
 8001850:	fb02 f205 	mul.w	r2, r2, r5
 8001854:	440a      	add	r2, r1
 8001856:	493a      	ldr	r1, [pc, #232]	; (8001940 <HAL_RCC_GetSysClockFreq+0x160>)
 8001858:	fba5 0101 	umull	r0, r1, r5, r1
 800185c:	1853      	adds	r3, r2, r1
 800185e:	4619      	mov	r1, r3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f04f 0400 	mov.w	r4, #0
 8001866:	461a      	mov	r2, r3
 8001868:	4623      	mov	r3, r4
 800186a:	f7fe fcbd 	bl	80001e8 <__aeabi_uldivmod>
 800186e:	4603      	mov	r3, r0
 8001870:	460c      	mov	r4, r1
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	e049      	b.n	800190a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001876:	4b30      	ldr	r3, [pc, #192]	; (8001938 <HAL_RCC_GetSysClockFreq+0x158>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	099b      	lsrs	r3, r3, #6
 800187c:	f04f 0400 	mov.w	r4, #0
 8001880:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001884:	f04f 0200 	mov.w	r2, #0
 8001888:	ea03 0501 	and.w	r5, r3, r1
 800188c:	ea04 0602 	and.w	r6, r4, r2
 8001890:	4629      	mov	r1, r5
 8001892:	4632      	mov	r2, r6
 8001894:	f04f 0300 	mov.w	r3, #0
 8001898:	f04f 0400 	mov.w	r4, #0
 800189c:	0154      	lsls	r4, r2, #5
 800189e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018a2:	014b      	lsls	r3, r1, #5
 80018a4:	4619      	mov	r1, r3
 80018a6:	4622      	mov	r2, r4
 80018a8:	1b49      	subs	r1, r1, r5
 80018aa:	eb62 0206 	sbc.w	r2, r2, r6
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	f04f 0400 	mov.w	r4, #0
 80018b6:	0194      	lsls	r4, r2, #6
 80018b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80018bc:	018b      	lsls	r3, r1, #6
 80018be:	1a5b      	subs	r3, r3, r1
 80018c0:	eb64 0402 	sbc.w	r4, r4, r2
 80018c4:	f04f 0100 	mov.w	r1, #0
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	00e2      	lsls	r2, r4, #3
 80018ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80018d2:	00d9      	lsls	r1, r3, #3
 80018d4:	460b      	mov	r3, r1
 80018d6:	4614      	mov	r4, r2
 80018d8:	195b      	adds	r3, r3, r5
 80018da:	eb44 0406 	adc.w	r4, r4, r6
 80018de:	f04f 0100 	mov.w	r1, #0
 80018e2:	f04f 0200 	mov.w	r2, #0
 80018e6:	02a2      	lsls	r2, r4, #10
 80018e8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80018ec:	0299      	lsls	r1, r3, #10
 80018ee:	460b      	mov	r3, r1
 80018f0:	4614      	mov	r4, r2
 80018f2:	4618      	mov	r0, r3
 80018f4:	4621      	mov	r1, r4
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	f04f 0400 	mov.w	r4, #0
 80018fc:	461a      	mov	r2, r3
 80018fe:	4623      	mov	r3, r4
 8001900:	f7fe fc72 	bl	80001e8 <__aeabi_uldivmod>
 8001904:	4603      	mov	r3, r0
 8001906:	460c      	mov	r4, r1
 8001908:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800190a:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_RCC_GetSysClockFreq+0x158>)
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	0c1b      	lsrs	r3, r3, #16
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	3301      	adds	r3, #1
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	60bb      	str	r3, [r7, #8]
      break;
 8001924:	e002      	b.n	800192c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001926:	4b05      	ldr	r3, [pc, #20]	; (800193c <HAL_RCC_GetSysClockFreq+0x15c>)
 8001928:	60bb      	str	r3, [r7, #8]
      break;
 800192a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800192c:	68bb      	ldr	r3, [r7, #8]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001936:	bf00      	nop
 8001938:	40023800 	.word	0x40023800
 800193c:	00f42400 	.word	0x00f42400
 8001940:	017d7840 	.word	0x017d7840

08001944 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001948:	4b03      	ldr	r3, [pc, #12]	; (8001958 <HAL_RCC_GetHCLKFreq+0x14>)
 800194a:	681b      	ldr	r3, [r3, #0]
}
 800194c:	4618      	mov	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	20000000 	.word	0x20000000

0800195c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001960:	f7ff fff0 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 8001964:	4601      	mov	r1, r0
 8001966:	4b05      	ldr	r3, [pc, #20]	; (800197c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	0a9b      	lsrs	r3, r3, #10
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	4a03      	ldr	r2, [pc, #12]	; (8001980 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001972:	5cd3      	ldrb	r3, [r2, r3]
 8001974:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001978:	4618      	mov	r0, r3
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40023800 	.word	0x40023800
 8001980:	08003018 	.word	0x08003018

08001984 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001988:	f7ff ffdc 	bl	8001944 <HAL_RCC_GetHCLKFreq>
 800198c:	4601      	mov	r1, r0
 800198e:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	0b5b      	lsrs	r3, r3, #13
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	4a03      	ldr	r2, [pc, #12]	; (80019a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40023800 	.word	0x40023800
 80019a8:	08003018 	.word	0x08003018

080019ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e03f      	b.n	8001a3e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d106      	bne.n	80019d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7fe ff56 	bl	8000884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2224      	movs	r2, #36	; 0x24
 80019dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	68da      	ldr	r2, [r3, #12]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80019ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fb97 	bl	8002124 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	695a      	ldr	r2, [r3, #20]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001a14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2220      	movs	r2, #32
 8001a30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2220      	movs	r2, #32
 8001a38:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	3708      	adds	r7, #8
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}

08001a46 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a46:	b580      	push	{r7, lr}
 8001a48:	b088      	sub	sp, #32
 8001a4a:	af02      	add	r7, sp, #8
 8001a4c:	60f8      	str	r0, [r7, #12]
 8001a4e:	60b9      	str	r1, [r7, #8]
 8001a50:	603b      	str	r3, [r7, #0]
 8001a52:	4613      	mov	r3, r2
 8001a54:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b20      	cmp	r3, #32
 8001a64:	f040 8083 	bne.w	8001b6e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_UART_Transmit+0x2e>
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e07b      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d101      	bne.n	8001a86 <HAL_UART_Transmit+0x40>
 8001a82:	2302      	movs	r3, #2
 8001a84:	e074      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2221      	movs	r2, #33	; 0x21
 8001a98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f828 	bl	8000af0 <HAL_GetTick>
 8001aa0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	88fa      	ldrh	r2, [r7, #6]
 8001aa6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	88fa      	ldrh	r2, [r7, #6]
 8001aac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8001ab6:	e042      	b.n	8001b3e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	b29a      	uxth	r2, r3
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	689b      	ldr	r3, [r3, #8]
 8001aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ace:	d122      	bne.n	8001b16 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	9300      	str	r3, [sp, #0]
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	2180      	movs	r1, #128	; 0x80
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f9b6 	bl	8001e4c <UART_WaitOnFlagUntilTimeout>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e042      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	881b      	ldrh	r3, [r3, #0]
 8001af2:	461a      	mov	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001afc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	691b      	ldr	r3, [r3, #16]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d103      	bne.n	8001b0e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	e017      	b.n	8001b3e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	3301      	adds	r3, #1
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	e013      	b.n	8001b3e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	9300      	str	r3, [sp, #0]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2180      	movs	r1, #128	; 0x80
 8001b20:	68f8      	ldr	r0, [r7, #12]
 8001b22:	f000 f993 	bl	8001e4c <UART_WaitOnFlagUntilTimeout>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	e01f      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60ba      	str	r2, [r7, #8]
 8001b36:	781a      	ldrb	r2, [r3, #0]
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d1b7      	bne.n	8001ab8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2140      	movs	r1, #64	; 0x40
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f000 f97a 	bl	8001e4c <UART_WaitOnFlagUntilTimeout>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e006      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2220      	movs	r2, #32
 8001b66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	e000      	b.n	8001b70 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001b6e:	2302      	movs	r3, #2
  }
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	60f8      	str	r0, [r7, #12]
 8001b80:	60b9      	str	r1, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b20      	cmp	r3, #32
 8001b90:	d140      	bne.n	8001c14 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d002      	beq.n	8001b9e <HAL_UART_Receive_IT+0x26>
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e039      	b.n	8001c16 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d101      	bne.n	8001bb0 <HAL_UART_Receive_IT+0x38>
 8001bac:	2302      	movs	r3, #2
 8001bae:	e032      	b.n	8001c16 <HAL_UART_Receive_IT+0x9e>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	88fa      	ldrh	r2, [r7, #6]
 8001bc2:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	88fa      	ldrh	r2, [r7, #6]
 8001bc8:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	2222      	movs	r2, #34	; 0x22
 8001bd4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001bee:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	695a      	ldr	r2, [r3, #20]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	68da      	ldr	r2, [r3, #12]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0220 	orr.w	r2, r2, #32
 8001c0e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c10:	2300      	movs	r3, #0
 8001c12:	e000      	b.n	8001c16 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
  }
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b088      	sub	sp, #32
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001c44:	2300      	movs	r3, #0
 8001c46:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10d      	bne.n	8001c76 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	f003 0320 	and.w	r3, r3, #32
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <HAL_UART_IRQHandler+0x52>
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d003      	beq.n	8001c76 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f000 f9d6 	bl	8002020 <UART_Receive_IT>
      return;
 8001c74:	e0d1      	b.n	8001e1a <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	f000 80b0 	beq.w	8001dde <HAL_UART_IRQHandler+0x1ba>
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d105      	bne.n	8001c94 <HAL_UART_IRQHandler+0x70>
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80a5 	beq.w	8001dde <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d00a      	beq.n	8001cb4 <HAL_UART_IRQHandler+0x90>
 8001c9e:	69bb      	ldr	r3, [r7, #24]
 8001ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cac:	f043 0201 	orr.w	r2, r3, #1
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d00a      	beq.n	8001cd4 <HAL_UART_IRQHandler+0xb0>
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d005      	beq.n	8001cd4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ccc:	f043 0202 	orr.w	r2, r3, #2
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <HAL_UART_IRQHandler+0xd0>
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d005      	beq.n	8001cf4 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0308 	and.w	r3, r3, #8
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00f      	beq.n	8001d1e <HAL_UART_IRQHandler+0xfa>
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	f003 0320 	and.w	r3, r3, #32
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d104      	bne.n	8001d12 <HAL_UART_IRQHandler+0xee>
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	f003 0301 	and.w	r3, r3, #1
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d16:	f043 0208 	orr.w	r2, r3, #8
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d078      	beq.n	8001e18 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	f003 0320 	and.w	r3, r3, #32
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d007      	beq.n	8001d40 <HAL_UART_IRQHandler+0x11c>
 8001d30:	69bb      	ldr	r3, [r7, #24]
 8001d32:	f003 0320 	and.w	r3, r3, #32
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 f970 	bl	8002020 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d4a:	2b40      	cmp	r3, #64	; 0x40
 8001d4c:	bf0c      	ite	eq
 8001d4e:	2301      	moveq	r3, #1
 8001d50:	2300      	movne	r3, #0
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_UART_IRQHandler+0x144>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d031      	beq.n	8001dcc <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f8b9 	bl	8001ee0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	695b      	ldr	r3, [r3, #20]
 8001d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d78:	2b40      	cmp	r3, #64	; 0x40
 8001d7a:	d123      	bne.n	8001dc4 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d8a:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d98:	4a21      	ldr	r2, [pc, #132]	; (8001e20 <HAL_UART_IRQHandler+0x1fc>)
 8001d9a:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe ffe4 	bl	8000d6e <HAL_DMA_Abort_IT>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d016      	beq.n	8001dda <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001db0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001db6:	4610      	mov	r0, r2
 8001db8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dba:	e00e      	b.n	8001dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f000 f83b 	bl	8001e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dc2:	e00a      	b.n	8001dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f000 f837 	bl	8001e38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dca:	e006      	b.n	8001dda <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 f833 	bl	8001e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001dd8:	e01e      	b.n	8001e18 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dda:	bf00      	nop
    return;
 8001ddc:	e01c      	b.n	8001e18 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_UART_IRQHandler+0x1d6>
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f8a6 	bl	8001f44 <UART_Transmit_IT>
    return;
 8001df8:	e00f      	b.n	8001e1a <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_UART_IRQHandler+0x1f6>
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d005      	beq.n	8001e1a <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f8ee 	bl	8001ff0 <UART_EndTransmit_IT>
    return;
 8001e14:	bf00      	nop
 8001e16:	e000      	b.n	8001e1a <HAL_UART_IRQHandler+0x1f6>
    return;
 8001e18:	bf00      	nop
  }
}
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	08001f1d 	.word	0x08001f1d

08001e24 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001e40:	bf00      	nop
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	4613      	mov	r3, r2
 8001e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e5c:	e02c      	b.n	8001eb8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e64:	d028      	beq.n	8001eb8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8001e6c:	f7fe fe40 	bl	8000af0 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d21d      	bcs.n	8001eb8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	68da      	ldr	r2, [r3, #12]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001e8a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	695a      	ldr	r2, [r3, #20]
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f022 0201 	bic.w	r2, r2, #1
 8001e9a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2220      	movs	r2, #32
 8001ea8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e00f      	b.n	8001ed8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	68bb      	ldr	r3, [r7, #8]
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	68ba      	ldr	r2, [r7, #8]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	bf0c      	ite	eq
 8001ec8:	2301      	moveq	r3, #1
 8001eca:	2300      	movne	r3, #0
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d0c3      	beq.n	8001e5e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3710      	adds	r7, #16
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001ef6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695a      	ldr	r2, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0201 	bic.w	r2, r2, #1
 8001f06:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2220      	movs	r2, #32
 8001f0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f28:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f7ff ff7e 	bl	8001e38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f3c:	bf00      	nop
 8001f3e:	3710      	adds	r7, #16
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}

08001f44 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b085      	sub	sp, #20
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	2b21      	cmp	r3, #33	; 0x21
 8001f56:	d144      	bne.n	8001fe2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f60:	d11a      	bne.n	8001f98 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001f76:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6a1b      	ldr	r3, [r3, #32]
 8001f84:	1c9a      	adds	r2, r3, #2
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	621a      	str	r2, [r3, #32]
 8001f8a:	e00e      	b.n	8001faa <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	1c5a      	adds	r2, r3, #1
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	621a      	str	r2, [r3, #32]
 8001f96:	e008      	b.n	8001faa <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6a1b      	ldr	r3, [r3, #32]
 8001f9c:	1c59      	adds	r1, r3, #1
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	6211      	str	r1, [r2, #32]
 8001fa2:	781a      	ldrb	r2, [r3, #0]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d10f      	bne.n	8001fde <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fcc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001fdc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	e000      	b.n	8001fe4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001fe2:	2302      	movs	r3, #2
  }
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002006:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2220      	movs	r2, #32
 800200c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff ff07 	bl	8001e24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002016:	2300      	movs	r3, #0
}
 8002018:	4618      	mov	r0, r3
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b22      	cmp	r3, #34	; 0x22
 8002032:	d171      	bne.n	8002118 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800203c:	d123      	bne.n	8002086 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002042:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10e      	bne.n	800206a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	b29b      	uxth	r3, r3
 8002054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002058:	b29a      	uxth	r2, r3
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002062:	1c9a      	adds	r2, r3, #2
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	629a      	str	r2, [r3, #40]	; 0x28
 8002068:	e029      	b.n	80020be <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	b29b      	uxth	r3, r3
 8002072:	b2db      	uxtb	r3, r3
 8002074:	b29a      	uxth	r2, r3
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207e:	1c5a      	adds	r2, r3, #1
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	629a      	str	r2, [r3, #40]	; 0x28
 8002084:	e01b      	b.n	80020be <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	691b      	ldr	r3, [r3, #16]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6858      	ldr	r0, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002098:	1c59      	adds	r1, r3, #1
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	6291      	str	r1, [r2, #40]	; 0x28
 800209e:	b2c2      	uxtb	r2, r0
 80020a0:	701a      	strb	r2, [r3, #0]
 80020a2:	e00c      	b.n	80020be <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	b2da      	uxtb	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b0:	1c58      	adds	r0, r3, #1
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	6288      	str	r0, [r1, #40]	; 0x28
 80020b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4619      	mov	r1, r3
 80020cc:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d120      	bne.n	8002114 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0220 	bic.w	r2, r2, #32
 80020e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	695a      	ldr	r2, [r3, #20]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 0201 	bic.w	r2, r2, #1
 8002100:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2220      	movs	r2, #32
 8002106:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7fe fb78 	bl	8000800 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002110:	2300      	movs	r3, #0
 8002112:	e002      	b.n	800211a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002114:	2300      	movs	r3, #0
 8002116:	e000      	b.n	800211a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002118:	2302      	movs	r3, #2
  }
}
 800211a:	4618      	mov	r0, r3
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002128:	b085      	sub	sp, #20
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	68da      	ldr	r2, [r3, #12]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	431a      	orrs	r2, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69db      	ldr	r3, [r3, #28]
 8002158:	4313      	orrs	r3, r2
 800215a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002166:	f023 030c 	bic.w	r3, r3, #12
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	68f9      	ldr	r1, [r7, #12]
 8002170:	430b      	orrs	r3, r1
 8002172:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699a      	ldr	r2, [r3, #24]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	69db      	ldr	r3, [r3, #28]
 800218e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002192:	f040 818b 	bne.w	80024ac <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4ac1      	ldr	r2, [pc, #772]	; (80024a0 <UART_SetConfig+0x37c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d005      	beq.n	80021ac <UART_SetConfig+0x88>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4abf      	ldr	r2, [pc, #764]	; (80024a4 <UART_SetConfig+0x380>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	f040 80bd 	bne.w	8002326 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80021ac:	f7ff fbea 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 80021b0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	461d      	mov	r5, r3
 80021b6:	f04f 0600 	mov.w	r6, #0
 80021ba:	46a8      	mov	r8, r5
 80021bc:	46b1      	mov	r9, r6
 80021be:	eb18 0308 	adds.w	r3, r8, r8
 80021c2:	eb49 0409 	adc.w	r4, r9, r9
 80021c6:	4698      	mov	r8, r3
 80021c8:	46a1      	mov	r9, r4
 80021ca:	eb18 0805 	adds.w	r8, r8, r5
 80021ce:	eb49 0906 	adc.w	r9, r9, r6
 80021d2:	f04f 0100 	mov.w	r1, #0
 80021d6:	f04f 0200 	mov.w	r2, #0
 80021da:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80021de:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80021e2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80021e6:	4688      	mov	r8, r1
 80021e8:	4691      	mov	r9, r2
 80021ea:	eb18 0005 	adds.w	r0, r8, r5
 80021ee:	eb49 0106 	adc.w	r1, r9, r6
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	461d      	mov	r5, r3
 80021f8:	f04f 0600 	mov.w	r6, #0
 80021fc:	196b      	adds	r3, r5, r5
 80021fe:	eb46 0406 	adc.w	r4, r6, r6
 8002202:	461a      	mov	r2, r3
 8002204:	4623      	mov	r3, r4
 8002206:	f7fd ffef 	bl	80001e8 <__aeabi_uldivmod>
 800220a:	4603      	mov	r3, r0
 800220c:	460c      	mov	r4, r1
 800220e:	461a      	mov	r2, r3
 8002210:	4ba5      	ldr	r3, [pc, #660]	; (80024a8 <UART_SetConfig+0x384>)
 8002212:	fba3 2302 	umull	r2, r3, r3, r2
 8002216:	095b      	lsrs	r3, r3, #5
 8002218:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	461d      	mov	r5, r3
 8002220:	f04f 0600 	mov.w	r6, #0
 8002224:	46a9      	mov	r9, r5
 8002226:	46b2      	mov	sl, r6
 8002228:	eb19 0309 	adds.w	r3, r9, r9
 800222c:	eb4a 040a 	adc.w	r4, sl, sl
 8002230:	4699      	mov	r9, r3
 8002232:	46a2      	mov	sl, r4
 8002234:	eb19 0905 	adds.w	r9, r9, r5
 8002238:	eb4a 0a06 	adc.w	sl, sl, r6
 800223c:	f04f 0100 	mov.w	r1, #0
 8002240:	f04f 0200 	mov.w	r2, #0
 8002244:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002248:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800224c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002250:	4689      	mov	r9, r1
 8002252:	4692      	mov	sl, r2
 8002254:	eb19 0005 	adds.w	r0, r9, r5
 8002258:	eb4a 0106 	adc.w	r1, sl, r6
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	461d      	mov	r5, r3
 8002262:	f04f 0600 	mov.w	r6, #0
 8002266:	196b      	adds	r3, r5, r5
 8002268:	eb46 0406 	adc.w	r4, r6, r6
 800226c:	461a      	mov	r2, r3
 800226e:	4623      	mov	r3, r4
 8002270:	f7fd ffba 	bl	80001e8 <__aeabi_uldivmod>
 8002274:	4603      	mov	r3, r0
 8002276:	460c      	mov	r4, r1
 8002278:	461a      	mov	r2, r3
 800227a:	4b8b      	ldr	r3, [pc, #556]	; (80024a8 <UART_SetConfig+0x384>)
 800227c:	fba3 1302 	umull	r1, r3, r3, r2
 8002280:	095b      	lsrs	r3, r3, #5
 8002282:	2164      	movs	r1, #100	; 0x64
 8002284:	fb01 f303 	mul.w	r3, r1, r3
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	3332      	adds	r3, #50	; 0x32
 800228e:	4a86      	ldr	r2, [pc, #536]	; (80024a8 <UART_SetConfig+0x384>)
 8002290:	fba2 2303 	umull	r2, r3, r2, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800229c:	4498      	add	r8, r3
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	461d      	mov	r5, r3
 80022a2:	f04f 0600 	mov.w	r6, #0
 80022a6:	46a9      	mov	r9, r5
 80022a8:	46b2      	mov	sl, r6
 80022aa:	eb19 0309 	adds.w	r3, r9, r9
 80022ae:	eb4a 040a 	adc.w	r4, sl, sl
 80022b2:	4699      	mov	r9, r3
 80022b4:	46a2      	mov	sl, r4
 80022b6:	eb19 0905 	adds.w	r9, r9, r5
 80022ba:	eb4a 0a06 	adc.w	sl, sl, r6
 80022be:	f04f 0100 	mov.w	r1, #0
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80022ca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80022ce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80022d2:	4689      	mov	r9, r1
 80022d4:	4692      	mov	sl, r2
 80022d6:	eb19 0005 	adds.w	r0, r9, r5
 80022da:	eb4a 0106 	adc.w	r1, sl, r6
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	461d      	mov	r5, r3
 80022e4:	f04f 0600 	mov.w	r6, #0
 80022e8:	196b      	adds	r3, r5, r5
 80022ea:	eb46 0406 	adc.w	r4, r6, r6
 80022ee:	461a      	mov	r2, r3
 80022f0:	4623      	mov	r3, r4
 80022f2:	f7fd ff79 	bl	80001e8 <__aeabi_uldivmod>
 80022f6:	4603      	mov	r3, r0
 80022f8:	460c      	mov	r4, r1
 80022fa:	461a      	mov	r2, r3
 80022fc:	4b6a      	ldr	r3, [pc, #424]	; (80024a8 <UART_SetConfig+0x384>)
 80022fe:	fba3 1302 	umull	r1, r3, r3, r2
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2164      	movs	r1, #100	; 0x64
 8002306:	fb01 f303 	mul.w	r3, r1, r3
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	3332      	adds	r3, #50	; 0x32
 8002310:	4a65      	ldr	r2, [pc, #404]	; (80024a8 <UART_SetConfig+0x384>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	f003 0207 	and.w	r2, r3, #7
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4442      	add	r2, r8
 8002322:	609a      	str	r2, [r3, #8]
 8002324:	e26f      	b.n	8002806 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002326:	f7ff fb19 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 800232a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	461d      	mov	r5, r3
 8002330:	f04f 0600 	mov.w	r6, #0
 8002334:	46a8      	mov	r8, r5
 8002336:	46b1      	mov	r9, r6
 8002338:	eb18 0308 	adds.w	r3, r8, r8
 800233c:	eb49 0409 	adc.w	r4, r9, r9
 8002340:	4698      	mov	r8, r3
 8002342:	46a1      	mov	r9, r4
 8002344:	eb18 0805 	adds.w	r8, r8, r5
 8002348:	eb49 0906 	adc.w	r9, r9, r6
 800234c:	f04f 0100 	mov.w	r1, #0
 8002350:	f04f 0200 	mov.w	r2, #0
 8002354:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002358:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800235c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002360:	4688      	mov	r8, r1
 8002362:	4691      	mov	r9, r2
 8002364:	eb18 0005 	adds.w	r0, r8, r5
 8002368:	eb49 0106 	adc.w	r1, r9, r6
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	461d      	mov	r5, r3
 8002372:	f04f 0600 	mov.w	r6, #0
 8002376:	196b      	adds	r3, r5, r5
 8002378:	eb46 0406 	adc.w	r4, r6, r6
 800237c:	461a      	mov	r2, r3
 800237e:	4623      	mov	r3, r4
 8002380:	f7fd ff32 	bl	80001e8 <__aeabi_uldivmod>
 8002384:	4603      	mov	r3, r0
 8002386:	460c      	mov	r4, r1
 8002388:	461a      	mov	r2, r3
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <UART_SetConfig+0x384>)
 800238c:	fba3 2302 	umull	r2, r3, r3, r2
 8002390:	095b      	lsrs	r3, r3, #5
 8002392:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	461d      	mov	r5, r3
 800239a:	f04f 0600 	mov.w	r6, #0
 800239e:	46a9      	mov	r9, r5
 80023a0:	46b2      	mov	sl, r6
 80023a2:	eb19 0309 	adds.w	r3, r9, r9
 80023a6:	eb4a 040a 	adc.w	r4, sl, sl
 80023aa:	4699      	mov	r9, r3
 80023ac:	46a2      	mov	sl, r4
 80023ae:	eb19 0905 	adds.w	r9, r9, r5
 80023b2:	eb4a 0a06 	adc.w	sl, sl, r6
 80023b6:	f04f 0100 	mov.w	r1, #0
 80023ba:	f04f 0200 	mov.w	r2, #0
 80023be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023ca:	4689      	mov	r9, r1
 80023cc:	4692      	mov	sl, r2
 80023ce:	eb19 0005 	adds.w	r0, r9, r5
 80023d2:	eb4a 0106 	adc.w	r1, sl, r6
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	461d      	mov	r5, r3
 80023dc:	f04f 0600 	mov.w	r6, #0
 80023e0:	196b      	adds	r3, r5, r5
 80023e2:	eb46 0406 	adc.w	r4, r6, r6
 80023e6:	461a      	mov	r2, r3
 80023e8:	4623      	mov	r3, r4
 80023ea:	f7fd fefd 	bl	80001e8 <__aeabi_uldivmod>
 80023ee:	4603      	mov	r3, r0
 80023f0:	460c      	mov	r4, r1
 80023f2:	461a      	mov	r2, r3
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <UART_SetConfig+0x384>)
 80023f6:	fba3 1302 	umull	r1, r3, r3, r2
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2164      	movs	r1, #100	; 0x64
 80023fe:	fb01 f303 	mul.w	r3, r1, r3
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	3332      	adds	r3, #50	; 0x32
 8002408:	4a27      	ldr	r2, [pc, #156]	; (80024a8 <UART_SetConfig+0x384>)
 800240a:	fba2 2303 	umull	r2, r3, r2, r3
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002416:	4498      	add	r8, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	461d      	mov	r5, r3
 800241c:	f04f 0600 	mov.w	r6, #0
 8002420:	46a9      	mov	r9, r5
 8002422:	46b2      	mov	sl, r6
 8002424:	eb19 0309 	adds.w	r3, r9, r9
 8002428:	eb4a 040a 	adc.w	r4, sl, sl
 800242c:	4699      	mov	r9, r3
 800242e:	46a2      	mov	sl, r4
 8002430:	eb19 0905 	adds.w	r9, r9, r5
 8002434:	eb4a 0a06 	adc.w	sl, sl, r6
 8002438:	f04f 0100 	mov.w	r1, #0
 800243c:	f04f 0200 	mov.w	r2, #0
 8002440:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002444:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002448:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800244c:	4689      	mov	r9, r1
 800244e:	4692      	mov	sl, r2
 8002450:	eb19 0005 	adds.w	r0, r9, r5
 8002454:	eb4a 0106 	adc.w	r1, sl, r6
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	461d      	mov	r5, r3
 800245e:	f04f 0600 	mov.w	r6, #0
 8002462:	196b      	adds	r3, r5, r5
 8002464:	eb46 0406 	adc.w	r4, r6, r6
 8002468:	461a      	mov	r2, r3
 800246a:	4623      	mov	r3, r4
 800246c:	f7fd febc 	bl	80001e8 <__aeabi_uldivmod>
 8002470:	4603      	mov	r3, r0
 8002472:	460c      	mov	r4, r1
 8002474:	461a      	mov	r2, r3
 8002476:	4b0c      	ldr	r3, [pc, #48]	; (80024a8 <UART_SetConfig+0x384>)
 8002478:	fba3 1302 	umull	r1, r3, r3, r2
 800247c:	095b      	lsrs	r3, r3, #5
 800247e:	2164      	movs	r1, #100	; 0x64
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	3332      	adds	r3, #50	; 0x32
 800248a:	4a07      	ldr	r2, [pc, #28]	; (80024a8 <UART_SetConfig+0x384>)
 800248c:	fba2 2303 	umull	r2, r3, r2, r3
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	f003 0207 	and.w	r2, r3, #7
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4442      	add	r2, r8
 800249c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800249e:	e1b2      	b.n	8002806 <UART_SetConfig+0x6e2>
 80024a0:	40011000 	.word	0x40011000
 80024a4:	40011400 	.word	0x40011400
 80024a8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4ad7      	ldr	r2, [pc, #860]	; (8002810 <UART_SetConfig+0x6ec>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d005      	beq.n	80024c2 <UART_SetConfig+0x39e>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4ad6      	ldr	r2, [pc, #856]	; (8002814 <UART_SetConfig+0x6f0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	f040 80d1 	bne.w	8002664 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80024c2:	f7ff fa5f 	bl	8001984 <HAL_RCC_GetPCLK2Freq>
 80024c6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	469a      	mov	sl, r3
 80024cc:	f04f 0b00 	mov.w	fp, #0
 80024d0:	46d0      	mov	r8, sl
 80024d2:	46d9      	mov	r9, fp
 80024d4:	eb18 0308 	adds.w	r3, r8, r8
 80024d8:	eb49 0409 	adc.w	r4, r9, r9
 80024dc:	4698      	mov	r8, r3
 80024de:	46a1      	mov	r9, r4
 80024e0:	eb18 080a 	adds.w	r8, r8, sl
 80024e4:	eb49 090b 	adc.w	r9, r9, fp
 80024e8:	f04f 0100 	mov.w	r1, #0
 80024ec:	f04f 0200 	mov.w	r2, #0
 80024f0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80024f4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80024f8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80024fc:	4688      	mov	r8, r1
 80024fe:	4691      	mov	r9, r2
 8002500:	eb1a 0508 	adds.w	r5, sl, r8
 8002504:	eb4b 0609 	adc.w	r6, fp, r9
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4619      	mov	r1, r3
 800250e:	f04f 0200 	mov.w	r2, #0
 8002512:	f04f 0300 	mov.w	r3, #0
 8002516:	f04f 0400 	mov.w	r4, #0
 800251a:	0094      	lsls	r4, r2, #2
 800251c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002520:	008b      	lsls	r3, r1, #2
 8002522:	461a      	mov	r2, r3
 8002524:	4623      	mov	r3, r4
 8002526:	4628      	mov	r0, r5
 8002528:	4631      	mov	r1, r6
 800252a:	f7fd fe5d 	bl	80001e8 <__aeabi_uldivmod>
 800252e:	4603      	mov	r3, r0
 8002530:	460c      	mov	r4, r1
 8002532:	461a      	mov	r2, r3
 8002534:	4bb8      	ldr	r3, [pc, #736]	; (8002818 <UART_SetConfig+0x6f4>)
 8002536:	fba3 2302 	umull	r2, r3, r3, r2
 800253a:	095b      	lsrs	r3, r3, #5
 800253c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	469b      	mov	fp, r3
 8002544:	f04f 0c00 	mov.w	ip, #0
 8002548:	46d9      	mov	r9, fp
 800254a:	46e2      	mov	sl, ip
 800254c:	eb19 0309 	adds.w	r3, r9, r9
 8002550:	eb4a 040a 	adc.w	r4, sl, sl
 8002554:	4699      	mov	r9, r3
 8002556:	46a2      	mov	sl, r4
 8002558:	eb19 090b 	adds.w	r9, r9, fp
 800255c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002560:	f04f 0100 	mov.w	r1, #0
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800256c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002570:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002574:	4689      	mov	r9, r1
 8002576:	4692      	mov	sl, r2
 8002578:	eb1b 0509 	adds.w	r5, fp, r9
 800257c:	eb4c 060a 	adc.w	r6, ip, sl
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	4619      	mov	r1, r3
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	f04f 0300 	mov.w	r3, #0
 800258e:	f04f 0400 	mov.w	r4, #0
 8002592:	0094      	lsls	r4, r2, #2
 8002594:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002598:	008b      	lsls	r3, r1, #2
 800259a:	461a      	mov	r2, r3
 800259c:	4623      	mov	r3, r4
 800259e:	4628      	mov	r0, r5
 80025a0:	4631      	mov	r1, r6
 80025a2:	f7fd fe21 	bl	80001e8 <__aeabi_uldivmod>
 80025a6:	4603      	mov	r3, r0
 80025a8:	460c      	mov	r4, r1
 80025aa:	461a      	mov	r2, r3
 80025ac:	4b9a      	ldr	r3, [pc, #616]	; (8002818 <UART_SetConfig+0x6f4>)
 80025ae:	fba3 1302 	umull	r1, r3, r3, r2
 80025b2:	095b      	lsrs	r3, r3, #5
 80025b4:	2164      	movs	r1, #100	; 0x64
 80025b6:	fb01 f303 	mul.w	r3, r1, r3
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	011b      	lsls	r3, r3, #4
 80025be:	3332      	adds	r3, #50	; 0x32
 80025c0:	4a95      	ldr	r2, [pc, #596]	; (8002818 <UART_SetConfig+0x6f4>)
 80025c2:	fba2 2303 	umull	r2, r3, r2, r3
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025cc:	4498      	add	r8, r3
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	469b      	mov	fp, r3
 80025d2:	f04f 0c00 	mov.w	ip, #0
 80025d6:	46d9      	mov	r9, fp
 80025d8:	46e2      	mov	sl, ip
 80025da:	eb19 0309 	adds.w	r3, r9, r9
 80025de:	eb4a 040a 	adc.w	r4, sl, sl
 80025e2:	4699      	mov	r9, r3
 80025e4:	46a2      	mov	sl, r4
 80025e6:	eb19 090b 	adds.w	r9, r9, fp
 80025ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80025ee:	f04f 0100 	mov.w	r1, #0
 80025f2:	f04f 0200 	mov.w	r2, #0
 80025f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80025fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002602:	4689      	mov	r9, r1
 8002604:	4692      	mov	sl, r2
 8002606:	eb1b 0509 	adds.w	r5, fp, r9
 800260a:	eb4c 060a 	adc.w	r6, ip, sl
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	4619      	mov	r1, r3
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	f04f 0400 	mov.w	r4, #0
 8002620:	0094      	lsls	r4, r2, #2
 8002622:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002626:	008b      	lsls	r3, r1, #2
 8002628:	461a      	mov	r2, r3
 800262a:	4623      	mov	r3, r4
 800262c:	4628      	mov	r0, r5
 800262e:	4631      	mov	r1, r6
 8002630:	f7fd fdda 	bl	80001e8 <__aeabi_uldivmod>
 8002634:	4603      	mov	r3, r0
 8002636:	460c      	mov	r4, r1
 8002638:	461a      	mov	r2, r3
 800263a:	4b77      	ldr	r3, [pc, #476]	; (8002818 <UART_SetConfig+0x6f4>)
 800263c:	fba3 1302 	umull	r1, r3, r3, r2
 8002640:	095b      	lsrs	r3, r3, #5
 8002642:	2164      	movs	r1, #100	; 0x64
 8002644:	fb01 f303 	mul.w	r3, r1, r3
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	3332      	adds	r3, #50	; 0x32
 800264e:	4a72      	ldr	r2, [pc, #456]	; (8002818 <UART_SetConfig+0x6f4>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	095b      	lsrs	r3, r3, #5
 8002656:	f003 020f 	and.w	r2, r3, #15
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4442      	add	r2, r8
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	e0d0      	b.n	8002806 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002664:	f7ff f97a 	bl	800195c <HAL_RCC_GetPCLK1Freq>
 8002668:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	469a      	mov	sl, r3
 800266e:	f04f 0b00 	mov.w	fp, #0
 8002672:	46d0      	mov	r8, sl
 8002674:	46d9      	mov	r9, fp
 8002676:	eb18 0308 	adds.w	r3, r8, r8
 800267a:	eb49 0409 	adc.w	r4, r9, r9
 800267e:	4698      	mov	r8, r3
 8002680:	46a1      	mov	r9, r4
 8002682:	eb18 080a 	adds.w	r8, r8, sl
 8002686:	eb49 090b 	adc.w	r9, r9, fp
 800268a:	f04f 0100 	mov.w	r1, #0
 800268e:	f04f 0200 	mov.w	r2, #0
 8002692:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002696:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800269a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800269e:	4688      	mov	r8, r1
 80026a0:	4691      	mov	r9, r2
 80026a2:	eb1a 0508 	adds.w	r5, sl, r8
 80026a6:	eb4b 0609 	adc.w	r6, fp, r9
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	4619      	mov	r1, r3
 80026b0:	f04f 0200 	mov.w	r2, #0
 80026b4:	f04f 0300 	mov.w	r3, #0
 80026b8:	f04f 0400 	mov.w	r4, #0
 80026bc:	0094      	lsls	r4, r2, #2
 80026be:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80026c2:	008b      	lsls	r3, r1, #2
 80026c4:	461a      	mov	r2, r3
 80026c6:	4623      	mov	r3, r4
 80026c8:	4628      	mov	r0, r5
 80026ca:	4631      	mov	r1, r6
 80026cc:	f7fd fd8c 	bl	80001e8 <__aeabi_uldivmod>
 80026d0:	4603      	mov	r3, r0
 80026d2:	460c      	mov	r4, r1
 80026d4:	461a      	mov	r2, r3
 80026d6:	4b50      	ldr	r3, [pc, #320]	; (8002818 <UART_SetConfig+0x6f4>)
 80026d8:	fba3 2302 	umull	r2, r3, r3, r2
 80026dc:	095b      	lsrs	r3, r3, #5
 80026de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	469b      	mov	fp, r3
 80026e6:	f04f 0c00 	mov.w	ip, #0
 80026ea:	46d9      	mov	r9, fp
 80026ec:	46e2      	mov	sl, ip
 80026ee:	eb19 0309 	adds.w	r3, r9, r9
 80026f2:	eb4a 040a 	adc.w	r4, sl, sl
 80026f6:	4699      	mov	r9, r3
 80026f8:	46a2      	mov	sl, r4
 80026fa:	eb19 090b 	adds.w	r9, r9, fp
 80026fe:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002702:	f04f 0100 	mov.w	r1, #0
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800270e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002712:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002716:	4689      	mov	r9, r1
 8002718:	4692      	mov	sl, r2
 800271a:	eb1b 0509 	adds.w	r5, fp, r9
 800271e:	eb4c 060a 	adc.w	r6, ip, sl
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4619      	mov	r1, r3
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	f04f 0300 	mov.w	r3, #0
 8002730:	f04f 0400 	mov.w	r4, #0
 8002734:	0094      	lsls	r4, r2, #2
 8002736:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800273a:	008b      	lsls	r3, r1, #2
 800273c:	461a      	mov	r2, r3
 800273e:	4623      	mov	r3, r4
 8002740:	4628      	mov	r0, r5
 8002742:	4631      	mov	r1, r6
 8002744:	f7fd fd50 	bl	80001e8 <__aeabi_uldivmod>
 8002748:	4603      	mov	r3, r0
 800274a:	460c      	mov	r4, r1
 800274c:	461a      	mov	r2, r3
 800274e:	4b32      	ldr	r3, [pc, #200]	; (8002818 <UART_SetConfig+0x6f4>)
 8002750:	fba3 1302 	umull	r1, r3, r3, r2
 8002754:	095b      	lsrs	r3, r3, #5
 8002756:	2164      	movs	r1, #100	; 0x64
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	3332      	adds	r3, #50	; 0x32
 8002762:	4a2d      	ldr	r2, [pc, #180]	; (8002818 <UART_SetConfig+0x6f4>)
 8002764:	fba2 2303 	umull	r2, r3, r2, r3
 8002768:	095b      	lsrs	r3, r3, #5
 800276a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800276e:	4498      	add	r8, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	469b      	mov	fp, r3
 8002774:	f04f 0c00 	mov.w	ip, #0
 8002778:	46d9      	mov	r9, fp
 800277a:	46e2      	mov	sl, ip
 800277c:	eb19 0309 	adds.w	r3, r9, r9
 8002780:	eb4a 040a 	adc.w	r4, sl, sl
 8002784:	4699      	mov	r9, r3
 8002786:	46a2      	mov	sl, r4
 8002788:	eb19 090b 	adds.w	r9, r9, fp
 800278c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002790:	f04f 0100 	mov.w	r1, #0
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800279c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80027a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80027a4:	4689      	mov	r9, r1
 80027a6:	4692      	mov	sl, r2
 80027a8:	eb1b 0509 	adds.w	r5, fp, r9
 80027ac:	eb4c 060a 	adc.w	r6, ip, sl
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	4619      	mov	r1, r3
 80027b6:	f04f 0200 	mov.w	r2, #0
 80027ba:	f04f 0300 	mov.w	r3, #0
 80027be:	f04f 0400 	mov.w	r4, #0
 80027c2:	0094      	lsls	r4, r2, #2
 80027c4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80027c8:	008b      	lsls	r3, r1, #2
 80027ca:	461a      	mov	r2, r3
 80027cc:	4623      	mov	r3, r4
 80027ce:	4628      	mov	r0, r5
 80027d0:	4631      	mov	r1, r6
 80027d2:	f7fd fd09 	bl	80001e8 <__aeabi_uldivmod>
 80027d6:	4603      	mov	r3, r0
 80027d8:	460c      	mov	r4, r1
 80027da:	461a      	mov	r2, r3
 80027dc:	4b0e      	ldr	r3, [pc, #56]	; (8002818 <UART_SetConfig+0x6f4>)
 80027de:	fba3 1302 	umull	r1, r3, r3, r2
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2164      	movs	r1, #100	; 0x64
 80027e6:	fb01 f303 	mul.w	r3, r1, r3
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	011b      	lsls	r3, r3, #4
 80027ee:	3332      	adds	r3, #50	; 0x32
 80027f0:	4a09      	ldr	r2, [pc, #36]	; (8002818 <UART_SetConfig+0x6f4>)
 80027f2:	fba2 2303 	umull	r2, r3, r2, r3
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	f003 020f 	and.w	r2, r3, #15
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4442      	add	r2, r8
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	e7ff      	b.n	8002806 <UART_SetConfig+0x6e2>
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002810:	40011000 	.word	0x40011000
 8002814:	40011400 	.word	0x40011400
 8002818:	51eb851f 	.word	0x51eb851f

0800281c <rylr998SetAddress>:

	return ret;
}
//AT+ADDRESS=<Address>
Rylr998_Status_t rylr998SetAddress(uint8_t* address)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b088      	sub	sp, #32
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
	Rylr998_Status_t 	ret 				= Rylr998_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	77fb      	strb	r3, [r7, #31]
	const uint16_t 		packetSize 			= 14;
 8002828:	230e      	movs	r3, #14
 800282a:	83bb      	strh	r3, [r7, #28]
	uint8_t 			uartTxBuffer[14] 	= {0};
 800282c:	f107 030c 	add.w	r3, r7, #12
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	819a      	strh	r2, [r3, #12]


	memcpy(uartTxBuffer, AT, AT_PRIFEX_SIZE);
 800283a:	f107 030c 	add.w	r3, r7, #12
 800283e:	2203      	movs	r2, #3
 8002840:	4922      	ldr	r1, [pc, #136]	; (80028cc <rylr998SetAddress+0xb0>)
 8002842:	4618      	mov	r0, r3
 8002844:	f000 fb7f 	bl	8002f46 <memcpy>
	strcat(uartTxBuffer, ADDRESS);
 8002848:	f107 030c 	add.w	r3, r7, #12
 800284c:	4618      	mov	r0, r3
 800284e:	f7fd fcc3 	bl	80001d8 <strlen>
 8002852:	4603      	mov	r3, r0
 8002854:	461a      	mov	r2, r3
 8002856:	f107 030c 	add.w	r3, r7, #12
 800285a:	4413      	add	r3, r2
 800285c:	491c      	ldr	r1, [pc, #112]	; (80028d0 <rylr998SetAddress+0xb4>)
 800285e:	461a      	mov	r2, r3
 8002860:	460b      	mov	r3, r1
 8002862:	cb03      	ldmia	r3!, {r0, r1}
 8002864:	6010      	str	r0, [r2, #0]
 8002866:	6051      	str	r1, [r2, #4]
	strcat(uartTxBuffer, SET_VALUE);
 8002868:	f107 030c 	add.w	r3, r7, #12
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fcb3 	bl	80001d8 <strlen>
 8002872:	4603      	mov	r3, r0
 8002874:	461a      	mov	r2, r3
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4413      	add	r3, r2
 800287c:	4915      	ldr	r1, [pc, #84]	; (80028d4 <rylr998SetAddress+0xb8>)
 800287e:	461a      	mov	r2, r3
 8002880:	460b      	mov	r3, r1
 8002882:	881b      	ldrh	r3, [r3, #0]
 8002884:	8013      	strh	r3, [r2, #0]

	strcat((char*) uartTxBuffer,  address);
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4618      	mov	r0, r3
 800288e:	f000 fb6d 	bl	8002f6c <strcat>
	strcat((char*) uartTxBuffer, TERMINATOR);
 8002892:	f107 030c 	add.w	r3, r7, #12
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fc9e 	bl	80001d8 <strlen>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	f107 030c 	add.w	r3, r7, #12
 80028a4:	4413      	add	r3, r2
 80028a6:	4a0c      	ldr	r2, [pc, #48]	; (80028d8 <rylr998SetAddress+0xbc>)
 80028a8:	8811      	ldrh	r1, [r2, #0]
 80028aa:	7892      	ldrb	r2, [r2, #2]
 80028ac:	8019      	strh	r1, [r3, #0]
 80028ae:	709a      	strb	r2, [r3, #2]

	ret = HAL_UART_Transmit(&huart1, uartTxBuffer, packetSize, 10);
 80028b0:	8bba      	ldrh	r2, [r7, #28]
 80028b2:	f107 010c 	add.w	r1, r7, #12
 80028b6:	230a      	movs	r3, #10
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <rylr998SetAddress+0xc0>)
 80028ba:	f7ff f8c4 	bl	8001a46 <HAL_UART_Transmit>
 80028be:	4603      	mov	r3, r0
 80028c0:	77fb      	strb	r3, [r7, #31]

	return ret;
 80028c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3720      	adds	r7, #32
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	08002fa4 	.word	0x08002fa4
 80028d0:	08002fac 	.word	0x08002fac
 80028d4:	08002fb4 	.word	0x08002fb4
 80028d8:	08002fa8 	.word	0x08002fa8
 80028dc:	20000028 	.word	0x20000028

080028e0 <rylr998Send>:
}

//AT+SEND=<Address>,<Payload Length>,<Data>
Rylr998_Status_t rylr998Send(Rylr998Handler_t* hRylr998, UloraCommand_e uLoRaCommand)
//Rylr998_Status_t rylr998Send(uint16_t address, uint8_t payloadLength, uint8_t* txBuffer)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b0c6      	sub	sp, #280	; 0x118
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	6018      	str	r0, [r3, #0]
 80028ea:	460a      	mov	r2, r1
 80028ec:	1cfb      	adds	r3, r7, #3
 80028ee:	701a      	strb	r2, [r3, #0]
	Rylr998_Status_t 	ret 					= Rylr998_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	uint8_t 			uartTxBuffer[256] 		= {0};
 80028f6:	f107 0310 	add.w	r3, r7, #16
 80028fa:	4618      	mov	r0, r3
 80028fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002900:	461a      	mov	r2, r3
 8002902:	2100      	movs	r1, #0
 8002904:	f000 fb2a 	bl	8002f5c <memset>
	uint16_t			packetSize				= 0;
 8002908:	2300      	movs	r3, #0
 800290a:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	uint8_t				packetSizeAscii[2]		= {0};
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	2200      	movs	r2, #0
 8002914:	801a      	strh	r2, [r3, #0]
	uloraCommunicationTest	(hRylr998->rylr998Transmitter.TxBuffer);
 8002916:	1d3b      	adds	r3, r7, #4
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	3314      	adds	r3, #20
 800291c:	4618      	mov	r0, r3
 800291e:	f000 fabb 	bl	8002e98 <uloraCommunicationTest>

	UloraCommand_e				Command			= uLoRaCommand;
 8002922:	1cfb      	adds	r3, r7, #3
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	switch (Command)
 800292a:	f897 3113 	ldrb.w	r3, [r7, #275]	; 0x113
 800292e:	2b01      	cmp	r3, #1
 8002930:	d00a      	beq.n	8002948 <rylr998Send+0x68>
 8002932:	2b02      	cmp	r3, #2
 8002934:	d001      	beq.n	800293a <rylr998Send+0x5a>
 8002936:	2b00      	cmp	r3, #0
	{
		case ULORA_NAK:

			break;
 8002938:	e007      	b.n	800294a <rylr998Send+0x6a>
		case ULORA_ACK:

			break;
		case ULORA_CONN_COUNT:
			uloraCommunicationTest	(hRylr998->rylr998Transmitter.TxBuffer);
 800293a:	1d3b      	adds	r3, r7, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	3314      	adds	r3, #20
 8002940:	4618      	mov	r0, r3
 8002942:	f000 faa9 	bl	8002e98 <uloraCommunicationTest>
			break;
 8002946:	e000      	b.n	800294a <rylr998Send+0x6a>
			break;
 8002948:	bf00      	nop
	}
	packetSize += AT_OVERHEAD_SIZE + sizeof(SEND) + 2 + 1 + 1;   //2 is the number of segment separators
 800294a:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 800294e:	330f      	adds	r3, #15
 8002950:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
																 //1 is for the receiver address
																 //1 is for the payload
	memcpy(uartTxBuffer, AT, AT_PRIFEX_SIZE);
 8002954:	f107 0310 	add.w	r3, r7, #16
 8002958:	2203      	movs	r2, #3
 800295a:	4947      	ldr	r1, [pc, #284]	; (8002a78 <rylr998Send+0x198>)
 800295c:	4618      	mov	r0, r3
 800295e:	f000 faf2 	bl	8002f46 <memcpy>
	strcat((char*) uartTxBuffer, SEND);
 8002962:	f107 0310 	add.w	r3, r7, #16
 8002966:	4618      	mov	r0, r3
 8002968:	f7fd fc36 	bl	80001d8 <strlen>
 800296c:	4603      	mov	r3, r0
 800296e:	461a      	mov	r2, r3
 8002970:	f107 0310 	add.w	r3, r7, #16
 8002974:	4413      	add	r3, r2
 8002976:	4a41      	ldr	r2, [pc, #260]	; (8002a7c <rylr998Send+0x19c>)
 8002978:	6810      	ldr	r0, [r2, #0]
 800297a:	6018      	str	r0, [r3, #0]
 800297c:	7912      	ldrb	r2, [r2, #4]
 800297e:	711a      	strb	r2, [r3, #4]
	strcat((char*) uartTxBuffer, SET_VALUE);
 8002980:	f107 0310 	add.w	r3, r7, #16
 8002984:	4618      	mov	r0, r3
 8002986:	f7fd fc27 	bl	80001d8 <strlen>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	f107 0310 	add.w	r3, r7, #16
 8002992:	4413      	add	r3, r2
 8002994:	493a      	ldr	r1, [pc, #232]	; (8002a80 <rylr998Send+0x1a0>)
 8002996:	461a      	mov	r2, r3
 8002998:	460b      	mov	r3, r1
 800299a:	881b      	ldrh	r3, [r3, #0]
 800299c:	8013      	strh	r3, [r2, #0]

	strcat((char*) uartTxBuffer, (char*) hRylr998->rylr998Transmitter.address);
 800299e:	1d3b      	adds	r3, r7, #4
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f103 0210 	add.w	r2, r3, #16
 80029a6:	f107 0310 	add.w	r3, r7, #16
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f000 fadd 	bl	8002f6c <strcat>
	strcat((char*) uartTxBuffer, SEGMENT_SEPARATOR);
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fd fc0e 	bl	80001d8 <strlen>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	f107 0310 	add.w	r3, r7, #16
 80029c4:	4413      	add	r3, r2
 80029c6:	492f      	ldr	r1, [pc, #188]	; (8002a84 <rylr998Send+0x1a4>)
 80029c8:	461a      	mov	r2, r3
 80029ca:	460b      	mov	r3, r1
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	8013      	strh	r3, [r2, #0]

	packetSize += hRylr998->rylr998Transmitter.TxBuffer[1] - 1 - '0';
 80029d0:	1d3b      	adds	r3, r7, #4
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	7d5b      	ldrb	r3, [r3, #21]
 80029d6:	b29a      	uxth	r2, r3
 80029d8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 80029dc:	4413      	add	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	3b31      	subs	r3, #49	; 0x31
 80029e2:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
	//-1 is used to omit null character from consideration
	packetSizeAscii[0] = hRylr998->rylr998Transmitter.TxBuffer[1];
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	7d5a      	ldrb	r2, [r3, #21]
 80029ec:	f107 030c 	add.w	r3, r7, #12
 80029f0:	701a      	strb	r2, [r3, #0]
//	rylr998Int2Ascii(packetSizeAscii);


	strcat((char*) uartTxBuffer,  packetSizeAscii);
 80029f2:	f107 020c 	add.w	r2, r7, #12
 80029f6:	f107 0310 	add.w	r3, r7, #16
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f000 fab5 	bl	8002f6c <strcat>
	strcat((char*) uartTxBuffer, SEGMENT_SEPARATOR);
 8002a02:	f107 0310 	add.w	r3, r7, #16
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fbe6 	bl	80001d8 <strlen>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	4413      	add	r3, r2
 8002a16:	491b      	ldr	r1, [pc, #108]	; (8002a84 <rylr998Send+0x1a4>)
 8002a18:	461a      	mov	r2, r3
 8002a1a:	460b      	mov	r3, r1
 8002a1c:	881b      	ldrh	r3, [r3, #0]
 8002a1e:	8013      	strh	r3, [r2, #0]
	strcat((char*) uartTxBuffer, (char*) hRylr998->rylr998Transmitter.TxBuffer);
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f103 0214 	add.w	r2, r3, #20
 8002a28:	f107 0310 	add.w	r3, r7, #16
 8002a2c:	4611      	mov	r1, r2
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f000 fa9c 	bl	8002f6c <strcat>
	strcat((char*) uartTxBuffer, TERMINATOR);
 8002a34:	f107 0310 	add.w	r3, r7, #16
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f7fd fbcd 	bl	80001d8 <strlen>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	461a      	mov	r2, r3
 8002a42:	f107 0310 	add.w	r3, r7, #16
 8002a46:	4413      	add	r3, r2
 8002a48:	4a0f      	ldr	r2, [pc, #60]	; (8002a88 <rylr998Send+0x1a8>)
 8002a4a:	8811      	ldrh	r1, [r2, #0]
 8002a4c:	7892      	ldrb	r2, [r2, #2]
 8002a4e:	8019      	strh	r1, [r3, #0]
 8002a50:	709a      	strb	r2, [r3, #2]

	ret = HAL_UART_Transmit(&huart1, uartTxBuffer, packetSize, 10);
 8002a52:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8002a56:	f107 0110 	add.w	r1, r7, #16
 8002a5a:	230a      	movs	r3, #10
 8002a5c:	480b      	ldr	r0, [pc, #44]	; (8002a8c <rylr998Send+0x1ac>)
 8002a5e:	f7fe fff2 	bl	8001a46 <HAL_UART_Transmit>
 8002a62:	4603      	mov	r3, r0
 8002a64:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

	return ret;
 8002a68:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	08002fa4 	.word	0x08002fa4
 8002a7c:	08002fbc 	.word	0x08002fbc
 8002a80:	08002fb4 	.word	0x08002fb4
 8002a84:	08002fc4 	.word	0x08002fc4
 8002a88:	08002fa8 	.word	0x08002fa8
 8002a8c:	20000028 	.word	0x20000028

08002a90 <rylr998ReceivePacketParser>:

Rylr998_Status_t rylr998ReceivePacketParser(Rylr998Handler_t* hRylr998)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0c2      	sub	sp, #264	; 0x108
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	6018      	str	r0, [r3, #0]
	Rylr998_Status_t 	ret 					= Rylr998_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	Rylr998RxCommand_e  command;
	uint8_t 			uartRxBuffer[250] 		= {0};
 8002aa0:	f107 030c 	add.w	r3, r7, #12
 8002aa4:	22fa      	movs	r2, #250	; 0xfa
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 fa57 	bl	8002f5c <memset>

//	if(hRylr998->rylr998Receiver.rxBuffer[0] == RX_PACKET_START)
	if(!memcmp(hRylr998->rylr998Receiver.rxBuffer, RX_PACKET_START, 1))
 8002aae:	1d3b      	adds	r3, r7, #4
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f203 1307 	addw	r3, r3, #263	; 0x107
 8002ab6:	781a      	ldrb	r2, [r3, #0]
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <rylr998ReceivePacketParser+0xb8>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d134      	bne.n	8002b2a <rylr998ReceivePacketParser+0x9a>
	{
		command = rylr998ResponseFind	(hRylr998->rylr998Receiver.rxBuffer + RESPONSE_OFFSET);
 8002ac0:	1d3b      	adds	r3, r7, #4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f203 1307 	addw	r3, r3, #263	; 0x107
 8002ac8:	3301      	adds	r3, #1
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f982 	bl	8002dd4 <rylr998ResponseFind>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		switch (command)
 8002ad6:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d004      	beq.n	8002ae8 <rylr998ReceivePacketParser+0x58>
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d025      	beq.n	8002b2e <rylr998ReceivePacketParser+0x9e>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d025      	beq.n	8002b32 <rylr998ReceivePacketParser+0xa2>
				break;
			case Rylr998R_RCV:

				break;
			default:
				break;
 8002ae6:	e027      	b.n	8002b38 <rylr998ReceivePacketParser+0xa8>
				rylr998Ascii2Int(&hRylr998->rylr998Receiver.rxBuffer[ADDRESS_OFFSET]);
 8002ae8:	1d3b      	adds	r3, r7, #4
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f9b5 	bl	8002e60 <rylr998Ascii2Int>
				if(hRylr998->rylr998Receiver.rxBuffer[ADDRESS_OFFSET] == 0x00)
 8002af6:	1d3b      	adds	r3, r7, #4
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <rylr998ReceivePacketParser+0xa6>
					hRylr998->rylr998Receiver.address[0] = RYLR998_ADDRESS;
 8002b02:	1d3b      	adds	r3, r7, #4
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
					rylr998Int2Ascii(hRylr998->rylr998Receiver.address);
 8002b0c:	1d3b      	adds	r3, r7, #4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f993 	bl	8002e40 <rylr998Int2Ascii>
					rylr998SetAddress(hRylr998->rylr998Receiver.address);
 8002b1a:	1d3b      	adds	r3, r7, #4
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f503 7382 	add.w	r3, r3, #260	; 0x104
 8002b22:	4618      	mov	r0, r3
 8002b24:	f7ff fe7a 	bl	800281c <rylr998SetAddress>
				break;
 8002b28:	e005      	b.n	8002b36 <rylr998ReceivePacketParser+0xa6>
		}
	}
 8002b2a:	bf00      	nop
 8002b2c:	e004      	b.n	8002b38 <rylr998ReceivePacketParser+0xa8>
				break;
 8002b2e:	bf00      	nop
 8002b30:	e002      	b.n	8002b38 <rylr998ReceivePacketParser+0xa8>
				break;
 8002b32:	bf00      	nop
 8002b34:	e000      	b.n	8002b38 <rylr998ReceivePacketParser+0xa8>
				break;
 8002b36:	bf00      	nop

	return ret;
 8002b38:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	08002fc8 	.word	0x08002fc8

08002b4c <rylr998Get>:
}



Rylr998_Status_t rylr998Get(Rylr998Handler_t* hRylr998, Rylr998Command_e command)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b08a      	sub	sp, #40	; 0x28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
	Rylr998_Status_t 	ret 				= Rylr998_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t 			txPacketSize 		= 0;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t 			rxPacketSize 		= 0;
 8002b64:	2300      	movs	r3, #0
 8002b66:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t 			uartTxBuffer[20] 	= {0};
 8002b68:	f107 030c 	add.w	r3, r7, #12
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]

	memcpy(uartTxBuffer, 		 AT, AT_PRIFEX_SIZE);
 8002b78:	f107 030c 	add.w	r3, r7, #12
 8002b7c:	2203      	movs	r2, #3
 8002b7e:	4988      	ldr	r1, [pc, #544]	; (8002da0 <rylr998Get+0x254>)
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 f9e0 	bl	8002f46 <memcpy>

	switch (command)											//This part calculates the command length and
 8002b86:	78fb      	ldrb	r3, [r7, #3]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	f200 80c5 	bhi.w	8002d18 <rylr998Get+0x1cc>
 8002b8e:	a201      	add	r2, pc, #4	; (adr r2, 8002b94 <rylr998Get+0x48>)
 8002b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b94:	08002bb9 	.word	0x08002bb9
 8002b98:	08002bdb 	.word	0x08002bdb
 8002b9c:	08002c0b 	.word	0x08002c0b
 8002ba0:	08002c31 	.word	0x08002c31
 8002ba4:	08002c5d 	.word	0x08002c5d
 8002ba8:	08002c89 	.word	0x08002c89
 8002bac:	08002caf 	.word	0x08002caf
 8002bb0:	08002cd5 	.word	0x08002cd5
 8002bb4:	08002cf7 	.word	0x08002cf7
	{															//selects the wanted command string
		case Rylr998_BOUDRATE:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(IPR) - 1;
 8002bb8:	2309      	movs	r3, #9
 8002bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, IPR);
 8002bbe:	f107 030c 	add.w	r3, r7, #12
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fb08 	bl	80001d8 <strlen>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	461a      	mov	r2, r3
 8002bcc:	f107 030c 	add.w	r3, r7, #12
 8002bd0:	4413      	add	r3, r2
 8002bd2:	4a74      	ldr	r2, [pc, #464]	; (8002da4 <rylr998Get+0x258>)
 8002bd4:	6810      	ldr	r0, [r2, #0]
 8002bd6:	6018      	str	r0, [r3, #0]

			break;
 8002bd8:	e09e      	b.n	8002d18 <rylr998Get+0x1cc>
		case Rylr998_PARAMETER:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(PARAMETER) - 1;
 8002bda:	230f      	movs	r3, #15
 8002bdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, PARAMETER);
 8002be0:	f107 030c 	add.w	r3, r7, #12
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7fd faf7 	bl	80001d8 <strlen>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4413      	add	r3, r2
 8002bf4:	496c      	ldr	r1, [pc, #432]	; (8002da8 <rylr998Get+0x25c>)
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	460b      	mov	r3, r1
 8002bfa:	cb03      	ldmia	r3!, {r0, r1}
 8002bfc:	6010      	str	r0, [r2, #0]
 8002bfe:	6051      	str	r1, [r2, #4]
 8002c00:	881b      	ldrh	r3, [r3, #0]
 8002c02:	8113      	strh	r3, [r2, #8]
			rxPacketSize = 21;
 8002c04:	2315      	movs	r3, #21
 8002c06:	84bb      	strh	r3, [r7, #36]	; 0x24

			break;
 8002c08:	e086      	b.n	8002d18 <rylr998Get+0x1cc>
		case Rylr998_BAND:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(BAND) - 1;
 8002c0a:	230a      	movs	r3, #10
 8002c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, BAND);
 8002c10:	f107 030c 	add.w	r3, r7, #12
 8002c14:	4618      	mov	r0, r3
 8002c16:	f7fd fadf 	bl	80001d8 <strlen>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	f107 030c 	add.w	r3, r7, #12
 8002c22:	4413      	add	r3, r2
 8002c24:	4a61      	ldr	r2, [pc, #388]	; (8002dac <rylr998Get+0x260>)
 8002c26:	6810      	ldr	r0, [r2, #0]
 8002c28:	6018      	str	r0, [r3, #0]
 8002c2a:	7912      	ldrb	r2, [r2, #4]
 8002c2c:	711a      	strb	r2, [r3, #4]

			break;
 8002c2e:	e073      	b.n	8002d18 <rylr998Get+0x1cc>
		case Rylr998_ADDRESS:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(ADDRESS) - 1;
 8002c30:	230d      	movs	r3, #13
 8002c32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, ADDRESS);
 8002c36:	f107 030c 	add.w	r3, r7, #12
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7fd facc 	bl	80001d8 <strlen>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	f107 030c 	add.w	r3, r7, #12
 8002c48:	4413      	add	r3, r2
 8002c4a:	4959      	ldr	r1, [pc, #356]	; (8002db0 <rylr998Get+0x264>)
 8002c4c:	461a      	mov	r2, r3
 8002c4e:	460b      	mov	r3, r1
 8002c50:	cb03      	ldmia	r3!, {r0, r1}
 8002c52:	6010      	str	r0, [r2, #0]
 8002c54:	6051      	str	r1, [r2, #4]
			rxPacketSize = 12;
 8002c56:	230c      	movs	r3, #12
 8002c58:	84bb      	strh	r3, [r7, #36]	; 0x24

			break;
 8002c5a:	e05d      	b.n	8002d18 <rylr998Get+0x1cc>
		case Rylr998_NETWORKID:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(NETWORKID) - 1;
 8002c5c:	230f      	movs	r3, #15
 8002c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, NETWORKID);
 8002c62:	f107 030c 	add.w	r3, r7, #12
 8002c66:	4618      	mov	r0, r3
 8002c68:	f7fd fab6 	bl	80001d8 <strlen>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	f107 030c 	add.w	r3, r7, #12
 8002c74:	4413      	add	r3, r2
 8002c76:	494f      	ldr	r1, [pc, #316]	; (8002db4 <rylr998Get+0x268>)
 8002c78:	461a      	mov	r2, r3
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	cb03      	ldmia	r3!, {r0, r1}
 8002c7e:	6010      	str	r0, [r2, #0]
 8002c80:	6051      	str	r1, [r2, #4]
 8002c82:	881b      	ldrh	r3, [r3, #0]
 8002c84:	8113      	strh	r3, [r2, #8]

			break;
 8002c86:	e047      	b.n	8002d18 <rylr998Get+0x1cc>
		case Rylr998_CRFOP:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(CRFOP) - 1;
 8002c88:	230b      	movs	r3, #11
 8002c8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, CRFOP);
 8002c8e:	f107 030c 	add.w	r3, r7, #12
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd faa0 	bl	80001d8 <strlen>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f107 030c 	add.w	r3, r7, #12
 8002ca0:	4413      	add	r3, r2
 8002ca2:	4a45      	ldr	r2, [pc, #276]	; (8002db8 <rylr998Get+0x26c>)
 8002ca4:	6810      	ldr	r0, [r2, #0]
 8002ca6:	6018      	str	r0, [r3, #0]
 8002ca8:	8892      	ldrh	r2, [r2, #4]
 8002caa:	809a      	strh	r2, [r3, #4]

			break;
 8002cac:	e034      	b.n	8002d18 <rylr998Get+0x1cc>
		case Rylr998_SEND:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(SEND) - 1;
 8002cae:	230a      	movs	r3, #10
 8002cb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, SEND);
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fa8d 	bl	80001d8 <strlen>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	f107 030c 	add.w	r3, r7, #12
 8002cc6:	4413      	add	r3, r2
 8002cc8:	4a3c      	ldr	r2, [pc, #240]	; (8002dbc <rylr998Get+0x270>)
 8002cca:	6810      	ldr	r0, [r2, #0]
 8002ccc:	6018      	str	r0, [r3, #0]
 8002cce:	7912      	ldrb	r2, [r2, #4]
 8002cd0:	711a      	strb	r2, [r3, #4]

			break;
 8002cd2:	e021      	b.n	8002d18 <rylr998Get+0x1cc>
		case Rylr998_UID:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(UID) - 1;
 8002cd4:	2309      	movs	r3, #9
 8002cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, UID);
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fa7a 	bl	80001d8 <strlen>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	f107 030c 	add.w	r3, r7, #12
 8002cec:	4413      	add	r3, r2
 8002cee:	4a34      	ldr	r2, [pc, #208]	; (8002dc0 <rylr998Get+0x274>)
 8002cf0:	6810      	ldr	r0, [r2, #0]
 8002cf2:	6018      	str	r0, [r3, #0]

			break;
 8002cf4:	e010      	b.n	8002d18 <rylr998Get+0x1cc>
		case Rylr998_VER:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(VER) - 1;
 8002cf6:	2309      	movs	r3, #9
 8002cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, VER);
 8002cfc:	f107 030c 	add.w	r3, r7, #12
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fa69 	bl	80001d8 <strlen>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	f107 030c 	add.w	r3, r7, #12
 8002d0e:	4413      	add	r3, r2
 8002d10:	4a2c      	ldr	r2, [pc, #176]	; (8002dc4 <rylr998Get+0x278>)
 8002d12:	6810      	ldr	r0, [r2, #0]
 8002d14:	6018      	str	r0, [r3, #0]

			break;
 8002d16:	bf00      	nop
	}


	strcat((char*)uartTxBuffer,  CHECK);
 8002d18:	f107 030c 	add.w	r3, r7, #12
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fd fa5b 	bl	80001d8 <strlen>
 8002d22:	4603      	mov	r3, r0
 8002d24:	461a      	mov	r2, r3
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4926      	ldr	r1, [pc, #152]	; (8002dc8 <rylr998Get+0x27c>)
 8002d2e:	461a      	mov	r2, r3
 8002d30:	460b      	mov	r3, r1
 8002d32:	881b      	ldrh	r3, [r3, #0]
 8002d34:	8013      	strh	r3, [r2, #0]
	strcat((char*)uartTxBuffer,  TERMINATOR);
 8002d36:	f107 030c 	add.w	r3, r7, #12
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fa4c 	bl	80001d8 <strlen>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	f107 030c 	add.w	r3, r7, #12
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a20      	ldr	r2, [pc, #128]	; (8002dcc <rylr998Get+0x280>)
 8002d4c:	8811      	ldrh	r1, [r2, #0]
 8002d4e:	7892      	ldrb	r2, [r2, #2]
 8002d50:	8019      	strh	r1, [r3, #0]
 8002d52:	709a      	strb	r2, [r3, #2]

	ret = HAL_UART_Transmit(&huart1, uartTxBuffer, txPacketSize, 10);
 8002d54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	f107 010c 	add.w	r1, r7, #12
 8002d5e:	230a      	movs	r3, #10
 8002d60:	481b      	ldr	r0, [pc, #108]	; (8002dd0 <rylr998Get+0x284>)
 8002d62:	f7fe fe70 	bl	8001a46 <HAL_UART_Transmit>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	memset(hRylr998->rylr998Receiver.rxBuffer, RESET, 20);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f203 1307 	addw	r3, r3, #263	; 0x107
 8002d72:	2214      	movs	r2, #20
 8002d74:	2100      	movs	r1, #0
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 f8f0 	bl	8002f5c <memset>

	ret = HAL_UART_Receive_IT(&huart1, hRylr998->rylr998Receiver.rxBuffer, rxPacketSize);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f203 1307 	addw	r3, r3, #263	; 0x107
 8002d82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002d84:	4619      	mov	r1, r3
 8002d86:	4812      	ldr	r0, [pc, #72]	; (8002dd0 <rylr998Get+0x284>)
 8002d88:	f7fe fef6 	bl	8001b78 <HAL_UART_Receive_IT>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	return ret;
 8002d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3728      	adds	r7, #40	; 0x28
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	08002fa4 	.word	0x08002fa4
 8002da4:	08002fcc 	.word	0x08002fcc
 8002da8:	08002fd0 	.word	0x08002fd0
 8002dac:	08002fdc 	.word	0x08002fdc
 8002db0:	08002fac 	.word	0x08002fac
 8002db4:	08002fe4 	.word	0x08002fe4
 8002db8:	08002ff0 	.word	0x08002ff0
 8002dbc:	08002fbc 	.word	0x08002fbc
 8002dc0:	08002ff8 	.word	0x08002ff8
 8002dc4:	08002ffc 	.word	0x08002ffc
 8002dc8:	08002fb8 	.word	0x08002fb8
 8002dcc:	08002fa8 	.word	0x08002fa8
 8002dd0:	20000028 	.word	0x20000028

08002dd4 <rylr998ResponseFind>:

Rylr998RxCommand_e rylr998ResponseFind(uint8_t* rxBuffer)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b084      	sub	sp, #16
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
	Rylr998RxCommand_e 	ret 					= Rylr998R_NOT_FOUND;
 8002ddc:	2303      	movs	r3, #3
 8002dde:	73fb      	strb	r3, [r7, #15]
	if(!memcmp(rxBuffer, ADDRESS, 7))
 8002de0:	2207      	movs	r2, #7
 8002de2:	4914      	ldr	r1, [pc, #80]	; (8002e34 <rylr998ResponseFind+0x60>)
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f89f 	bl	8002f28 <memcmp>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d103      	bne.n	8002df8 <rylr998ResponseFind+0x24>
	{
		return ret = Rylr998R_ADDRESS;
 8002df0:	2301      	movs	r3, #1
 8002df2:	73fb      	strb	r3, [r7, #15]
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	e018      	b.n	8002e2a <rylr998ResponseFind+0x56>
	}
	else if(!memcmp(rxBuffer, RCV, 3))
 8002df8:	2203      	movs	r2, #3
 8002dfa:	490f      	ldr	r1, [pc, #60]	; (8002e38 <rylr998ResponseFind+0x64>)
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	f000 f893 	bl	8002f28 <memcmp>
 8002e02:	4603      	mov	r3, r0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d103      	bne.n	8002e10 <rylr998ResponseFind+0x3c>
	{
		return ret = Rylr998R_RCV;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	73fb      	strb	r3, [r7, #15]
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
 8002e0e:	e00c      	b.n	8002e2a <rylr998ResponseFind+0x56>
	}
	else if(!memcmp(rxBuffer, OK, 2))
 8002e10:	2202      	movs	r2, #2
 8002e12:	490a      	ldr	r1, [pc, #40]	; (8002e3c <rylr998ResponseFind+0x68>)
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f887 	bl	8002f28 <memcmp>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d103      	bne.n	8002e28 <rylr998ResponseFind+0x54>
	{
		return ret = Rylr998R_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	73fb      	strb	r3, [r7, #15]
 8002e24:	7bfb      	ldrb	r3, [r7, #15]
 8002e26:	e000      	b.n	8002e2a <rylr998ResponseFind+0x56>
	}
	return ret;
 8002e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3710      	adds	r7, #16
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	08002fac 	.word	0x08002fac
 8002e38:	08003000 	.word	0x08003000
 8002e3c:	08003004 	.word	0x08003004

08002e40 <rylr998Int2Ascii>:

void rylr998Int2Ascii(uint8_t* value)
{
 8002e40:	b480      	push	{r7}
 8002e42:	b083      	sub	sp, #12
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
	*value += 0x30;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	3330      	adds	r3, #48	; 0x30
 8002e4e:	b2da      	uxtb	r2, r3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	701a      	strb	r2, [r3, #0]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr

08002e60 <rylr998Ascii2Int>:

void rylr998Ascii2Int(uint8_t* value)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
	*value -= 0x30;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	3b30      	subs	r3, #48	; 0x30
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	701a      	strb	r2, [r3, #0]
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <rylr998_enable>:

void rylr998_enable(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RYLR998_RST_GPIO_Port, RYLR998_RST_Pin, GPIO_PIN_SET);
 8002e84:	2201      	movs	r2, #1
 8002e86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002e8a:	4802      	ldr	r0, [pc, #8]	; (8002e94 <rylr998_enable+0x14>)
 8002e8c:	f7fe f914 	bl	80010b8 <HAL_GPIO_WritePin>
}
 8002e90:	bf00      	nop
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	40020400 	.word	0x40020400

08002e98 <uloraCommunicationTest>:


#include "ulora.h"

Ulora_Status_t uloraCommunicationTest(uint8_t* payloadBuffer)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
	ULoraHandler_t uloraHandler;
	Ulora_Status_t ret = Ulora_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	73fb      	strb	r3, [r7, #15]
	uloraHandler.uloraPacketSize  = ULORA_CONN_COUNT_SIZE;
 8002ea4:	2304      	movs	r3, #4
 8002ea6:	737b      	strb	r3, [r7, #13]
	uloraHandler.uloraDevicesCount = 1;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73bb      	strb	r3, [r7, #14]

	payloadBuffer[0] = ULORA_CONN_COUNT + '0';
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2232      	movs	r2, #50	; 0x32
 8002eb0:	701a      	strb	r2, [r3, #0]
	payloadBuffer[1] = uloraHandler.uloraPacketSize + '0';
 8002eb2:	7b7a      	ldrb	r2, [r7, #13]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	3230      	adds	r2, #48	; 0x30
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]
	payloadBuffer[2] = uloraHandler.uloraDevicesCount + '0';
 8002ebe:	7bba      	ldrb	r2, [r7, #14]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	3230      	adds	r2, #48	; 0x30
 8002ec6:	b2d2      	uxtb	r2, r2
 8002ec8:	701a      	strb	r2, [r3, #0]
//	payloadBuffer[3] =  uloraPacketChecksum(payloadBuffer,
//											uloraHandler.uloraPacketSize) + '0';
	payloadBuffer[3] = '7';
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	3303      	adds	r3, #3
 8002ece:	2237      	movs	r2, #55	; 0x37
 8002ed0:	701a      	strb	r2, [r3, #0]
	return ret;
 8002ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <__libc_init_array>:
 8002ee0:	b570      	push	{r4, r5, r6, lr}
 8002ee2:	4e0d      	ldr	r6, [pc, #52]	; (8002f18 <__libc_init_array+0x38>)
 8002ee4:	4c0d      	ldr	r4, [pc, #52]	; (8002f1c <__libc_init_array+0x3c>)
 8002ee6:	1ba4      	subs	r4, r4, r6
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	2500      	movs	r5, #0
 8002eec:	42a5      	cmp	r5, r4
 8002eee:	d109      	bne.n	8002f04 <__libc_init_array+0x24>
 8002ef0:	4e0b      	ldr	r6, [pc, #44]	; (8002f20 <__libc_init_array+0x40>)
 8002ef2:	4c0c      	ldr	r4, [pc, #48]	; (8002f24 <__libc_init_array+0x44>)
 8002ef4:	f000 f84a 	bl	8002f8c <_init>
 8002ef8:	1ba4      	subs	r4, r4, r6
 8002efa:	10a4      	asrs	r4, r4, #2
 8002efc:	2500      	movs	r5, #0
 8002efe:	42a5      	cmp	r5, r4
 8002f00:	d105      	bne.n	8002f0e <__libc_init_array+0x2e>
 8002f02:	bd70      	pop	{r4, r5, r6, pc}
 8002f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f08:	4798      	blx	r3
 8002f0a:	3501      	adds	r5, #1
 8002f0c:	e7ee      	b.n	8002eec <__libc_init_array+0xc>
 8002f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002f12:	4798      	blx	r3
 8002f14:	3501      	adds	r5, #1
 8002f16:	e7f2      	b.n	8002efe <__libc_init_array+0x1e>
 8002f18:	08003028 	.word	0x08003028
 8002f1c:	08003028 	.word	0x08003028
 8002f20:	08003028 	.word	0x08003028
 8002f24:	0800302c 	.word	0x0800302c

08002f28 <memcmp>:
 8002f28:	b530      	push	{r4, r5, lr}
 8002f2a:	2400      	movs	r4, #0
 8002f2c:	42a2      	cmp	r2, r4
 8002f2e:	d101      	bne.n	8002f34 <memcmp+0xc>
 8002f30:	2000      	movs	r0, #0
 8002f32:	e007      	b.n	8002f44 <memcmp+0x1c>
 8002f34:	5d03      	ldrb	r3, [r0, r4]
 8002f36:	3401      	adds	r4, #1
 8002f38:	190d      	adds	r5, r1, r4
 8002f3a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8002f3e:	42ab      	cmp	r3, r5
 8002f40:	d0f4      	beq.n	8002f2c <memcmp+0x4>
 8002f42:	1b58      	subs	r0, r3, r5
 8002f44:	bd30      	pop	{r4, r5, pc}

08002f46 <memcpy>:
 8002f46:	b510      	push	{r4, lr}
 8002f48:	1e43      	subs	r3, r0, #1
 8002f4a:	440a      	add	r2, r1
 8002f4c:	4291      	cmp	r1, r2
 8002f4e:	d100      	bne.n	8002f52 <memcpy+0xc>
 8002f50:	bd10      	pop	{r4, pc}
 8002f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002f5a:	e7f7      	b.n	8002f4c <memcpy+0x6>

08002f5c <memset>:
 8002f5c:	4402      	add	r2, r0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d100      	bne.n	8002f66 <memset+0xa>
 8002f64:	4770      	bx	lr
 8002f66:	f803 1b01 	strb.w	r1, [r3], #1
 8002f6a:	e7f9      	b.n	8002f60 <memset+0x4>

08002f6c <strcat>:
 8002f6c:	b510      	push	{r4, lr}
 8002f6e:	4603      	mov	r3, r0
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	1c5c      	adds	r4, r3, #1
 8002f74:	b93a      	cbnz	r2, 8002f86 <strcat+0x1a>
 8002f76:	3b01      	subs	r3, #1
 8002f78:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002f7c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002f80:	2a00      	cmp	r2, #0
 8002f82:	d1f9      	bne.n	8002f78 <strcat+0xc>
 8002f84:	bd10      	pop	{r4, pc}
 8002f86:	4623      	mov	r3, r4
 8002f88:	e7f2      	b.n	8002f70 <strcat+0x4>
	...

08002f8c <_init>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr

08002f98 <_fini>:
 8002f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f9a:	bf00      	nop
 8002f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f9e:	bc08      	pop	{r3}
 8002fa0:	469e      	mov	lr, r3
 8002fa2:	4770      	bx	lr
