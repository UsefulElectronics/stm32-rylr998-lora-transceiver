
LoRa Transceiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08004e18  08004e18  00014e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ea8  08004ea8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004ea8  08004ea8  00014ea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004eb0  08004eb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000388  2000000c  08004ec4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000394  08004ec4  00020394  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee05  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021ad  00000000  00000000  0002ee41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d18  00000000  00000000  00030ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c50  00000000  00000000  00031d08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001702e  00000000  00000000  00032958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e150  00000000  00000000  00049986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dde5  00000000  00000000  00057ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e58bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003714  00000000  00000000  000e590c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004e00 	.word	0x08004e00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08004e00 	.word	0x08004e00

080001d8 <strlen>:
 80001d8:	4603      	mov	r3, r0
 80001da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001de:	2a00      	cmp	r2, #0
 80001e0:	d1fb      	bne.n	80001da <strlen+0x2>
 80001e2:	1a18      	subs	r0, r3, r0
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr

080001e8 <__aeabi_uldivmod>:
 80001e8:	b953      	cbnz	r3, 8000200 <__aeabi_uldivmod+0x18>
 80001ea:	b94a      	cbnz	r2, 8000200 <__aeabi_uldivmod+0x18>
 80001ec:	2900      	cmp	r1, #0
 80001ee:	bf08      	it	eq
 80001f0:	2800      	cmpeq	r0, #0
 80001f2:	bf1c      	itt	ne
 80001f4:	f04f 31ff 	movne.w	r1, #4294967295
 80001f8:	f04f 30ff 	movne.w	r0, #4294967295
 80001fc:	f000 b974 	b.w	80004e8 <__aeabi_idiv0>
 8000200:	f1ad 0c08 	sub.w	ip, sp, #8
 8000204:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000208:	f000 f806 	bl	8000218 <__udivmoddi4>
 800020c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000210:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000214:	b004      	add	sp, #16
 8000216:	4770      	bx	lr

08000218 <__udivmoddi4>:
 8000218:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800021c:	9d08      	ldr	r5, [sp, #32]
 800021e:	4604      	mov	r4, r0
 8000220:	468e      	mov	lr, r1
 8000222:	2b00      	cmp	r3, #0
 8000224:	d14d      	bne.n	80002c2 <__udivmoddi4+0xaa>
 8000226:	428a      	cmp	r2, r1
 8000228:	4694      	mov	ip, r2
 800022a:	d969      	bls.n	8000300 <__udivmoddi4+0xe8>
 800022c:	fab2 f282 	clz	r2, r2
 8000230:	b152      	cbz	r2, 8000248 <__udivmoddi4+0x30>
 8000232:	fa01 f302 	lsl.w	r3, r1, r2
 8000236:	f1c2 0120 	rsb	r1, r2, #32
 800023a:	fa20 f101 	lsr.w	r1, r0, r1
 800023e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000242:	ea41 0e03 	orr.w	lr, r1, r3
 8000246:	4094      	lsls	r4, r2
 8000248:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800024c:	0c21      	lsrs	r1, r4, #16
 800024e:	fbbe f6f8 	udiv	r6, lr, r8
 8000252:	fa1f f78c 	uxth.w	r7, ip
 8000256:	fb08 e316 	mls	r3, r8, r6, lr
 800025a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025e:	fb06 f107 	mul.w	r1, r6, r7
 8000262:	4299      	cmp	r1, r3
 8000264:	d90a      	bls.n	800027c <__udivmoddi4+0x64>
 8000266:	eb1c 0303 	adds.w	r3, ip, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 811f 	bcs.w	80004b0 <__udivmoddi4+0x298>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 811c 	bls.w	80004b0 <__udivmoddi4+0x298>
 8000278:	3e02      	subs	r6, #2
 800027a:	4463      	add	r3, ip
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 f707 	mul.w	r7, r0, r7
 8000290:	42a7      	cmp	r7, r4
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x92>
 8000294:	eb1c 0404 	adds.w	r4, ip, r4
 8000298:	f100 33ff 	add.w	r3, r0, #4294967295
 800029c:	f080 810a 	bcs.w	80004b4 <__udivmoddi4+0x29c>
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	f240 8107 	bls.w	80004b4 <__udivmoddi4+0x29c>
 80002a6:	4464      	add	r4, ip
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ae:	1be4      	subs	r4, r4, r7
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa4>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xc2>
 80002c6:	2d00      	cmp	r5, #0
 80002c8:	f000 80ef 	beq.w	80004aa <__udivmoddi4+0x292>
 80002cc:	2600      	movs	r6, #0
 80002ce:	e9c5 0100 	strd	r0, r1, [r5]
 80002d2:	4630      	mov	r0, r6
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f683 	clz	r6, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d14a      	bne.n	8000378 <__udivmoddi4+0x160>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd4>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80f9 	bhi.w	80004de <__udivmoddi4+0x2c6>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa4>
 80002fa:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa4>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xec>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 8092 	bne.w	8000432 <__udivmoddi4+0x21a>
 800030e:	eba1 010c 	sub.w	r1, r1, ip
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	2601      	movs	r6, #1
 800031c:	0c20      	lsrs	r0, r4, #16
 800031e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000322:	fb07 1113 	mls	r1, r7, r3, r1
 8000326:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800032a:	fb0e f003 	mul.w	r0, lr, r3
 800032e:	4288      	cmp	r0, r1
 8000330:	d908      	bls.n	8000344 <__udivmoddi4+0x12c>
 8000332:	eb1c 0101 	adds.w	r1, ip, r1
 8000336:	f103 38ff 	add.w	r8, r3, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x12a>
 800033c:	4288      	cmp	r0, r1
 800033e:	f200 80cb 	bhi.w	80004d8 <__udivmoddi4+0x2c0>
 8000342:	4643      	mov	r3, r8
 8000344:	1a09      	subs	r1, r1, r0
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb1 f0f7 	udiv	r0, r1, r7
 800034c:	fb07 1110 	mls	r1, r7, r0, r1
 8000350:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000354:	fb0e fe00 	mul.w	lr, lr, r0
 8000358:	45a6      	cmp	lr, r4
 800035a:	d908      	bls.n	800036e <__udivmoddi4+0x156>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 31ff 	add.w	r1, r0, #4294967295
 8000364:	d202      	bcs.n	800036c <__udivmoddi4+0x154>
 8000366:	45a6      	cmp	lr, r4
 8000368:	f200 80bb 	bhi.w	80004e2 <__udivmoddi4+0x2ca>
 800036c:	4608      	mov	r0, r1
 800036e:	eba4 040e 	sub.w	r4, r4, lr
 8000372:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000376:	e79c      	b.n	80002b2 <__udivmoddi4+0x9a>
 8000378:	f1c6 0720 	rsb	r7, r6, #32
 800037c:	40b3      	lsls	r3, r6
 800037e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000382:	ea4c 0c03 	orr.w	ip, ip, r3
 8000386:	fa20 f407 	lsr.w	r4, r0, r7
 800038a:	fa01 f306 	lsl.w	r3, r1, r6
 800038e:	431c      	orrs	r4, r3
 8000390:	40f9      	lsrs	r1, r7
 8000392:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000396:	fa00 f306 	lsl.w	r3, r0, r6
 800039a:	fbb1 f8f9 	udiv	r8, r1, r9
 800039e:	0c20      	lsrs	r0, r4, #16
 80003a0:	fa1f fe8c 	uxth.w	lr, ip
 80003a4:	fb09 1118 	mls	r1, r9, r8, r1
 80003a8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ac:	fb08 f00e 	mul.w	r0, r8, lr
 80003b0:	4288      	cmp	r0, r1
 80003b2:	fa02 f206 	lsl.w	r2, r2, r6
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b8>
 80003b8:	eb1c 0101 	adds.w	r1, ip, r1
 80003bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c0:	f080 8088 	bcs.w	80004d4 <__udivmoddi4+0x2bc>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f240 8085 	bls.w	80004d4 <__udivmoddi4+0x2bc>
 80003ca:	f1a8 0802 	sub.w	r8, r8, #2
 80003ce:	4461      	add	r1, ip
 80003d0:	1a09      	subs	r1, r1, r0
 80003d2:	b2a4      	uxth	r4, r4
 80003d4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d8:	fb09 1110 	mls	r1, r9, r0, r1
 80003dc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e4:	458e      	cmp	lr, r1
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1e2>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f0:	d26c      	bcs.n	80004cc <__udivmoddi4+0x2b4>
 80003f2:	458e      	cmp	lr, r1
 80003f4:	d96a      	bls.n	80004cc <__udivmoddi4+0x2b4>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4461      	add	r1, ip
 80003fa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fe:	fba0 9402 	umull	r9, r4, r0, r2
 8000402:	eba1 010e 	sub.w	r1, r1, lr
 8000406:	42a1      	cmp	r1, r4
 8000408:	46c8      	mov	r8, r9
 800040a:	46a6      	mov	lr, r4
 800040c:	d356      	bcc.n	80004bc <__udivmoddi4+0x2a4>
 800040e:	d053      	beq.n	80004b8 <__udivmoddi4+0x2a0>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x212>
 8000412:	ebb3 0208 	subs.w	r2, r3, r8
 8000416:	eb61 010e 	sbc.w	r1, r1, lr
 800041a:	fa01 f707 	lsl.w	r7, r1, r7
 800041e:	fa22 f306 	lsr.w	r3, r2, r6
 8000422:	40f1      	lsrs	r1, r6
 8000424:	431f      	orrs	r7, r3
 8000426:	e9c5 7100 	strd	r7, r1, [r5]
 800042a:	2600      	movs	r6, #0
 800042c:	4631      	mov	r1, r6
 800042e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000432:	f1c2 0320 	rsb	r3, r2, #32
 8000436:	40d8      	lsrs	r0, r3
 8000438:	fa0c fc02 	lsl.w	ip, ip, r2
 800043c:	fa21 f303 	lsr.w	r3, r1, r3
 8000440:	4091      	lsls	r1, r2
 8000442:	4301      	orrs	r1, r0
 8000444:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000450:	fb07 3610 	mls	r6, r7, r0, r3
 8000454:	0c0b      	lsrs	r3, r1, #16
 8000456:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800045a:	fb00 f60e 	mul.w	r6, r0, lr
 800045e:	429e      	cmp	r6, r3
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d908      	bls.n	8000478 <__udivmoddi4+0x260>
 8000466:	eb1c 0303 	adds.w	r3, ip, r3
 800046a:	f100 38ff 	add.w	r8, r0, #4294967295
 800046e:	d22f      	bcs.n	80004d0 <__udivmoddi4+0x2b8>
 8000470:	429e      	cmp	r6, r3
 8000472:	d92d      	bls.n	80004d0 <__udivmoddi4+0x2b8>
 8000474:	3802      	subs	r0, #2
 8000476:	4463      	add	r3, ip
 8000478:	1b9b      	subs	r3, r3, r6
 800047a:	b289      	uxth	r1, r1
 800047c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000480:	fb07 3316 	mls	r3, r7, r6, r3
 8000484:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000488:	fb06 f30e 	mul.w	r3, r6, lr
 800048c:	428b      	cmp	r3, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x28a>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f106 38ff 	add.w	r8, r6, #4294967295
 8000498:	d216      	bcs.n	80004c8 <__udivmoddi4+0x2b0>
 800049a:	428b      	cmp	r3, r1
 800049c:	d914      	bls.n	80004c8 <__udivmoddi4+0x2b0>
 800049e:	3e02      	subs	r6, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	1ac9      	subs	r1, r1, r3
 80004a4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a8:	e738      	b.n	800031c <__udivmoddi4+0x104>
 80004aa:	462e      	mov	r6, r5
 80004ac:	4628      	mov	r0, r5
 80004ae:	e705      	b.n	80002bc <__udivmoddi4+0xa4>
 80004b0:	4606      	mov	r6, r0
 80004b2:	e6e3      	b.n	800027c <__udivmoddi4+0x64>
 80004b4:	4618      	mov	r0, r3
 80004b6:	e6f8      	b.n	80002aa <__udivmoddi4+0x92>
 80004b8:	454b      	cmp	r3, r9
 80004ba:	d2a9      	bcs.n	8000410 <__udivmoddi4+0x1f8>
 80004bc:	ebb9 0802 	subs.w	r8, r9, r2
 80004c0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c4:	3801      	subs	r0, #1
 80004c6:	e7a3      	b.n	8000410 <__udivmoddi4+0x1f8>
 80004c8:	4646      	mov	r6, r8
 80004ca:	e7ea      	b.n	80004a2 <__udivmoddi4+0x28a>
 80004cc:	4620      	mov	r0, r4
 80004ce:	e794      	b.n	80003fa <__udivmoddi4+0x1e2>
 80004d0:	4640      	mov	r0, r8
 80004d2:	e7d1      	b.n	8000478 <__udivmoddi4+0x260>
 80004d4:	46d0      	mov	r8, sl
 80004d6:	e77b      	b.n	80003d0 <__udivmoddi4+0x1b8>
 80004d8:	3b02      	subs	r3, #2
 80004da:	4461      	add	r1, ip
 80004dc:	e732      	b.n	8000344 <__udivmoddi4+0x12c>
 80004de:	4630      	mov	r0, r6
 80004e0:	e709      	b.n	80002f6 <__udivmoddi4+0xde>
 80004e2:	4464      	add	r4, ip
 80004e4:	3802      	subs	r0, #2
 80004e6:	e742      	b.n	800036e <__udivmoddi4+0x156>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004ec:	b598      	push	{r3, r4, r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f0:	f000 fc7a 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f4:	f000 f8dc 	bl	80006b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f8:	f000 f994 	bl	8000824 <MX_GPIO_Init>
  MX_DMA_Init();
 80004fc:	f000 f96a 	bl	80007d4 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f93e 	bl	8000780 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MX_TIM2_Init();
 8000504:	f000 fa1e 	bl	8000944 <MX_TIM2_Init>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000508:	2100      	movs	r1, #0
 800050a:	4861      	ldr	r0, [pc, #388]	; (8000690 <main+0x1a4>)
 800050c:	f002 f86a 	bl	80025e4 <HAL_TIM_PWM_Start>

  rylr998_enable();
 8000510:	f004 fa6a 	bl	80049e8 <rylr998_enable>
  HAL_Delay(100);
 8000514:	2064      	movs	r0, #100	; 0x64
 8000516:	f000 fcd9 	bl	8000ecc <HAL_Delay>
  rylr998Get(&hLoRaModule, Rylr998_ADDRESS);
 800051a:	2103      	movs	r1, #3
 800051c:	485d      	ldr	r0, [pc, #372]	; (8000694 <main+0x1a8>)
 800051e:	f004 f8b9 	bl	8004694 <rylr998Get>
  HAL_Delay(10);
 8000522:	200a      	movs	r0, #10
 8000524:	f000 fcd2 	bl	8000ecc <HAL_Delay>
  hLoRaModule.rylr998Transmitter.timer = HAL_GetTick();
 8000528:	f000 fcc4 	bl	8000eb4 <HAL_GetTick>
 800052c:	4603      	mov	r3, r0
 800052e:	4a59      	ldr	r2, [pc, #356]	; (8000694 <main+0x1a8>)
 8000530:	6193      	str	r3, [r2, #24]
  hLoRaModule.rylr998Transmitter.address[0] = '1';
 8000532:	4b58      	ldr	r3, [pc, #352]	; (8000694 <main+0x1a8>)
 8000534:	2231      	movs	r2, #49	; 0x31
 8000536:	771a      	strb	r2, [r3, #28]
  HAL_UARTEx_ReceiveToIdle_DMA(&huart1, hLoRaModule.rylr998Receiver.rxBuffer, 100);
 8000538:	2264      	movs	r2, #100	; 0x64
 800053a:	4957      	ldr	r1, [pc, #348]	; (8000698 <main+0x1ac>)
 800053c:	4857      	ldr	r0, [pc, #348]	; (800069c <main+0x1b0>)
 800053e:	f002 fcf8 	bl	8002f32 <HAL_UARTEx_ReceiveToIdle_DMA>
  HAL_Delay(10);
 8000542:	200a      	movs	r0, #10
 8000544:	f000 fcc2 	bl	8000ecc <HAL_Delay>


  sirenInitialize(&hSiren,
 8000548:	2301      	movs	r3, #1
 800054a:	2232      	movs	r2, #50	; 0x32
 800054c:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8000550:	4853      	ldr	r0, [pc, #332]	; (80006a0 <main+0x1b4>)
 8000552:	f004 fbb3 	bl	8004cbc <sirenInitialize>
  					500,
  					50,
  					1);
  sirenSoundLevelSet(&hSiren, (uint32_t*) &htim2.Instance->CCR1, 50);
 8000556:	4b4e      	ldr	r3, [pc, #312]	; (8000690 <main+0x1a4>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	3334      	adds	r3, #52	; 0x34
 800055c:	2232      	movs	r2, #50	; 0x32
 800055e:	4619      	mov	r1, r3
 8000560:	484f      	ldr	r0, [pc, #316]	; (80006a0 <main+0x1b4>)
 8000562:	f004 fb99 	bl	8004c98 <sirenSoundLevelSet>

  sirenStop(&hSiren, (uint32_t*) &htim2.Instance->CCR1);
 8000566:	4b4a      	ldr	r3, [pc, #296]	; (8000690 <main+0x1a4>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	3334      	adds	r3, #52	; 0x34
 800056c:	4619      	mov	r1, r3
 800056e:	484c      	ldr	r0, [pc, #304]	; (80006a0 <main+0x1b4>)
 8000570:	f004 fbd7 	bl	8004d22 <sirenStop>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		//Start packet parsing once a packet is received over UART
		if(RYLR998_ReadInterruptFlag())
 8000574:	4b47      	ldr	r3, [pc, #284]	; (8000694 <main+0x1a8>)
 8000576:	7b1b      	ldrb	r3, [r3, #12]
 8000578:	f003 0301 	and.w	r3, r3, #1
 800057c:	b2db      	uxtb	r3, r3
 800057e:	2b00      	cmp	r3, #0
 8000580:	d007      	beq.n	8000592 <main+0xa6>
		{
			  RYLR998_WriteInterruptFlag(DISABLE);
 8000582:	4a44      	ldr	r2, [pc, #272]	; (8000694 <main+0x1a8>)
 8000584:	7b13      	ldrb	r3, [r2, #12]
 8000586:	f36f 0300 	bfc	r3, #0, #1
 800058a:	7313      	strb	r3, [r2, #12]

			  rylr998ReceivePacketParser(&hLoRaModule);
 800058c:	4841      	ldr	r0, [pc, #260]	; (8000694 <main+0x1a8>)
 800058e:	f003 fff5 	bl	800457c <rylr998ReceivePacketParser>
		}
		//Turn on the Blue LED for 300ms when ULoRa ACK is received
		if(RYLR998_ReadSuccessfulTxFlag())
 8000592:	4b40      	ldr	r3, [pc, #256]	; (8000694 <main+0x1a8>)
 8000594:	7b1b      	ldrb	r3, [r3, #12]
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	b2db      	uxtb	r3, r3
 800059c:	2b00      	cmp	r3, #0
 800059e:	d00f      	beq.n	80005c0 <main+0xd4>
		{
			 RYLR998_WriteSuccessfulTxFlag(DISABLE);
 80005a0:	4a3c      	ldr	r2, [pc, #240]	; (8000694 <main+0x1a8>)
 80005a2:	7b13      	ldrb	r3, [r2, #12]
 80005a4:	f36f 0382 	bfc	r3, #2, #1
 80005a8:	7313      	strb	r3, [r2, #12]
			 hLoRaModule.rylr998Timer = HAL_GetTick();
 80005aa:	f000 fc83 	bl	8000eb4 <HAL_GetTick>
 80005ae:	4603      	mov	r3, r0
 80005b0:	4a38      	ldr	r2, [pc, #224]	; (8000694 <main+0x1a8>)
 80005b2:	6053      	str	r3, [r2, #4]
			 LED_ON;
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	483a      	ldr	r0, [pc, #232]	; (80006a4 <main+0x1b8>)
 80005bc:	f001 fb5a 	bl	8001c74 <HAL_GPIO_WritePin>
		}
		//Send ULORA_CONN_COUNT when a button press is detected every on second
		if(!HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin))
 80005c0:	2101      	movs	r1, #1
 80005c2:	4839      	ldr	r0, [pc, #228]	; (80006a8 <main+0x1bc>)
 80005c4:	f001 fb3e 	bl	8001c44 <HAL_GPIO_ReadPin>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d111      	bne.n	80005f2 <main+0x106>
		{
			if(HAL_GetTick() - hLoRaModule.rylr998Transmitter.timer >= 1000)
 80005ce:	f000 fc71 	bl	8000eb4 <HAL_GetTick>
 80005d2:	4602      	mov	r2, r0
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <main+0x1a8>)
 80005d6:	699b      	ldr	r3, [r3, #24]
 80005d8:	1ad3      	subs	r3, r2, r3
 80005da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005de:	d308      	bcc.n	80005f2 <main+0x106>
			{
				hLoRaModule.rylr998Transmitter.timer = HAL_GetTick();
 80005e0:	f000 fc68 	bl	8000eb4 <HAL_GetTick>
 80005e4:	4603      	mov	r3, r0
 80005e6:	4a2b      	ldr	r2, [pc, #172]	; (8000694 <main+0x1a8>)
 80005e8:	6193      	str	r3, [r2, #24]

				rylr998Send(&hLoRaModule, ULORA_CONN_COUNT);
 80005ea:	2102      	movs	r1, #2
 80005ec:	4829      	ldr	r0, [pc, #164]	; (8000694 <main+0x1a8>)
 80005ee:	f003 fe8d 	bl	800430c <rylr998Send>
			}
		}
		//Keep blue LED turned on for 300ms
		if(HAL_GetTick() - hLoRaModule.rylr998Timer > 300)
 80005f2:	f000 fc5f 	bl	8000eb4 <HAL_GetTick>
 80005f6:	4602      	mov	r2, r0
 80005f8:	4b26      	ldr	r3, [pc, #152]	; (8000694 <main+0x1a8>)
 80005fa:	685b      	ldr	r3, [r3, #4]
 80005fc:	1ad3      	subs	r3, r2, r3
 80005fe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000602:	d905      	bls.n	8000610 <main+0x124>
		{
		  LED_OFF;
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800060a:	4826      	ldr	r0, [pc, #152]	; (80006a4 <main+0x1b8>)
 800060c:	f001 fb32 	bl	8001c74 <HAL_GPIO_WritePin>
		}
		if(RYLR998_ReadPirSensorPackRxFlag())
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <main+0x1a8>)
 8000612:	7b1b      	ldrb	r3, [r3, #12]
 8000614:	f003 0308 	and.w	r3, r3, #8
 8000618:	b2db      	uxtb	r3, r3
 800061a:	2b00      	cmp	r3, #0
 800061c:	d013      	beq.n	8000646 <main+0x15a>
		{
			RYLR998_WritePirSensorPackRxFlag(DISABLE);
 800061e:	4a1d      	ldr	r2, [pc, #116]	; (8000694 <main+0x1a8>)
 8000620:	7b13      	ldrb	r3, [r2, #12]
 8000622:	f36f 03c3 	bfc	r3, #3, #1
 8000626:	7313      	strb	r3, [r2, #12]
			rylr998Send(&hLoRaModule, ULORA_ACK);
 8000628:	2101      	movs	r1, #1
 800062a:	481a      	ldr	r0, [pc, #104]	; (8000694 <main+0x1a8>)
 800062c:	f003 fe6e 	bl	800430c <rylr998Send>
			hLoRaModule.rylr998Timer = HAL_GetTick();
 8000630:	f000 fc40 	bl	8000eb4 <HAL_GetTick>
 8000634:	4603      	mov	r3, r0
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <main+0x1a8>)
 8000638:	6053      	str	r3, [r2, #4]
			LED_ON;
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000640:	4818      	ldr	r0, [pc, #96]	; (80006a4 <main+0x1b8>)
 8000642:	f001 fb17 	bl	8001c74 <HAL_GPIO_WritePin>
		}

		if(hUloraProtocol.uloraPirDetection)
 8000646:	4b19      	ldr	r3, [pc, #100]	; (80006ac <main+0x1c0>)
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d00c      	beq.n	8000668 <main+0x17c>
		{
			sirenStart(&hSiren,(uint32_t*) &htim2.Instance->CCR1, HAL_GetTick());
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <main+0x1a4>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	f103 0434 	add.w	r4, r3, #52	; 0x34
 8000656:	f000 fc2d 	bl	8000eb4 <HAL_GetTick>
 800065a:	4603      	mov	r3, r0
 800065c:	461a      	mov	r2, r3
 800065e:	4621      	mov	r1, r4
 8000660:	480f      	ldr	r0, [pc, #60]	; (80006a0 <main+0x1b4>)
 8000662:	f004 fb45 	bl	8004cf0 <sirenStart>
 8000666:	e006      	b.n	8000676 <main+0x18a>
		}
		else
		{
			sirenStop(&hSiren,(uint32_t*) &htim2.Instance->CCR1);
 8000668:	4b09      	ldr	r3, [pc, #36]	; (8000690 <main+0x1a4>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3334      	adds	r3, #52	; 0x34
 800066e:	4619      	mov	r1, r3
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <main+0x1b4>)
 8000672:	f004 fb56 	bl	8004d22 <sirenStop>
		}
		sirenHandler(&hSiren,(uint32_t*) &htim2.Instance->PSC, HAL_GetTick());
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <main+0x1a4>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f103 0428 	add.w	r4, r3, #40	; 0x28
 800067e:	f000 fc19 	bl	8000eb4 <HAL_GetTick>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	4621      	mov	r1, r4
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <main+0x1b4>)
 800068a:	f004 fac9 	bl	8004c20 <sirenHandler>
		if(RYLR998_ReadInterruptFlag())
 800068e:	e771      	b.n	8000574 <main+0x88>
 8000690:	2000012c 	.word	0x2000012c
 8000694:	20000170 	.word	0x20000170
 8000698:	20000283 	.word	0x20000283
 800069c:	20000028 	.word	0x20000028
 80006a0:	20000380 	.word	0x20000380
 80006a4:	40020800 	.word	0x40020800
 80006a8:	40020000 	.word	0x40020000
 80006ac:	2000037c 	.word	0x2000037c

080006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b094      	sub	sp, #80	; 0x50
 80006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006b6:	f107 0320 	add.w	r3, r7, #32
 80006ba:	2230      	movs	r2, #48	; 0x30
 80006bc:	2100      	movs	r1, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f004 fb86 	bl	8004dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
 80006d8:	4b27      	ldr	r3, [pc, #156]	; (8000778 <SystemClock_Config+0xc8>)
 80006da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006dc:	4a26      	ldr	r2, [pc, #152]	; (8000778 <SystemClock_Config+0xc8>)
 80006de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e2:	6413      	str	r3, [r2, #64]	; 0x40
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <SystemClock_Config+0xc8>)
 80006e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	4b21      	ldr	r3, [pc, #132]	; (800077c <SystemClock_Config+0xcc>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a20      	ldr	r2, [pc, #128]	; (800077c <SystemClock_Config+0xcc>)
 80006fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006fe:	6013      	str	r3, [r2, #0]
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <SystemClock_Config+0xcc>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000708:	607b      	str	r3, [r7, #4]
 800070a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800070c:	2301      	movs	r3, #1
 800070e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000710:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000714:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000716:	2302      	movs	r3, #2
 8000718:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800071e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000720:	230c      	movs	r3, #12
 8000722:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000724:	2360      	movs	r3, #96	; 0x60
 8000726:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000728:	2302      	movs	r3, #2
 800072a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800072c:	2304      	movs	r3, #4
 800072e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	4618      	mov	r0, r3
 8000736:	f001 fadb 	bl	8001cf0 <HAL_RCC_OscConfig>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d001      	beq.n	8000744 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000740:	f000 f990 	bl	8000a64 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000744:	230f      	movs	r3, #15
 8000746:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000748:	2302      	movs	r3, #2
 800074a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800074c:	2300      	movs	r3, #0
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000750:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000754:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000756:	2300      	movs	r3, #0
 8000758:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	2103      	movs	r1, #3
 8000760:	4618      	mov	r0, r3
 8000762:	f001 fd33 	bl	80021cc <HAL_RCC_ClockConfig>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800076c:	f000 f97a 	bl	8000a64 <Error_Handler>
  }
}
 8000770:	bf00      	nop
 8000772:	3750      	adds	r7, #80	; 0x50
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40023800 	.word	0x40023800
 800077c:	40007000 	.word	0x40007000

08000780 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000784:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 8000786:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <MX_USART1_UART_Init+0x50>)
 8000788:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800078a:	4b10      	ldr	r3, [pc, #64]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 800078c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000790:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 8000794:	2200      	movs	r2, #0
 8000796:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000798:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 800079a:	2200      	movs	r2, #0
 800079c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a4:	4b09      	ldr	r3, [pc, #36]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007a6:	220c      	movs	r2, #12
 80007a8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b6:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_USART1_UART_Init+0x4c>)
 80007b8:	f002 faac 	bl	8002d14 <HAL_UART_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007c2:	f000 f94f 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c6:	bf00      	nop
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	20000028 	.word	0x20000028
 80007d0:	40011000 	.word	0x40011000

080007d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	4b10      	ldr	r3, [pc, #64]	; (8000820 <MX_DMA_Init+0x4c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a0f      	ldr	r2, [pc, #60]	; (8000820 <MX_DMA_Init+0x4c>)
 80007e4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b0d      	ldr	r3, [pc, #52]	; (8000820 <MX_DMA_Init+0x4c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007f2:	607b      	str	r3, [r7, #4]
 80007f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2100      	movs	r1, #0
 80007fa:	203a      	movs	r0, #58	; 0x3a
 80007fc:	f000 fc65 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000800:	203a      	movs	r0, #58	; 0x3a
 8000802:	f000 fc7e 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8000806:	2200      	movs	r2, #0
 8000808:	2100      	movs	r1, #0
 800080a:	2046      	movs	r0, #70	; 0x46
 800080c:	f000 fc5d 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000810:	2046      	movs	r0, #70	; 0x46
 8000812:	f000 fc76 	bl	8001102 <HAL_NVIC_EnableIRQ>

}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40023800 	.word	0x40023800

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08a      	sub	sp, #40	; 0x28
 8000828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 0314 	add.w	r3, r7, #20
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	613b      	str	r3, [r7, #16]
 800083e:	4b3c      	ldr	r3, [pc, #240]	; (8000930 <MX_GPIO_Init+0x10c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a3b      	ldr	r2, [pc, #236]	; (8000930 <MX_GPIO_Init+0x10c>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b39      	ldr	r3, [pc, #228]	; (8000930 <MX_GPIO_Init+0x10c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	4b35      	ldr	r3, [pc, #212]	; (8000930 <MX_GPIO_Init+0x10c>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a34      	ldr	r2, [pc, #208]	; (8000930 <MX_GPIO_Init+0x10c>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b32      	ldr	r3, [pc, #200]	; (8000930 <MX_GPIO_Init+0x10c>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <MX_GPIO_Init+0x10c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a2d      	ldr	r2, [pc, #180]	; (8000930 <MX_GPIO_Init+0x10c>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b2b      	ldr	r3, [pc, #172]	; (8000930 <MX_GPIO_Init+0x10c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b27      	ldr	r3, [pc, #156]	; (8000930 <MX_GPIO_Init+0x10c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a26      	ldr	r2, [pc, #152]	; (8000930 <MX_GPIO_Init+0x10c>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <MX_GPIO_Init+0x10c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80008aa:	2200      	movs	r2, #0
 80008ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008b0:	4820      	ldr	r0, [pc, #128]	; (8000934 <MX_GPIO_Init+0x110>)
 80008b2:	f001 f9df 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RYLR998_RST_GPIO_Port, RYLR998_RST_Pin, GPIO_PIN_RESET);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80008bc:	481e      	ldr	r0, [pc, #120]	; (8000938 <MX_GPIO_Init+0x114>)
 80008be:	f001 f9d9 	bl	8001c74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 80008c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2300      	movs	r3, #0
 80008d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	4816      	ldr	r0, [pc, #88]	; (8000934 <MX_GPIO_Init+0x110>)
 80008dc:	f001 f82e 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80008e0:	2301      	movs	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e4:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_GPIO_Init+0x118>)
 80008e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008e8:	2301      	movs	r3, #1
 80008ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008ec:	f107 0314 	add.w	r3, r7, #20
 80008f0:	4619      	mov	r1, r3
 80008f2:	4813      	ldr	r0, [pc, #76]	; (8000940 <MX_GPIO_Init+0x11c>)
 80008f4:	f001 f822 	bl	800193c <HAL_GPIO_Init>

  /*Configure GPIO pin : RYLR998_RST_Pin */
  GPIO_InitStruct.Pin = RYLR998_RST_Pin;
 80008f8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(RYLR998_RST_GPIO_Port, &GPIO_InitStruct);
 800090a:	f107 0314 	add.w	r3, r7, #20
 800090e:	4619      	mov	r1, r3
 8000910:	4809      	ldr	r0, [pc, #36]	; (8000938 <MX_GPIO_Init+0x114>)
 8000912:	f001 f813 	bl	800193c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2006      	movs	r0, #6
 800091c:	f000 fbd5 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000920:	2006      	movs	r0, #6
 8000922:	f000 fbee 	bl	8001102 <HAL_NVIC_EnableIRQ>

}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	; 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800
 8000938:	40020400 	.word	0x40020400
 800093c:	10210000 	.word	0x10210000
 8000940:	40020000 	.word	0x40020000

08000944 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094a:	f107 0320 	add.w	r3, r7, #32
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	601a      	str	r2, [r3, #0]
 800095a:	605a      	str	r2, [r3, #4]
 800095c:	609a      	str	r2, [r3, #8]
 800095e:	60da      	str	r2, [r3, #12]
 8000960:	611a      	str	r2, [r3, #16]
 8000962:	615a      	str	r2, [r3, #20]
 8000964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000966:	4b23      	ldr	r3, [pc, #140]	; (80009f4 <MX_TIM2_Init+0xb0>)
 8000968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800096c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 800096e:	4b21      	ldr	r3, [pc, #132]	; (80009f4 <MX_TIM2_Init+0xb0>)
 8000970:	2264      	movs	r2, #100	; 0x64
 8000972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b1f      	ldr	r3, [pc, #124]	; (80009f4 <MX_TIM2_Init+0xb0>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 800097a:	4b1e      	ldr	r3, [pc, #120]	; (80009f4 <MX_TIM2_Init+0xb0>)
 800097c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b1c      	ldr	r3, [pc, #112]	; (80009f4 <MX_TIM2_Init+0xb0>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b1a      	ldr	r3, [pc, #104]	; (80009f4 <MX_TIM2_Init+0xb0>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800098e:	4819      	ldr	r0, [pc, #100]	; (80009f4 <MX_TIM2_Init+0xb0>)
 8000990:	f001 fdfc 	bl	800258c <HAL_TIM_PWM_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800099a:	f000 f863 	bl	8000a64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009a6:	f107 0320 	add.w	r3, r7, #32
 80009aa:	4619      	mov	r1, r3
 80009ac:	4811      	ldr	r0, [pc, #68]	; (80009f4 <MX_TIM2_Init+0xb0>)
 80009ae:	f002 f943 	bl	8002c38 <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80009b8:	f000 f854 	bl	8000a64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009bc:	2360      	movs	r3, #96	; 0x60
 80009be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80009c0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2200      	movs	r2, #0
 80009d2:	4619      	mov	r1, r3
 80009d4:	4807      	ldr	r0, [pc, #28]	; (80009f4 <MX_TIM2_Init+0xb0>)
 80009d6:	f001 fe37 	bl	8002648 <HAL_TIM_PWM_ConfigChannel>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009e0:	f000 f840 	bl	8000a64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009e4:	4803      	ldr	r0, [pc, #12]	; (80009f4 <MX_TIM2_Init+0xb0>)
 80009e6:	f000 f943 	bl	8000c70 <HAL_TIM_MspPostInit>

}
 80009ea:	bf00      	nop
 80009ec:	3728      	adds	r7, #40	; 0x28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	2000012c 	.word	0x2000012c

080009f8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]

	RYLR998_WriteInterruptFlag(ENABLE);
 8000a00:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <HAL_UART_RxCpltCallback+0x20>)
 8000a02:	7b13      	ldrb	r3, [r2, #12]
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	7313      	strb	r3, [r2, #12]
	UNUSED(huart);
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000170 	.word	0x20000170

08000a1c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	RYLR998_WriteInterruptFlag(ENABLE);
 8000a28:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <HAL_UARTEx_RxEventCallback+0x38>)
 8000a2a:	7b13      	ldrb	r3, [r2, #12]
 8000a2c:	f043 0301 	orr.w	r3, r3, #1
 8000a30:	7313      	strb	r3, [r2, #12]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, hLoRaModule.rylr998Receiver.rxBuffer, 100);
 8000a32:	2264      	movs	r2, #100	; 0x64
 8000a34:	4908      	ldr	r1, [pc, #32]	; (8000a58 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <HAL_UARTEx_RxEventCallback+0x40>)
 8000a38:	f002 fa7b 	bl	8002f32 <HAL_UARTEx_ReceiveToIdle_DMA>
	 __HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 8000a3c:	4b08      	ldr	r3, [pc, #32]	; (8000a60 <HAL_UARTEx_RxEventCallback+0x44>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <HAL_UARTEx_RxEventCallback+0x44>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0208 	bic.w	r2, r2, #8
 8000a4a:	601a      	str	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000170 	.word	0x20000170
 8000a58:	20000283 	.word	0x20000283
 8000a5c:	20000028 	.word	0x20000028
 8000a60:	2000006c 	.word	0x2000006c

08000a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	607b      	str	r3, [r7, #4]
 8000a7e:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	2300      	movs	r3, #0
 8000a98:	603b      	str	r3, [r7, #0]
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40023800 	.word	0x40023800

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a4c      	ldr	r2, [pc, #304]	; (8000c14 <HAL_UART_MspInit+0x150>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	f040 8091 	bne.w	8000c0a <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ae8:	2300      	movs	r3, #0
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	4b4a      	ldr	r3, [pc, #296]	; (8000c18 <HAL_UART_MspInit+0x154>)
 8000aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af0:	4a49      	ldr	r2, [pc, #292]	; (8000c18 <HAL_UART_MspInit+0x154>)
 8000af2:	f043 0310 	orr.w	r3, r3, #16
 8000af6:	6453      	str	r3, [r2, #68]	; 0x44
 8000af8:	4b47      	ldr	r3, [pc, #284]	; (8000c18 <HAL_UART_MspInit+0x154>)
 8000afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afc:	f003 0310 	and.w	r3, r3, #16
 8000b00:	613b      	str	r3, [r7, #16]
 8000b02:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b43      	ldr	r3, [pc, #268]	; (8000c18 <HAL_UART_MspInit+0x154>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	4a42      	ldr	r2, [pc, #264]	; (8000c18 <HAL_UART_MspInit+0x154>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	6313      	str	r3, [r2, #48]	; 0x30
 8000b14:	4b40      	ldr	r3, [pc, #256]	; (8000c18 <HAL_UART_MspInit+0x154>)
 8000b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b18:	f003 0301 	and.w	r3, r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000b20:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000b24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000b32:	2307      	movs	r3, #7
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4837      	ldr	r0, [pc, #220]	; (8000c1c <HAL_UART_MspInit+0x158>)
 8000b3e:	f000 fefd 	bl	800193c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000b42:	4b37      	ldr	r3, [pc, #220]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b44:	4a37      	ldr	r2, [pc, #220]	; (8000c24 <HAL_UART_MspInit+0x160>)
 8000b46:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000b48:	4b35      	ldr	r3, [pc, #212]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b4e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b50:	4b33      	ldr	r3, [pc, #204]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b56:	4b32      	ldr	r3, [pc, #200]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b5c:	4b30      	ldr	r3, [pc, #192]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b62:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b64:	4b2e      	ldr	r3, [pc, #184]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b6a:	4b2d      	ldr	r3, [pc, #180]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000b70:	4b2b      	ldr	r3, [pc, #172]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b76:	4b2a      	ldr	r3, [pc, #168]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7c:	4b28      	ldr	r3, [pc, #160]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000b82:	4827      	ldr	r0, [pc, #156]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b84:	f000 fad8 	bl	8001138 <HAL_DMA_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8000b8e:	f7ff ff69 	bl	8000a64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4a22      	ldr	r2, [pc, #136]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b96:	639a      	str	r2, [r3, #56]	; 0x38
 8000b98:	4a21      	ldr	r2, [pc, #132]	; (8000c20 <HAL_UART_MspInit+0x15c>)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8000b9e:	4b22      	ldr	r3, [pc, #136]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000ba0:	4a22      	ldr	r2, [pc, #136]	; (8000c2c <HAL_UART_MspInit+0x168>)
 8000ba2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8000ba4:	4b20      	ldr	r3, [pc, #128]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000ba6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bae:	2240      	movs	r2, #64	; 0x40
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bbe:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000bc0:	4b19      	ldr	r3, [pc, #100]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000bc6:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000bcc:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000bd2:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bd8:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000bde:	4812      	ldr	r0, [pc, #72]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000be0:	f000 faaa 	bl	8001138 <HAL_DMA_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8000bea:	f7ff ff3b 	bl	8000a64 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bf2:	635a      	str	r2, [r3, #52]	; 0x34
 8000bf4:	4a0c      	ldr	r2, [pc, #48]	; (8000c28 <HAL_UART_MspInit+0x164>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2025      	movs	r0, #37	; 0x25
 8000c00:	f000 fa63 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c04:	2025      	movs	r0, #37	; 0x25
 8000c06:	f000 fa7c 	bl	8001102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3728      	adds	r7, #40	; 0x28
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40011000 	.word	0x40011000
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000
 8000c20:	2000006c 	.word	0x2000006c
 8000c24:	40026440 	.word	0x40026440
 8000c28:	200000cc 	.word	0x200000cc
 8000c2c:	400264b8 	.word	0x400264b8

08000c30 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c40:	d10d      	bne.n	8000c5e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4a:	4a08      	ldr	r2, [pc, #32]	; (8000c6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6413      	str	r3, [r2, #64]	; 0x40
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_TIM_PWM_MspInit+0x3c>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	60fb      	str	r3, [r7, #12]
 8000c5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800

08000c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b088      	sub	sp, #32
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c78:	f107 030c 	add.w	r3, r7, #12
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
 8000c80:	605a      	str	r2, [r3, #4]
 8000c82:	609a      	str	r2, [r3, #8]
 8000c84:	60da      	str	r2, [r3, #12]
 8000c86:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c90:	d110      	bne.n	8000cb4 <HAL_TIM_MspPostInit+0x44>


    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca8:	f107 030c 	add.w	r3, r7, #12
 8000cac:	4619      	mov	r1, r3
 8000cae:	4803      	ldr	r0, [pc, #12]	; (8000cbc <HAL_TIM_MspPostInit+0x4c>)
 8000cb0:	f000 fe44 	bl	800193c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cb4:	bf00      	nop
 8000cb6:	3720      	adds	r7, #32
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	40020000 	.word	0x40020000

08000cc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cc4:	bf00      	nop
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f8ba 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000d20:	2001      	movs	r0, #1
 8000d22:	f000 ffc1 	bl	8001ca8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//	RYLR998_WirteInterruptFlag(ENABLE);

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <USART1_IRQHandler+0x10>)
 8000d32:	f002 f963 	bl	8002ffc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000028 	.word	0x20000028

08000d40 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000d44:	4802      	ldr	r0, [pc, #8]	; (8000d50 <DMA2_Stream2_IRQHandler+0x10>)
 8000d46:	f000 fb8f 	bl	8001468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	2000006c 	.word	0x2000006c

08000d54 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000d58:	4802      	ldr	r0, [pc, #8]	; (8000d64 <DMA2_Stream7_IRQHandler+0x10>)
 8000d5a:	f000 fb85 	bl	8001468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000cc 	.word	0x200000cc

08000d68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d6c:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <SystemInit+0x28>)
 8000d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d72:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <SystemInit+0x28>)
 8000d74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <SystemInit+0x28>)
 8000d7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d82:	609a      	str	r2, [r3, #8]
#endif
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d98:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d9a:	e003      	b.n	8000da4 <LoopCopyDataInit>

08000d9c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d9e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000da0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000da2:	3104      	adds	r1, #4

08000da4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000da6:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000da8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000daa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000dac:	d3f6      	bcc.n	8000d9c <CopyDataInit>
  ldr  r2, =_sbss
 8000dae:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000db0:	e002      	b.n	8000db8 <LoopFillZerobss>

08000db2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000db2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000db4:	f842 3b04 	str.w	r3, [r2], #4

08000db8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000db8:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dbc:	d3f9      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dbe:	f7ff ffd3 	bl	8000d68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 ffc3 	bl	8004d4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fb91 	bl	80004ec <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dd0:	08004eb8 	.word	0x08004eb8
  ldr  r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000dd8:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000ddc:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000de0:	20000394 	.word	0x20000394

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	; (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	; (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	; (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fe2a 	bl	8000a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000000 	.word	0x20000000
 8000e84:	20000008 	.word	0x20000008
 8000e88:	20000004 	.word	0x20000004

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000008 	.word	0x20000008
 8000eb0:	2000016c 	.word	0x2000016c

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	2000016c 	.word	0x2000016c

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	; (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000008 	.word	0x20000008

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	; (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	; (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	; (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	; (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	; (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	; (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff feb6 	bl	8000eb4 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e099      	b.n	8001288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2200      	movs	r2, #0
 8001158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2202      	movs	r2, #2
 8001160:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001174:	e00f      	b.n	8001196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001176:	f7ff fe9d 	bl	8000eb4 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b05      	cmp	r3, #5
 8001182:	d908      	bls.n	8001196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2220      	movs	r2, #32
 8001188:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2203      	movs	r2, #3
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e078      	b.n	8001288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e8      	bne.n	8001176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4b38      	ldr	r3, [pc, #224]	; (8001290 <HAL_DMA_Init+0x158>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d107      	bne.n	8001200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f8:	4313      	orrs	r3, r2
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f023 0307 	bic.w	r3, r3, #7
 8001216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	4313      	orrs	r3, r2
 8001220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	2b04      	cmp	r3, #4
 8001228:	d117      	bne.n	800125a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00e      	beq.n	800125a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fb01 	bl	8001844 <DMA_CheckFifoParam>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2240      	movs	r2, #64	; 0x40
 800124c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001256:	2301      	movs	r3, #1
 8001258:	e016      	b.n	8001288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fab8 	bl	80017d8 <DMA_CalcBaseAndBitshift>
 8001268:	4603      	mov	r3, r0
 800126a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001270:	223f      	movs	r2, #63	; 0x3f
 8001272:	409a      	lsls	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	f010803f 	.word	0xf010803f

08001294 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	60f8      	str	r0, [r7, #12]
 800129c:	60b9      	str	r1, [r7, #8]
 800129e:	607a      	str	r2, [r7, #4]
 80012a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012a2:	2300      	movs	r3, #0
 80012a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012b2:	2b01      	cmp	r3, #1
 80012b4:	d101      	bne.n	80012ba <HAL_DMA_Start_IT+0x26>
 80012b6:	2302      	movs	r3, #2
 80012b8:	e040      	b.n	800133c <HAL_DMA_Start_IT+0xa8>
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d12f      	bne.n	800132e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2202      	movs	r2, #2
 80012d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	687a      	ldr	r2, [r7, #4]
 80012e0:	68b9      	ldr	r1, [r7, #8]
 80012e2:	68f8      	ldr	r0, [r7, #12]
 80012e4:	f000 fa4a 	bl	800177c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ec:	223f      	movs	r2, #63	; 0x3f
 80012ee:	409a      	lsls	r2, r3
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f042 0216 	orr.w	r2, r2, #22
 8001302:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d007      	beq.n	800131c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 0208 	orr.w	r2, r2, #8
 800131a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f042 0201 	orr.w	r2, r2, #1
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	e005      	b.n	800133a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001336:	2302      	movs	r3, #2
 8001338:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800133a:	7dfb      	ldrb	r3, [r7, #23]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3718      	adds	r7, #24
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}

08001344 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001350:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001352:	f7ff fdaf 	bl	8000eb4 <HAL_GetTick>
 8001356:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2280      	movs	r2, #128	; 0x80
 8001368:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e052      	b.n	800141c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0216 	bic.w	r2, r2, #22
 8001384:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	695a      	ldr	r2, [r3, #20]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001394:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	2b00      	cmp	r3, #0
 800139c:	d103      	bne.n	80013a6 <HAL_DMA_Abort+0x62>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d007      	beq.n	80013b6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f022 0208 	bic.w	r2, r2, #8
 80013b4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0201 	bic.w	r2, r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013c6:	e013      	b.n	80013f0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013c8:	f7ff fd74 	bl	8000eb4 <HAL_GetTick>
 80013cc:	4602      	mov	r2, r0
 80013ce:	68bb      	ldr	r3, [r7, #8]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	2b05      	cmp	r3, #5
 80013d4:	d90c      	bls.n	80013f0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2220      	movs	r2, #32
 80013da:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2203      	movs	r2, #3
 80013e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e015      	b.n	800141c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1e4      	bne.n	80013c8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001402:	223f      	movs	r2, #63	; 0x3f
 8001404:	409a      	lsls	r2, r3
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2201      	movs	r2, #1
 8001416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800141a:	2300      	movs	r3, #0
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b02      	cmp	r3, #2
 8001436:	d004      	beq.n	8001442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2280      	movs	r2, #128	; 0x80
 800143c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e00c      	b.n	800145c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2205      	movs	r2, #5
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 0201 	bic.w	r2, r2, #1
 8001458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	370c      	adds	r7, #12
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001474:	4b8e      	ldr	r3, [pc, #568]	; (80016b0 <HAL_DMA_IRQHandler+0x248>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a8e      	ldr	r2, [pc, #568]	; (80016b4 <HAL_DMA_IRQHandler+0x24c>)
 800147a:	fba2 2303 	umull	r2, r3, r2, r3
 800147e:	0a9b      	lsrs	r3, r3, #10
 8001480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001492:	2208      	movs	r2, #8
 8001494:	409a      	lsls	r2, r3
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4013      	ands	r3, r2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d01a      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d013      	beq.n	80014d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0204 	bic.w	r2, r2, #4
 80014ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c0:	2208      	movs	r2, #8
 80014c2:	409a      	lsls	r2, r3
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014cc:	f043 0201 	orr.w	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014d8:	2201      	movs	r2, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4013      	ands	r3, r2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d012      	beq.n	800150a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	695b      	ldr	r3, [r3, #20]
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f6:	2201      	movs	r2, #1
 80014f8:	409a      	lsls	r2, r3
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001502:	f043 0202 	orr.w	r2, r3, #2
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800150e:	2204      	movs	r2, #4
 8001510:	409a      	lsls	r2, r3
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4013      	ands	r3, r2
 8001516:	2b00      	cmp	r3, #0
 8001518:	d012      	beq.n	8001540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00b      	beq.n	8001540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800152c:	2204      	movs	r2, #4
 800152e:	409a      	lsls	r2, r3
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001538:	f043 0204 	orr.w	r2, r3, #4
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001544:	2210      	movs	r2, #16
 8001546:	409a      	lsls	r2, r3
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	4013      	ands	r3, r2
 800154c:	2b00      	cmp	r3, #0
 800154e:	d043      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f003 0308 	and.w	r3, r3, #8
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03c      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001562:	2210      	movs	r2, #16
 8001564:	409a      	lsls	r2, r3
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d018      	beq.n	80015aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001582:	2b00      	cmp	r3, #0
 8001584:	d108      	bne.n	8001598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	2b00      	cmp	r3, #0
 800158c:	d024      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	4798      	blx	r3
 8001596:	e01f      	b.n	80015d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800159c:	2b00      	cmp	r3, #0
 800159e:	d01b      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015a4:	6878      	ldr	r0, [r7, #4]
 80015a6:	4798      	blx	r3
 80015a8:	e016      	b.n	80015d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d107      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f022 0208 	bic.w	r2, r2, #8
 80015c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d003      	beq.n	80015d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015dc:	2220      	movs	r2, #32
 80015de:	409a      	lsls	r2, r3
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 808f 	beq.w	8001708 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0310 	and.w	r3, r3, #16
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	f000 8087 	beq.w	8001708 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015fe:	2220      	movs	r2, #32
 8001600:	409a      	lsls	r2, r3
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b05      	cmp	r3, #5
 8001610:	d136      	bne.n	8001680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f022 0216 	bic.w	r2, r2, #22
 8001620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	695a      	ldr	r2, [r3, #20]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	2b00      	cmp	r3, #0
 8001638:	d103      	bne.n	8001642 <HAL_DMA_IRQHandler+0x1da>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800163e:	2b00      	cmp	r3, #0
 8001640:	d007      	beq.n	8001652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0208 	bic.w	r2, r2, #8
 8001650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001656:	223f      	movs	r2, #63	; 0x3f
 8001658:	409a      	lsls	r2, r3
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2201      	movs	r2, #1
 800166a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001672:	2b00      	cmp	r3, #0
 8001674:	d07e      	beq.n	8001774 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	4798      	blx	r3
        }
        return;
 800167e:	e079      	b.n	8001774 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d01d      	beq.n	80016ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d10d      	bne.n	80016b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d031      	beq.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	4798      	blx	r3
 80016ac:	e02c      	b.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
 80016ae:	bf00      	nop
 80016b0:	20000000 	.word	0x20000000
 80016b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d023      	beq.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	4798      	blx	r3
 80016c8:	e01e      	b.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d10f      	bne.n	80016f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 0210 	bic.w	r2, r2, #16
 80016e6:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001704:	6878      	ldr	r0, [r7, #4]
 8001706:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170c:	2b00      	cmp	r3, #0
 800170e:	d032      	beq.n	8001776 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001714:	f003 0301 	and.w	r3, r3, #1
 8001718:	2b00      	cmp	r3, #0
 800171a:	d022      	beq.n	8001762 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2205      	movs	r2, #5
 8001720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	3301      	adds	r3, #1
 8001738:	60bb      	str	r3, [r7, #8]
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	d307      	bcc.n	8001750 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	2b00      	cmp	r3, #0
 800174c:	d1f2      	bne.n	8001734 <HAL_DMA_IRQHandler+0x2cc>
 800174e:	e000      	b.n	8001752 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001750:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001766:	2b00      	cmp	r3, #0
 8001768:	d005      	beq.n	8001776 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	6878      	ldr	r0, [r7, #4]
 8001770:	4798      	blx	r3
 8001772:	e000      	b.n	8001776 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001774:	bf00      	nop
    }
  }
}
 8001776:	3718      	adds	r7, #24
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
 8001788:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001798:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	2b40      	cmp	r3, #64	; 0x40
 80017a8:	d108      	bne.n	80017bc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	687a      	ldr	r2, [r7, #4]
 80017b0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80017ba:	e007      	b.n	80017cc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68ba      	ldr	r2, [r7, #8]
 80017c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	60da      	str	r2, [r3, #12]
}
 80017cc:	bf00      	nop
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	3b10      	subs	r3, #16
 80017e8:	4a14      	ldr	r2, [pc, #80]	; (800183c <DMA_CalcBaseAndBitshift+0x64>)
 80017ea:	fba2 2303 	umull	r2, r3, r2, r3
 80017ee:	091b      	lsrs	r3, r3, #4
 80017f0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017f2:	4a13      	ldr	r2, [pc, #76]	; (8001840 <DMA_CalcBaseAndBitshift+0x68>)
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4413      	add	r3, r2
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	2b03      	cmp	r3, #3
 8001804:	d909      	bls.n	800181a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800180e:	f023 0303 	bic.w	r3, r3, #3
 8001812:	1d1a      	adds	r2, r3, #4
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	659a      	str	r2, [r3, #88]	; 0x58
 8001818:	e007      	b.n	800182a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001822:	f023 0303 	bic.w	r3, r3, #3
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800182e:	4618      	mov	r0, r3
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	aaaaaaab 	.word	0xaaaaaaab
 8001840:	08004ea0 	.word	0x08004ea0

08001844 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800184c:	2300      	movs	r3, #0
 800184e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001854:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d11f      	bne.n	800189e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	2b03      	cmp	r3, #3
 8001862:	d856      	bhi.n	8001912 <DMA_CheckFifoParam+0xce>
 8001864:	a201      	add	r2, pc, #4	; (adr r2, 800186c <DMA_CheckFifoParam+0x28>)
 8001866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800186a:	bf00      	nop
 800186c:	0800187d 	.word	0x0800187d
 8001870:	0800188f 	.word	0x0800188f
 8001874:	0800187d 	.word	0x0800187d
 8001878:	08001913 	.word	0x08001913
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d046      	beq.n	8001916 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800188c:	e043      	b.n	8001916 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001892:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001896:	d140      	bne.n	800191a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800189c:	e03d      	b.n	800191a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80018a6:	d121      	bne.n	80018ec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d837      	bhi.n	800191e <DMA_CheckFifoParam+0xda>
 80018ae:	a201      	add	r2, pc, #4	; (adr r2, 80018b4 <DMA_CheckFifoParam+0x70>)
 80018b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b4:	080018c5 	.word	0x080018c5
 80018b8:	080018cb 	.word	0x080018cb
 80018bc:	080018c5 	.word	0x080018c5
 80018c0:	080018dd 	.word	0x080018dd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	73fb      	strb	r3, [r7, #15]
      break;
 80018c8:	e030      	b.n	800192c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018ce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d025      	beq.n	8001922 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018da:	e022      	b.n	8001922 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018e4:	d11f      	bne.n	8001926 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018ea:	e01c      	b.n	8001926 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d903      	bls.n	80018fa <DMA_CheckFifoParam+0xb6>
 80018f2:	68bb      	ldr	r3, [r7, #8]
 80018f4:	2b03      	cmp	r3, #3
 80018f6:	d003      	beq.n	8001900 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018f8:	e018      	b.n	800192c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	73fb      	strb	r3, [r7, #15]
      break;
 80018fe:	e015      	b.n	800192c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d00e      	beq.n	800192a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	73fb      	strb	r3, [r7, #15]
      break;
 8001910:	e00b      	b.n	800192a <DMA_CheckFifoParam+0xe6>
      break;
 8001912:	bf00      	nop
 8001914:	e00a      	b.n	800192c <DMA_CheckFifoParam+0xe8>
      break;
 8001916:	bf00      	nop
 8001918:	e008      	b.n	800192c <DMA_CheckFifoParam+0xe8>
      break;
 800191a:	bf00      	nop
 800191c:	e006      	b.n	800192c <DMA_CheckFifoParam+0xe8>
      break;
 800191e:	bf00      	nop
 8001920:	e004      	b.n	800192c <DMA_CheckFifoParam+0xe8>
      break;
 8001922:	bf00      	nop
 8001924:	e002      	b.n	800192c <DMA_CheckFifoParam+0xe8>
      break;   
 8001926:	bf00      	nop
 8001928:	e000      	b.n	800192c <DMA_CheckFifoParam+0xe8>
      break;
 800192a:	bf00      	nop
    }
  } 
  
  return status; 
 800192c:	7bfb      	ldrb	r3, [r7, #15]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3714      	adds	r7, #20
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop

0800193c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800193c:	b480      	push	{r7}
 800193e:	b089      	sub	sp, #36	; 0x24
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
 8001944:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800194e:	2300      	movs	r3, #0
 8001950:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001952:	2300      	movs	r3, #0
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	e159      	b.n	8001c0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001958:	2201      	movs	r2, #1
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	429a      	cmp	r2, r3
 8001972:	f040 8148 	bne.w	8001c06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d00b      	beq.n	8001996 <HAL_GPIO_Init+0x5a>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d007      	beq.n	8001996 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800198a:	2b11      	cmp	r3, #17
 800198c:	d003      	beq.n	8001996 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b12      	cmp	r3, #18
 8001994:	d130      	bne.n	80019f8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	2203      	movs	r2, #3
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4313      	orrs	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019cc:	2201      	movs	r2, #1
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f003 0201 	and.w	r2, r3, #1
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	2203      	movs	r2, #3
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	69ba      	ldr	r2, [r7, #24]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	689a      	ldr	r2, [r3, #8]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	69ba      	ldr	r2, [r7, #24]
 8001a26:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d003      	beq.n	8001a38 <HAL_GPIO_Init+0xfc>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	d123      	bne.n	8001a80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	08da      	lsrs	r2, r3, #3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3208      	adds	r2, #8
 8001a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	f003 0307 	and.w	r3, r3, #7
 8001a4c:	009b      	lsls	r3, r3, #2
 8001a4e:	220f      	movs	r2, #15
 8001a50:	fa02 f303 	lsl.w	r3, r2, r3
 8001a54:	43db      	mvns	r3, r3
 8001a56:	69ba      	ldr	r2, [r7, #24]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	691a      	ldr	r2, [r3, #16]
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	08da      	lsrs	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3208      	adds	r2, #8
 8001a7a:	69b9      	ldr	r1, [r7, #24]
 8001a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	005b      	lsls	r3, r3, #1
 8001a8a:	2203      	movs	r2, #3
 8001a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a90:	43db      	mvns	r3, r3
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	4013      	ands	r3, r2
 8001a96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f003 0203 	and.w	r2, r3, #3
 8001aa0:	69fb      	ldr	r3, [r7, #28]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f000 80a2 	beq.w	8001c06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	4b57      	ldr	r3, [pc, #348]	; (8001c24 <HAL_GPIO_Init+0x2e8>)
 8001ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aca:	4a56      	ldr	r2, [pc, #344]	; (8001c24 <HAL_GPIO_Init+0x2e8>)
 8001acc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ad0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ad2:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <HAL_GPIO_Init+0x2e8>)
 8001ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ade:	4a52      	ldr	r2, [pc, #328]	; (8001c28 <HAL_GPIO_Init+0x2ec>)
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	220f      	movs	r2, #15
 8001af6:	fa02 f303 	lsl.w	r3, r2, r3
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a49      	ldr	r2, [pc, #292]	; (8001c2c <HAL_GPIO_Init+0x2f0>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d019      	beq.n	8001b3e <HAL_GPIO_Init+0x202>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a48      	ldr	r2, [pc, #288]	; (8001c30 <HAL_GPIO_Init+0x2f4>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d013      	beq.n	8001b3a <HAL_GPIO_Init+0x1fe>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a47      	ldr	r2, [pc, #284]	; (8001c34 <HAL_GPIO_Init+0x2f8>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d00d      	beq.n	8001b36 <HAL_GPIO_Init+0x1fa>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a46      	ldr	r2, [pc, #280]	; (8001c38 <HAL_GPIO_Init+0x2fc>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d007      	beq.n	8001b32 <HAL_GPIO_Init+0x1f6>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a45      	ldr	r2, [pc, #276]	; (8001c3c <HAL_GPIO_Init+0x300>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d101      	bne.n	8001b2e <HAL_GPIO_Init+0x1f2>
 8001b2a:	2304      	movs	r3, #4
 8001b2c:	e008      	b.n	8001b40 <HAL_GPIO_Init+0x204>
 8001b2e:	2307      	movs	r3, #7
 8001b30:	e006      	b.n	8001b40 <HAL_GPIO_Init+0x204>
 8001b32:	2303      	movs	r3, #3
 8001b34:	e004      	b.n	8001b40 <HAL_GPIO_Init+0x204>
 8001b36:	2302      	movs	r3, #2
 8001b38:	e002      	b.n	8001b40 <HAL_GPIO_Init+0x204>
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e000      	b.n	8001b40 <HAL_GPIO_Init+0x204>
 8001b3e:	2300      	movs	r3, #0
 8001b40:	69fa      	ldr	r2, [r7, #28]
 8001b42:	f002 0203 	and.w	r2, r2, #3
 8001b46:	0092      	lsls	r2, r2, #2
 8001b48:	4093      	lsls	r3, r2
 8001b4a:	69ba      	ldr	r2, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b50:	4935      	ldr	r1, [pc, #212]	; (8001c28 <HAL_GPIO_Init+0x2ec>)
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	089b      	lsrs	r3, r3, #2
 8001b56:	3302      	adds	r3, #2
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b5e:	4b38      	ldr	r3, [pc, #224]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b82:	4a2f      	ldr	r2, [pc, #188]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b88:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bac:	4a24      	ldr	r2, [pc, #144]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a1a      	ldr	r2, [pc, #104]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b18      	ldr	r3, [pc, #96]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a0f      	ldr	r2, [pc, #60]	; (8001c40 <HAL_GPIO_Init+0x304>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	61fb      	str	r3, [r7, #28]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	2b0f      	cmp	r3, #15
 8001c10:	f67f aea2 	bls.w	8001958 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c14:	bf00      	nop
 8001c16:	bf00      	nop
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40013800 	.word	0x40013800
 8001c2c:	40020000 	.word	0x40020000
 8001c30:	40020400 	.word	0x40020400
 8001c34:	40020800 	.word	0x40020800
 8001c38:	40020c00 	.word	0x40020c00
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40013c00 	.word	0x40013c00

08001c44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b085      	sub	sp, #20
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691a      	ldr	r2, [r3, #16]
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	4013      	ands	r3, r2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	73fb      	strb	r3, [r7, #15]
 8001c60:	e001      	b.n	8001c66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c62:	2300      	movs	r3, #0
 8001c64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3714      	adds	r7, #20
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
 8001c80:	4613      	mov	r3, r2
 8001c82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c84:	787b      	ldrb	r3, [r7, #1]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d003      	beq.n	8001c92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c8a:	887a      	ldrh	r2, [r7, #2]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c90:	e003      	b.n	8001c9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c92:	887b      	ldrh	r3, [r7, #2]
 8001c94:	041a      	lsls	r2, r3, #16
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	619a      	str	r2, [r3, #24]
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001cb2:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cb4:	695a      	ldr	r2, [r3, #20]
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d006      	beq.n	8001ccc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cc0:	88fb      	ldrh	r3, [r7, #6]
 8001cc2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001cc4:	88fb      	ldrh	r3, [r7, #6]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f000 f806 	bl	8001cd8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ccc:	bf00      	nop
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40013c00 	.word	0x40013c00

08001cd8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e25e      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0301 	and.w	r3, r3, #1
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d075      	beq.n	8001dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d0e:	4b88      	ldr	r3, [pc, #544]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d10:	689b      	ldr	r3, [r3, #8]
 8001d12:	f003 030c 	and.w	r3, r3, #12
 8001d16:	2b04      	cmp	r3, #4
 8001d18:	d00c      	beq.n	8001d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d1a:	4b85      	ldr	r3, [pc, #532]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d22:	2b08      	cmp	r3, #8
 8001d24:	d112      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b82      	ldr	r3, [pc, #520]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d32:	d10b      	bne.n	8001d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d34:	4b7e      	ldr	r3, [pc, #504]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d05b      	beq.n	8001df8 <HAL_RCC_OscConfig+0x108>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d157      	bne.n	8001df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e239      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d54:	d106      	bne.n	8001d64 <HAL_RCC_OscConfig+0x74>
 8001d56:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a75      	ldr	r2, [pc, #468]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xb0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x98>
 8001d6e:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a6f      	ldr	r2, [pc, #444]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6c      	ldr	r2, [pc, #432]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xb0>
 8001d88:	4b69      	ldr	r3, [pc, #420]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a68      	ldr	r2, [pc, #416]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b66      	ldr	r3, [pc, #408]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a65      	ldr	r2, [pc, #404]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da8:	f7ff f884 	bl	8000eb4 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001db0:	f7ff f880 	bl	8000eb4 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e1fe      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dc2:	4b5b      	ldr	r3, [pc, #364]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xc0>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dd0:	f7ff f870 	bl	8000eb4 <HAL_GetTick>
 8001dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7ff f86c 	bl	8000eb4 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e1ea      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dea:	4b51      	ldr	r3, [pc, #324]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0xe8>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d063      	beq.n	8001ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e06:	4b4a      	ldr	r3, [pc, #296]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	f003 030c 	and.w	r3, r3, #12
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00b      	beq.n	8001e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e12:	4b47      	ldr	r3, [pc, #284]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d11c      	bne.n	8001e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1e:	4b44      	ldr	r3, [pc, #272]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d116      	bne.n	8001e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e2a:	4b41      	ldr	r3, [pc, #260]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d005      	beq.n	8001e42 <HAL_RCC_OscConfig+0x152>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d001      	beq.n	8001e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e1be      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e42:	4b3b      	ldr	r3, [pc, #236]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	4937      	ldr	r1, [pc, #220]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e52:	4313      	orrs	r3, r2
 8001e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e56:	e03a      	b.n	8001ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d020      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e60:	4b34      	ldr	r3, [pc, #208]	; (8001f34 <HAL_RCC_OscConfig+0x244>)
 8001e62:	2201      	movs	r2, #1
 8001e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e66:	f7ff f825 	bl	8000eb4 <HAL_GetTick>
 8001e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff f821 	bl	8000eb4 <HAL_GetTick>
 8001e72:	4602      	mov	r2, r0
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e19f      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d0f0      	beq.n	8001e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e8c:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	00db      	lsls	r3, r3, #3
 8001e9a:	4925      	ldr	r1, [pc, #148]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	600b      	str	r3, [r1, #0]
 8001ea0:	e015      	b.n	8001ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ea2:	4b24      	ldr	r3, [pc, #144]	; (8001f34 <HAL_RCC_OscConfig+0x244>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ea8:	f7ff f804 	bl	8000eb4 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eb0:	f7ff f800 	bl	8000eb4 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e17e      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ec2:	4b1b      	ldr	r3, [pc, #108]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1f0      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d036      	beq.n	8001f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d016      	beq.n	8001f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <HAL_RCC_OscConfig+0x248>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee8:	f7fe ffe4 	bl	8000eb4 <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ef0:	f7fe ffe0 	bl	8000eb4 <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e15e      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f02:	4b0b      	ldr	r3, [pc, #44]	; (8001f30 <HAL_RCC_OscConfig+0x240>)
 8001f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f0      	beq.n	8001ef0 <HAL_RCC_OscConfig+0x200>
 8001f0e:	e01b      	b.n	8001f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <HAL_RCC_OscConfig+0x248>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f16:	f7fe ffcd 	bl	8000eb4 <HAL_GetTick>
 8001f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f1c:	e00e      	b.n	8001f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f1e:	f7fe ffc9 	bl	8000eb4 <HAL_GetTick>
 8001f22:	4602      	mov	r2, r0
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1ad3      	subs	r3, r2, r3
 8001f28:	2b02      	cmp	r3, #2
 8001f2a:	d907      	bls.n	8001f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	e147      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
 8001f30:	40023800 	.word	0x40023800
 8001f34:	42470000 	.word	0x42470000
 8001f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	4b88      	ldr	r3, [pc, #544]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	f003 0302 	and.w	r3, r3, #2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d1ea      	bne.n	8001f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0304 	and.w	r3, r3, #4
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	f000 8097 	beq.w	8002084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f5a:	4b81      	ldr	r3, [pc, #516]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10f      	bne.n	8001f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f66:	2300      	movs	r3, #0
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	4a7c      	ldr	r2, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f74:	6413      	str	r3, [r2, #64]	; 0x40
 8001f76:	4b7a      	ldr	r3, [pc, #488]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f82:	2301      	movs	r3, #1
 8001f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f86:	4b77      	ldr	r3, [pc, #476]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d118      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f92:	4b74      	ldr	r3, [pc, #464]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a73      	ldr	r2, [pc, #460]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f9e:	f7fe ff89 	bl	8000eb4 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fa6:	f7fe ff85 	bl	8000eb4 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e103      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb8:	4b6a      	ldr	r3, [pc, #424]	; (8002164 <HAL_RCC_OscConfig+0x474>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d0f0      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d106      	bne.n	8001fda <HAL_RCC_OscConfig+0x2ea>
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fd0:	4a63      	ldr	r2, [pc, #396]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fd2:	f043 0301 	orr.w	r3, r3, #1
 8001fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8001fd8:	e01c      	b.n	8002014 <HAL_RCC_OscConfig+0x324>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	689b      	ldr	r3, [r3, #8]
 8001fde:	2b05      	cmp	r3, #5
 8001fe0:	d10c      	bne.n	8001ffc <HAL_RCC_OscConfig+0x30c>
 8001fe2:	4b5f      	ldr	r3, [pc, #380]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fe6:	4a5e      	ldr	r2, [pc, #376]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6713      	str	r3, [r2, #112]	; 0x70
 8001fee:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	e00b      	b.n	8002014 <HAL_RCC_OscConfig+0x324>
 8001ffc:	4b58      	ldr	r3, [pc, #352]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8001ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002000:	4a57      	ldr	r2, [pc, #348]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002002:	f023 0301 	bic.w	r3, r3, #1
 8002006:	6713      	str	r3, [r2, #112]	; 0x70
 8002008:	4b55      	ldr	r3, [pc, #340]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a54      	ldr	r2, [pc, #336]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800200e:	f023 0304 	bic.w	r3, r3, #4
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d015      	beq.n	8002048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7fe ff4a 	bl	8000eb4 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002022:	e00a      	b.n	800203a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7fe ff46 	bl	8000eb4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e0c2      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800203a:	4b49      	ldr	r3, [pc, #292]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800203c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0ee      	beq.n	8002024 <HAL_RCC_OscConfig+0x334>
 8002046:	e014      	b.n	8002072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002048:	f7fe ff34 	bl	8000eb4 <HAL_GetTick>
 800204c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800204e:	e00a      	b.n	8002066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002050:	f7fe ff30 	bl	8000eb4 <HAL_GetTick>
 8002054:	4602      	mov	r2, r0
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	f241 3288 	movw	r2, #5000	; 0x1388
 800205e:	4293      	cmp	r3, r2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e0ac      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002066:	4b3e      	ldr	r3, [pc, #248]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1ee      	bne.n	8002050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002072:	7dfb      	ldrb	r3, [r7, #23]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d105      	bne.n	8002084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002078:	4b39      	ldr	r3, [pc, #228]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	4a38      	ldr	r2, [pc, #224]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800207e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	2b00      	cmp	r3, #0
 800208a:	f000 8098 	beq.w	80021be <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800208e:	4b34      	ldr	r3, [pc, #208]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 030c 	and.w	r3, r3, #12
 8002096:	2b08      	cmp	r3, #8
 8002098:	d05c      	beq.n	8002154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d141      	bne.n	8002126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7fe ff04 	bl	8000eb4 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020b0:	f7fe ff00 	bl	8000eb4 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e07e      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	69da      	ldr	r2, [r3, #28]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	431a      	orrs	r2, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	019b      	lsls	r3, r3, #6
 80020de:	431a      	orrs	r2, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	041b      	lsls	r3, r3, #16
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f0:	061b      	lsls	r3, r3, #24
 80020f2:	491b      	ldr	r1, [pc, #108]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020f8:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020fe:	f7fe fed9 	bl	8000eb4 <HAL_GetTick>
 8002102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002104:	e008      	b.n	8002118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002106:	f7fe fed5 	bl	8000eb4 <HAL_GetTick>
 800210a:	4602      	mov	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d901      	bls.n	8002118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e053      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002118:	4b11      	ldr	r3, [pc, #68]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x416>
 8002124:	e04b      	b.n	80021be <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_OscConfig+0x478>)
 8002128:	2200      	movs	r2, #0
 800212a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe fec2 	bl	8000eb4 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002134:	f7fe febe 	bl	8000eb4 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e03c      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_RCC_OscConfig+0x470>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1f0      	bne.n	8002134 <HAL_RCC_OscConfig+0x444>
 8002152:	e034      	b.n	80021be <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d107      	bne.n	800216c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e02f      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
 8002160:	40023800 	.word	0x40023800
 8002164:	40007000 	.word	0x40007000
 8002168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800216c:	4b16      	ldr	r3, [pc, #88]	; (80021c8 <HAL_RCC_OscConfig+0x4d8>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	429a      	cmp	r2, r3
 800217e:	d11c      	bne.n	80021ba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800218a:	429a      	cmp	r2, r3
 800218c:	d115      	bne.n	80021ba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002194:	4013      	ands	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800219a:	4293      	cmp	r3, r2
 800219c:	d10d      	bne.n	80021ba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d106      	bne.n	80021ba <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80021b6:	429a      	cmp	r2, r3
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e000      	b.n	80021c0 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 80021be:	2300      	movs	r3, #0
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	3718      	adds	r7, #24
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	40023800 	.word	0x40023800

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0cc      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d90c      	bls.n	8002208 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b65      	ldr	r3, [pc, #404]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	b2d2      	uxtb	r2, r2
 80021f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f6:	4b63      	ldr	r3, [pc, #396]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 030f 	and.w	r3, r3, #15
 80021fe:	683a      	ldr	r2, [r7, #0]
 8002200:	429a      	cmp	r2, r3
 8002202:	d001      	beq.n	8002208 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0b8      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d020      	beq.n	8002256 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0304 	and.w	r3, r3, #4
 800221c:	2b00      	cmp	r3, #0
 800221e:	d005      	beq.n	800222c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002220:	4b59      	ldr	r3, [pc, #356]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	4a58      	ldr	r2, [pc, #352]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800222a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0308 	and.w	r3, r3, #8
 8002234:	2b00      	cmp	r3, #0
 8002236:	d005      	beq.n	8002244 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002238:	4b53      	ldr	r3, [pc, #332]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4a52      	ldr	r2, [pc, #328]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002242:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002244:	4b50      	ldr	r3, [pc, #320]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	494d      	ldr	r1, [pc, #308]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002252:	4313      	orrs	r3, r2
 8002254:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	2b00      	cmp	r3, #0
 8002260:	d044      	beq.n	80022ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d107      	bne.n	800227a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b47      	ldr	r3, [pc, #284]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d119      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e07f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b02      	cmp	r3, #2
 8002280:	d003      	beq.n	800228a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002286:	2b03      	cmp	r3, #3
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800228a:	4b3f      	ldr	r3, [pc, #252]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d109      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e06f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229a:	4b3b      	ldr	r3, [pc, #236]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e067      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022aa:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f023 0203 	bic.w	r2, r3, #3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4934      	ldr	r1, [pc, #208]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022bc:	f7fe fdfa 	bl	8000eb4 <HAL_GetTick>
 80022c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c2:	e00a      	b.n	80022da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7fe fdf6 	bl	8000eb4 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e04f      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022da:	4b2b      	ldr	r3, [pc, #172]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f003 020c 	and.w	r2, r3, #12
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	009b      	lsls	r3, r3, #2
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d1eb      	bne.n	80022c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022ec:	4b25      	ldr	r3, [pc, #148]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f003 030f 	and.w	r3, r3, #15
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d20c      	bcs.n	8002314 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b22      	ldr	r3, [pc, #136]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 80022fc:	683a      	ldr	r2, [r7, #0]
 80022fe:	b2d2      	uxtb	r2, r2
 8002300:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002302:	4b20      	ldr	r3, [pc, #128]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f003 030f 	and.w	r3, r3, #15
 800230a:	683a      	ldr	r2, [r7, #0]
 800230c:	429a      	cmp	r2, r3
 800230e:	d001      	beq.n	8002314 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e032      	b.n	800237a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002320:	4b19      	ldr	r3, [pc, #100]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	4916      	ldr	r1, [pc, #88]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800232e:	4313      	orrs	r3, r2
 8002330:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0308 	and.w	r3, r3, #8
 800233a:	2b00      	cmp	r3, #0
 800233c:	d009      	beq.n	8002352 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800233e:	4b12      	ldr	r3, [pc, #72]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	691b      	ldr	r3, [r3, #16]
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	490e      	ldr	r1, [pc, #56]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002352:	f000 f821 	bl	8002398 <HAL_RCC_GetSysClockFreq>
 8002356:	4602      	mov	r2, r0
 8002358:	4b0b      	ldr	r3, [pc, #44]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	091b      	lsrs	r3, r3, #4
 800235e:	f003 030f 	and.w	r3, r3, #15
 8002362:	490a      	ldr	r1, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	5ccb      	ldrb	r3, [r1, r3]
 8002366:	fa22 f303 	lsr.w	r3, r2, r3
 800236a:	4a09      	ldr	r2, [pc, #36]	; (8002390 <HAL_RCC_ClockConfig+0x1c4>)
 800236c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800236e:	4b09      	ldr	r3, [pc, #36]	; (8002394 <HAL_RCC_ClockConfig+0x1c8>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4618      	mov	r0, r3
 8002374:	f7fe fd5a 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8002378:	2300      	movs	r3, #0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3710      	adds	r7, #16
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	40023c00 	.word	0x40023c00
 8002388:	40023800 	.word	0x40023800
 800238c:	08004e88 	.word	0x08004e88
 8002390:	20000000 	.word	0x20000000
 8002394:	20000004 	.word	0x20000004

08002398 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800239c:	b090      	sub	sp, #64	; 0x40
 800239e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	637b      	str	r3, [r7, #52]	; 0x34
 80023a4:	2300      	movs	r3, #0
 80023a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023a8:	2300      	movs	r3, #0
 80023aa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80023ac:	2300      	movs	r3, #0
 80023ae:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023b0:	4b59      	ldr	r3, [pc, #356]	; (8002518 <HAL_RCC_GetSysClockFreq+0x180>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 030c 	and.w	r3, r3, #12
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d00d      	beq.n	80023d8 <HAL_RCC_GetSysClockFreq+0x40>
 80023bc:	2b08      	cmp	r3, #8
 80023be:	f200 80a1 	bhi.w	8002504 <HAL_RCC_GetSysClockFreq+0x16c>
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0x34>
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d003      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ca:	e09b      	b.n	8002504 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b53      	ldr	r3, [pc, #332]	; (800251c <HAL_RCC_GetSysClockFreq+0x184>)
 80023ce:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80023d0:	e09b      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023d2:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_GetSysClockFreq+0x188>)
 80023d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80023d6:	e098      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023d8:	4b4f      	ldr	r3, [pc, #316]	; (8002518 <HAL_RCC_GetSysClockFreq+0x180>)
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e2:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <HAL_RCC_GetSysClockFreq+0x180>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d028      	beq.n	8002440 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_GetSysClockFreq+0x180>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	099b      	lsrs	r3, r3, #6
 80023f4:	2200      	movs	r2, #0
 80023f6:	623b      	str	r3, [r7, #32]
 80023f8:	627a      	str	r2, [r7, #36]	; 0x24
 80023fa:	6a3b      	ldr	r3, [r7, #32]
 80023fc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002400:	2100      	movs	r1, #0
 8002402:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_GetSysClockFreq+0x188>)
 8002404:	fb03 f201 	mul.w	r2, r3, r1
 8002408:	2300      	movs	r3, #0
 800240a:	fb00 f303 	mul.w	r3, r0, r3
 800240e:	4413      	add	r3, r2
 8002410:	4a43      	ldr	r2, [pc, #268]	; (8002520 <HAL_RCC_GetSysClockFreq+0x188>)
 8002412:	fba0 1202 	umull	r1, r2, r0, r2
 8002416:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002418:	460a      	mov	r2, r1
 800241a:	62ba      	str	r2, [r7, #40]	; 0x28
 800241c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241e:	4413      	add	r3, r2
 8002420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	2200      	movs	r2, #0
 8002426:	61bb      	str	r3, [r7, #24]
 8002428:	61fa      	str	r2, [r7, #28]
 800242a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800242e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002432:	f7fd fed9 	bl	80001e8 <__aeabi_uldivmod>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	4613      	mov	r3, r2
 800243c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800243e:	e053      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002440:	4b35      	ldr	r3, [pc, #212]	; (8002518 <HAL_RCC_GetSysClockFreq+0x180>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	099b      	lsrs	r3, r3, #6
 8002446:	2200      	movs	r2, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	617a      	str	r2, [r7, #20]
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002452:	f04f 0b00 	mov.w	fp, #0
 8002456:	4652      	mov	r2, sl
 8002458:	465b      	mov	r3, fp
 800245a:	f04f 0000 	mov.w	r0, #0
 800245e:	f04f 0100 	mov.w	r1, #0
 8002462:	0159      	lsls	r1, r3, #5
 8002464:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002468:	0150      	lsls	r0, r2, #5
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	ebb2 080a 	subs.w	r8, r2, sl
 8002472:	eb63 090b 	sbc.w	r9, r3, fp
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002482:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002486:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800248a:	ebb2 0408 	subs.w	r4, r2, r8
 800248e:	eb63 0509 	sbc.w	r5, r3, r9
 8002492:	f04f 0200 	mov.w	r2, #0
 8002496:	f04f 0300 	mov.w	r3, #0
 800249a:	00eb      	lsls	r3, r5, #3
 800249c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024a0:	00e2      	lsls	r2, r4, #3
 80024a2:	4614      	mov	r4, r2
 80024a4:	461d      	mov	r5, r3
 80024a6:	eb14 030a 	adds.w	r3, r4, sl
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	eb45 030b 	adc.w	r3, r5, fp
 80024b0:	607b      	str	r3, [r7, #4]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80024be:	4629      	mov	r1, r5
 80024c0:	028b      	lsls	r3, r1, #10
 80024c2:	4621      	mov	r1, r4
 80024c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80024c8:	4621      	mov	r1, r4
 80024ca:	028a      	lsls	r2, r1, #10
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d2:	2200      	movs	r2, #0
 80024d4:	60bb      	str	r3, [r7, #8]
 80024d6:	60fa      	str	r2, [r7, #12]
 80024d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024dc:	f7fd fe84 	bl	80001e8 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <HAL_RCC_GetSysClockFreq+0x180>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	0c1b      	lsrs	r3, r3, #16
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	3301      	adds	r3, #1
 80024f4:	005b      	lsls	r3, r3, #1
 80024f6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80024f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002502:	e002      	b.n	800250a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002504:	4b05      	ldr	r3, [pc, #20]	; (800251c <HAL_RCC_GetSysClockFreq+0x184>)
 8002506:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002508:	bf00      	nop
    }
  }
  return sysclockfreq;
 800250a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800250c:	4618      	mov	r0, r3
 800250e:	3740      	adds	r7, #64	; 0x40
 8002510:	46bd      	mov	sp, r7
 8002512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002516:	bf00      	nop
 8002518:	40023800 	.word	0x40023800
 800251c:	00f42400 	.word	0x00f42400
 8002520:	017d7840 	.word	0x017d7840

08002524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_RCC_GetHCLKFreq+0x14>)
 800252a:	681b      	ldr	r3, [r3, #0]
}
 800252c:	4618      	mov	r0, r3
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20000000 	.word	0x20000000

0800253c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800253c:	b580      	push	{r7, lr}
 800253e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002540:	f7ff fff0 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 8002544:	4602      	mov	r2, r0
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	0a9b      	lsrs	r3, r3, #10
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	4903      	ldr	r1, [pc, #12]	; (8002560 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002552:	5ccb      	ldrb	r3, [r1, r3]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40023800 	.word	0x40023800
 8002560:	08004e98 	.word	0x08004e98

08002564 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002568:	f7ff ffdc 	bl	8002524 <HAL_RCC_GetHCLKFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	0b5b      	lsrs	r3, r3, #13
 8002574:	f003 0307 	and.w	r3, r3, #7
 8002578:	4903      	ldr	r1, [pc, #12]	; (8002588 <HAL_RCC_GetPCLK2Freq+0x24>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40023800 	.word	0x40023800
 8002588:	08004e98 	.word	0x08004e98

0800258c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e01d      	b.n	80025da <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d106      	bne.n	80025b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f7fe fb3c 	bl	8000c30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	4619      	mov	r1, r3
 80025ca:	4610      	mov	r0, r2
 80025cc:	f000 f902 	bl	80027d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025d8:	2300      	movs	r3, #0
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
	...

080025e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
 80025ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2201      	movs	r2, #1
 80025f4:	6839      	ldr	r1, [r7, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 faf8 	bl	8002bec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a10      	ldr	r2, [pc, #64]	; (8002644 <HAL_TIM_PWM_Start+0x60>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d107      	bne.n	8002616 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002614:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b06      	cmp	r3, #6
 8002626:	d007      	beq.n	8002638 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0201 	orr.w	r2, r2, #1
 8002636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3710      	adds	r7, #16
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}
 8002642:	bf00      	nop
 8002644:	40010000 	.word	0x40010000

08002648 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800265a:	2b01      	cmp	r3, #1
 800265c:	d101      	bne.n	8002662 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800265e:	2302      	movs	r3, #2
 8002660:	e0b4      	b.n	80027cc <HAL_TIM_PWM_ConfigChannel+0x184>
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2202      	movs	r2, #2
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0c      	cmp	r3, #12
 8002676:	f200 809f 	bhi.w	80027b8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800267a:	a201      	add	r2, pc, #4	; (adr r2, 8002680 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800267c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002680:	080026b5 	.word	0x080026b5
 8002684:	080027b9 	.word	0x080027b9
 8002688:	080027b9 	.word	0x080027b9
 800268c:	080027b9 	.word	0x080027b9
 8002690:	080026f5 	.word	0x080026f5
 8002694:	080027b9 	.word	0x080027b9
 8002698:	080027b9 	.word	0x080027b9
 800269c:	080027b9 	.word	0x080027b9
 80026a0:	08002737 	.word	0x08002737
 80026a4:	080027b9 	.word	0x080027b9
 80026a8:	080027b9 	.word	0x080027b9
 80026ac:	080027b9 	.word	0x080027b9
 80026b0:	08002777 	.word	0x08002777
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68b9      	ldr	r1, [r7, #8]
 80026ba:	4618      	mov	r0, r3
 80026bc:	f000 f90a 	bl	80028d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	699a      	ldr	r2, [r3, #24]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0208 	orr.w	r2, r2, #8
 80026ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	699a      	ldr	r2, [r3, #24]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0204 	bic.w	r2, r2, #4
 80026de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6999      	ldr	r1, [r3, #24]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	691a      	ldr	r2, [r3, #16]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	430a      	orrs	r2, r1
 80026f0:	619a      	str	r2, [r3, #24]
      break;
 80026f2:	e062      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68b9      	ldr	r1, [r7, #8]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f000 f950 	bl	80029a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699a      	ldr	r2, [r3, #24]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699a      	ldr	r2, [r3, #24]
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800271e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6999      	ldr	r1, [r3, #24]
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	021a      	lsls	r2, r3, #8
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	430a      	orrs	r2, r1
 8002732:	619a      	str	r2, [r3, #24]
      break;
 8002734:	e041      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68b9      	ldr	r1, [r7, #8]
 800273c:	4618      	mov	r0, r3
 800273e:	f000 f99b 	bl	8002a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	69da      	ldr	r2, [r3, #28]
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0208 	orr.w	r2, r2, #8
 8002750:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	69da      	ldr	r2, [r3, #28]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0204 	bic.w	r2, r2, #4
 8002760:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69d9      	ldr	r1, [r3, #28]
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	691a      	ldr	r2, [r3, #16]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	61da      	str	r2, [r3, #28]
      break;
 8002774:	e021      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f9e5 	bl	8002b4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002790:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	69da      	ldr	r2, [r3, #28]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	69d9      	ldr	r1, [r3, #28]
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	021a      	lsls	r2, r3, #8
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	430a      	orrs	r2, r1
 80027b4:	61da      	str	r2, [r3, #28]
      break;
 80027b6:	e000      	b.n	80027ba <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80027b8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2201      	movs	r2, #1
 80027be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	4a34      	ldr	r2, [pc, #208]	; (80028b8 <TIM_Base_SetConfig+0xe4>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d00f      	beq.n	800280c <TIM_Base_SetConfig+0x38>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d00b      	beq.n	800280c <TIM_Base_SetConfig+0x38>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a31      	ldr	r2, [pc, #196]	; (80028bc <TIM_Base_SetConfig+0xe8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d007      	beq.n	800280c <TIM_Base_SetConfig+0x38>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <TIM_Base_SetConfig+0xec>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d003      	beq.n	800280c <TIM_Base_SetConfig+0x38>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	4a2f      	ldr	r2, [pc, #188]	; (80028c4 <TIM_Base_SetConfig+0xf0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d108      	bne.n	800281e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	4313      	orrs	r3, r2
 800281c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a25      	ldr	r2, [pc, #148]	; (80028b8 <TIM_Base_SetConfig+0xe4>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d01b      	beq.n	800285e <TIM_Base_SetConfig+0x8a>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282c:	d017      	beq.n	800285e <TIM_Base_SetConfig+0x8a>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a22      	ldr	r2, [pc, #136]	; (80028bc <TIM_Base_SetConfig+0xe8>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d013      	beq.n	800285e <TIM_Base_SetConfig+0x8a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a21      	ldr	r2, [pc, #132]	; (80028c0 <TIM_Base_SetConfig+0xec>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00f      	beq.n	800285e <TIM_Base_SetConfig+0x8a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a20      	ldr	r2, [pc, #128]	; (80028c4 <TIM_Base_SetConfig+0xf0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00b      	beq.n	800285e <TIM_Base_SetConfig+0x8a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a1f      	ldr	r2, [pc, #124]	; (80028c8 <TIM_Base_SetConfig+0xf4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <TIM_Base_SetConfig+0x8a>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a1e      	ldr	r2, [pc, #120]	; (80028cc <TIM_Base_SetConfig+0xf8>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d003      	beq.n	800285e <TIM_Base_SetConfig+0x8a>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	4a1d      	ldr	r2, [pc, #116]	; (80028d0 <TIM_Base_SetConfig+0xfc>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d108      	bne.n	8002870 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002864:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	68fa      	ldr	r2, [r7, #12]
 800286c:	4313      	orrs	r3, r2
 800286e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	4313      	orrs	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a08      	ldr	r2, [pc, #32]	; (80028b8 <TIM_Base_SetConfig+0xe4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d103      	bne.n	80028a4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	615a      	str	r2, [r3, #20]
}
 80028aa:	bf00      	nop
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	40010000 	.word	0x40010000
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40000800 	.word	0x40000800
 80028c4:	40000c00 	.word	0x40000c00
 80028c8:	40014000 	.word	0x40014000
 80028cc:	40014400 	.word	0x40014400
 80028d0:	40014800 	.word	0x40014800

080028d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b087      	sub	sp, #28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	f023 0201 	bic.w	r2, r3, #1
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002902:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0303 	bic.w	r3, r3, #3
 800290a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	f023 0302 	bic.w	r3, r3, #2
 800291c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	4313      	orrs	r3, r2
 8002926:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a1c      	ldr	r2, [pc, #112]	; (800299c <TIM_OC1_SetConfig+0xc8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d10c      	bne.n	800294a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	f023 0308 	bic.w	r3, r3, #8
 8002936:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	697a      	ldr	r2, [r7, #20]
 800293e:	4313      	orrs	r3, r2
 8002940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f023 0304 	bic.w	r3, r3, #4
 8002948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a13      	ldr	r2, [pc, #76]	; (800299c <TIM_OC1_SetConfig+0xc8>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d111      	bne.n	8002976 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002958:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002960:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	693a      	ldr	r2, [r7, #16]
 8002968:	4313      	orrs	r3, r2
 800296a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	693a      	ldr	r2, [r7, #16]
 8002972:	4313      	orrs	r3, r2
 8002974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	693a      	ldr	r2, [r7, #16]
 800297a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68fa      	ldr	r2, [r7, #12]
 8002980:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	697a      	ldr	r2, [r7, #20]
 800298e:	621a      	str	r2, [r3, #32]
}
 8002990:	bf00      	nop
 8002992:	371c      	adds	r7, #28
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr
 800299c:	40010000 	.word	0x40010000

080029a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f023 0210 	bic.w	r2, r3, #16
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	021b      	lsls	r3, r3, #8
 80029de:	68fa      	ldr	r2, [r7, #12]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0320 	bic.w	r3, r3, #32
 80029ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	011b      	lsls	r3, r3, #4
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	4a1e      	ldr	r2, [pc, #120]	; (8002a74 <TIM_OC2_SetConfig+0xd4>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d10d      	bne.n	8002a1c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a14:	697b      	ldr	r3, [r7, #20]
 8002a16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a1a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <TIM_OC2_SetConfig+0xd4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d113      	bne.n	8002a4c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002a32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	693a      	ldr	r2, [r7, #16]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68fa      	ldr	r2, [r7, #12]
 8002a56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685a      	ldr	r2, [r3, #4]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	621a      	str	r2, [r3, #32]
}
 8002a66:	bf00      	nop
 8002a68:	371c      	adds	r7, #28
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	40010000 	.word	0x40010000

08002a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b087      	sub	sp, #28
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
 8002a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f023 0303 	bic.w	r3, r3, #3
 8002aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a1d      	ldr	r2, [pc, #116]	; (8002b48 <TIM_OC3_SetConfig+0xd0>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10d      	bne.n	8002af2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002adc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68db      	ldr	r3, [r3, #12]
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002af0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <TIM_OC3_SetConfig+0xd0>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d113      	bne.n	8002b22 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	693a      	ldr	r2, [r7, #16]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	693a      	ldr	r2, [r7, #16]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	693a      	ldr	r2, [r7, #16]
 8002b26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	697a      	ldr	r2, [r7, #20]
 8002b3a:	621a      	str	r2, [r3, #32]
}
 8002b3c:	bf00      	nop
 8002b3e:	371c      	adds	r7, #28
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	40010000 	.word	0x40010000

08002b4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b087      	sub	sp, #28
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	68fa      	ldr	r2, [r7, #12]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	031b      	lsls	r3, r3, #12
 8002b9e:	693a      	ldr	r2, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <TIM_OC4_SetConfig+0x9c>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d109      	bne.n	8002bc0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bb2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	019b      	lsls	r3, r3, #6
 8002bba:	697a      	ldr	r2, [r7, #20]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	621a      	str	r2, [r3, #32]
}
 8002bda:	bf00      	nop
 8002bdc:	371c      	adds	r7, #28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	40010000 	.word	0x40010000

08002bec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b087      	sub	sp, #28
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	60f8      	str	r0, [r7, #12]
 8002bf4:	60b9      	str	r1, [r7, #8]
 8002bf6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	f003 031f 	and.w	r3, r3, #31
 8002bfe:	2201      	movs	r2, #1
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	6a1a      	ldr	r2, [r3, #32]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	43db      	mvns	r3, r3
 8002c0e:	401a      	ands	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	f003 031f 	and.w	r3, r3, #31
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	fa01 f303 	lsl.w	r3, r1, r3
 8002c24:	431a      	orrs	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	621a      	str	r2, [r3, #32]
}
 8002c2a:	bf00      	nop
 8002c2c:	371c      	adds	r7, #28
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b085      	sub	sp, #20
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e050      	b.n	8002cf2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2202      	movs	r2, #2
 8002c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d018      	beq.n	8002cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c9c:	d013      	beq.n	8002cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a18      	ldr	r2, [pc, #96]	; (8002d04 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d00e      	beq.n	8002cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a16      	ldr	r2, [pc, #88]	; (8002d08 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d009      	beq.n	8002cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a15      	ldr	r2, [pc, #84]	; (8002d0c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d004      	beq.n	8002cc6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a13      	ldr	r2, [pc, #76]	; (8002d10 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ccc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68ba      	ldr	r2, [r7, #8]
 8002cde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40000400 	.word	0x40000400
 8002d08:	40000800 	.word	0x40000800
 8002d0c:	40000c00 	.word	0x40000c00
 8002d10:	40014000 	.word	0x40014000

08002d14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e03f      	b.n	8002da6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fd fec2 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	68da      	ldr	r2, [r3, #12]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 ffff 	bl	8003d5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002d6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	695a      	ldr	r2, [r3, #20]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002d7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002da4:	2300      	movs	r3, #0
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3708      	adds	r7, #8
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}

08002dae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dae:	b580      	push	{r7, lr}
 8002db0:	b08a      	sub	sp, #40	; 0x28
 8002db2:	af02      	add	r7, sp, #8
 8002db4:	60f8      	str	r0, [r7, #12]
 8002db6:	60b9      	str	r1, [r7, #8]
 8002db8:	603b      	str	r3, [r7, #0]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b20      	cmp	r3, #32
 8002dcc:	d17c      	bne.n	8002ec8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d002      	beq.n	8002dda <HAL_UART_Transmit+0x2c>
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e075      	b.n	8002eca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d101      	bne.n	8002dec <HAL_UART_Transmit+0x3e>
 8002de8:	2302      	movs	r3, #2
 8002dea:	e06e      	b.n	8002eca <HAL_UART_Transmit+0x11c>
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2221      	movs	r2, #33	; 0x21
 8002dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e02:	f7fe f857 	bl	8000eb4 <HAL_GetTick>
 8002e06:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	88fa      	ldrh	r2, [r7, #6]
 8002e0c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	88fa      	ldrh	r2, [r7, #6]
 8002e12:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e1c:	d108      	bne.n	8002e30 <HAL_UART_Transmit+0x82>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d104      	bne.n	8002e30 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	61bb      	str	r3, [r7, #24]
 8002e2e:	e003      	b.n	8002e38 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e34:	2300      	movs	r3, #0
 8002e36:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002e40:	e02a      	b.n	8002e98 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	2180      	movs	r1, #128	; 0x80
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fc79 	bl	8003744 <UART_WaitOnFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e036      	b.n	8002eca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10b      	bne.n	8002e7a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	881b      	ldrh	r3, [r3, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002e70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	3302      	adds	r3, #2
 8002e76:	61bb      	str	r3, [r7, #24]
 8002e78:	e007      	b.n	8002e8a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	781a      	ldrb	r2, [r3, #0]
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	3301      	adds	r3, #1
 8002e88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e9c:	b29b      	uxth	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d1cf      	bne.n	8002e42 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	2140      	movs	r1, #64	; 0x40
 8002eac:	68f8      	ldr	r0, [r7, #12]
 8002eae:	f000 fc49 	bl	8003744 <UART_WaitOnFlagUntilTimeout>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d001      	beq.n	8002ebc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e006      	b.n	8002eca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e000      	b.n	8002eca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002ec8:	2302      	movs	r3, #2
  }
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3720      	adds	r7, #32
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b084      	sub	sp, #16
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	60f8      	str	r0, [r7, #12]
 8002eda:	60b9      	str	r1, [r7, #8]
 8002edc:	4613      	mov	r3, r2
 8002ede:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b20      	cmp	r3, #32
 8002eea:	d11d      	bne.n	8002f28 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_UART_Receive_IT+0x26>
 8002ef2:	88fb      	ldrh	r3, [r7, #6]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d101      	bne.n	8002efc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	e016      	b.n	8002f2a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_UART_Receive_IT+0x38>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e00f      	b.n	8002f2a <HAL_UART_Receive_IT+0x58>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002f18:	88fb      	ldrh	r3, [r7, #6]
 8002f1a:	461a      	mov	r2, r3
 8002f1c:	68b9      	ldr	r1, [r7, #8]
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fc7e 	bl	8003820 <UART_Start_Receive_IT>
 8002f24:	4603      	mov	r3, r0
 8002f26:	e000      	b.n	8002f2a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b08c      	sub	sp, #48	; 0x30
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	60f8      	str	r0, [r7, #12]
 8002f3a:	60b9      	str	r1, [r7, #8]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b20      	cmp	r3, #32
 8002f4a:	d152      	bne.n	8002ff2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d002      	beq.n	8002f58 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e04b      	b.n	8002ff4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d101      	bne.n	8002f6a <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e044      	b.n	8002ff4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002f78:	88fb      	ldrh	r3, [r7, #6]
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68b9      	ldr	r1, [r7, #8]
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f000 fc8c 	bl	800389c <UART_Start_Receive_DMA>
 8002f84:	4603      	mov	r3, r0
 8002f86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d12c      	bne.n	8002fec <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d125      	bne.n	8002fe6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	613b      	str	r3, [r7, #16]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	613b      	str	r3, [r7, #16]
 8002fae:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	330c      	adds	r3, #12
 8002fb6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	e853 3f00 	ldrex	r3, [r3]
 8002fbe:	617b      	str	r3, [r7, #20]
   return(result);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f043 0310 	orr.w	r3, r3, #16
 8002fc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002fd0:	627a      	str	r2, [r7, #36]	; 0x24
 8002fd2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd4:	6a39      	ldr	r1, [r7, #32]
 8002fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fd8:	e841 2300 	strex	r3, r2, [r1]
 8002fdc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1e5      	bne.n	8002fb0 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8002fe4:	e002      	b.n	8002fec <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8002fec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002ff0:	e000      	b.n	8002ff4 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8002ff2:	2302      	movs	r3, #2
  }
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	3730      	adds	r7, #48	; 0x30
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}

08002ffc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b0ba      	sub	sp, #232	; 0xe8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003022:	2300      	movs	r3, #0
 8003024:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003028:	2300      	movs	r3, #0
 800302a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 030f 	and.w	r3, r3, #15
 8003036:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800303a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10f      	bne.n	8003062 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003046:	f003 0320 	and.w	r3, r3, #32
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_UART_IRQHandler+0x66>
 800304e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003052:	f003 0320 	and.w	r3, r3, #32
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 fdc3 	bl	8003be6 <UART_Receive_IT>
      return;
 8003060:	e256      	b.n	8003510 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80de 	beq.w	8003228 <HAL_UART_IRQHandler+0x22c>
 800306c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d106      	bne.n	8003086 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003078:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 80d1 	beq.w	8003228 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 0301 	and.w	r3, r3, #1
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00b      	beq.n	80030aa <HAL_UART_IRQHandler+0xae>
 8003092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f043 0201 	orr.w	r2, r3, #1
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ae:	f003 0304 	and.w	r3, r3, #4
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_UART_IRQHandler+0xd2>
 80030b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d005      	beq.n	80030ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f043 0202 	orr.w	r2, r3, #2
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d00b      	beq.n	80030f2 <HAL_UART_IRQHandler+0xf6>
 80030da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030de:	f003 0301 	and.w	r3, r3, #1
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d005      	beq.n	80030f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0204 	orr.w	r2, r3, #4
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80030f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d011      	beq.n	8003122 <HAL_UART_IRQHandler+0x126>
 80030fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d105      	bne.n	8003116 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800310a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	d005      	beq.n	8003122 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	f043 0208 	orr.w	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 81ed 	beq.w	8003506 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800312c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003130:	f003 0320 	and.w	r3, r3, #32
 8003134:	2b00      	cmp	r3, #0
 8003136:	d008      	beq.n	800314a <HAL_UART_IRQHandler+0x14e>
 8003138:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003144:	6878      	ldr	r0, [r7, #4]
 8003146:	f000 fd4e 	bl	8003be6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	695b      	ldr	r3, [r3, #20]
 8003150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003154:	2b40      	cmp	r3, #64	; 0x40
 8003156:	bf0c      	ite	eq
 8003158:	2301      	moveq	r3, #1
 800315a:	2300      	movne	r3, #0
 800315c:	b2db      	uxtb	r3, r3
 800315e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d103      	bne.n	8003176 <HAL_UART_IRQHandler+0x17a>
 800316e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d04f      	beq.n	8003216 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fc56 	bl	8003a28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003186:	2b40      	cmp	r3, #64	; 0x40
 8003188:	d141      	bne.n	800320e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	3314      	adds	r3, #20
 8003190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003194:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003198:	e853 3f00 	ldrex	r3, [r3]
 800319c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80031a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3314      	adds	r3, #20
 80031b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80031b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80031ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80031c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80031c6:	e841 2300 	strex	r3, r2, [r1]
 80031ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1d9      	bne.n	800318a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d013      	beq.n	8003206 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e2:	4a7d      	ldr	r2, [pc, #500]	; (80033d8 <HAL_UART_IRQHandler+0x3dc>)
 80031e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ea:	4618      	mov	r0, r3
 80031ec:	f7fe f91a 	bl	8001424 <HAL_DMA_Abort_IT>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d016      	beq.n	8003224 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003200:	4610      	mov	r0, r2
 8003202:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003204:	e00e      	b.n	8003224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f000 f99a 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	e00a      	b.n	8003224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f996 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003214:	e006      	b.n	8003224 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f992 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003222:	e170      	b.n	8003506 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003224:	bf00      	nop
    return;
 8003226:	e16e      	b.n	8003506 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322c:	2b01      	cmp	r3, #1
 800322e:	f040 814a 	bne.w	80034c6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003232:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	f000 8143 	beq.w	80034c6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003244:	f003 0310 	and.w	r3, r3, #16
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 813c 	beq.w	80034c6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800324e:	2300      	movs	r3, #0
 8003250:	60bb      	str	r3, [r7, #8]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	60bb      	str	r3, [r7, #8]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60bb      	str	r3, [r7, #8]
 8003262:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800326e:	2b40      	cmp	r3, #64	; 0x40
 8003270:	f040 80b4 	bne.w	80033dc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003280:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003284:	2b00      	cmp	r3, #0
 8003286:	f000 8140 	beq.w	800350a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800328e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003292:	429a      	cmp	r2, r3
 8003294:	f080 8139 	bcs.w	800350a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800329e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032aa:	f000 8088 	beq.w	80033be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	330c      	adds	r3, #12
 80032b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80032c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	330c      	adds	r3, #12
 80032d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80032da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80032de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032ea:	e841 2300 	strex	r3, r2, [r1]
 80032ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1d9      	bne.n	80032ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	3314      	adds	r3, #20
 8003300:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003302:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003304:	e853 3f00 	ldrex	r3, [r3]
 8003308:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800330a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800330c:	f023 0301 	bic.w	r3, r3, #1
 8003310:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	3314      	adds	r3, #20
 800331a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800331e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003322:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003324:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003326:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800332a:	e841 2300 	strex	r3, r2, [r1]
 800332e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003330:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003332:	2b00      	cmp	r3, #0
 8003334:	d1e1      	bne.n	80032fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	3314      	adds	r3, #20
 800333c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003340:	e853 3f00 	ldrex	r3, [r3]
 8003344:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003346:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003348:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	3314      	adds	r3, #20
 8003356:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800335a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800335c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800335e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003360:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003362:	e841 2300 	strex	r3, r2, [r1]
 8003366:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003368:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1e3      	bne.n	8003336 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2220      	movs	r2, #32
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	330c      	adds	r3, #12
 8003382:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003386:	e853 3f00 	ldrex	r3, [r3]
 800338a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800338c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800338e:	f023 0310 	bic.w	r3, r3, #16
 8003392:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033a0:	65ba      	str	r2, [r7, #88]	; 0x58
 80033a2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80033ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e3      	bne.n	800337c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b8:	4618      	mov	r0, r3
 80033ba:	f7fd ffc3 	bl	8001344 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	b29b      	uxth	r3, r3
 80033cc:	4619      	mov	r1, r3
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fd fb24 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033d4:	e099      	b.n	800350a <HAL_UART_IRQHandler+0x50e>
 80033d6:	bf00      	nop
 80033d8:	08003aef 	.word	0x08003aef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	f000 808b 	beq.w	800350e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80033f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 8086 	beq.w	800350e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	330c      	adds	r3, #12
 8003408:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800340a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800340c:	e853 3f00 	ldrex	r3, [r3]
 8003410:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003414:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003418:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	330c      	adds	r3, #12
 8003422:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003426:	647a      	str	r2, [r7, #68]	; 0x44
 8003428:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800342a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800342c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800342e:	e841 2300 	strex	r3, r2, [r1]
 8003432:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003434:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1e3      	bne.n	8003402 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	3314      	adds	r3, #20
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003444:	e853 3f00 	ldrex	r3, [r3]
 8003448:	623b      	str	r3, [r7, #32]
   return(result);
 800344a:	6a3b      	ldr	r3, [r7, #32]
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3314      	adds	r3, #20
 800345a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800345e:	633a      	str	r2, [r7, #48]	; 0x30
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003462:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003466:	e841 2300 	strex	r3, r2, [r1]
 800346a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800346c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1e3      	bne.n	800343a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	330c      	adds	r3, #12
 8003486:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	e853 3f00 	ldrex	r3, [r3]
 800348e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f023 0310 	bic.w	r3, r3, #16
 8003496:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	330c      	adds	r3, #12
 80034a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034a4:	61fa      	str	r2, [r7, #28]
 80034a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a8:	69b9      	ldr	r1, [r7, #24]
 80034aa:	69fa      	ldr	r2, [r7, #28]
 80034ac:	e841 2300 	strex	r3, r2, [r1]
 80034b0:	617b      	str	r3, [r7, #20]
   return(result);
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1e3      	bne.n	8003480 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80034bc:	4619      	mov	r1, r3
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd faac 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80034c4:	e023      	b.n	800350e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_UART_IRQHandler+0x4ea>
 80034d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fb19 	bl	8003b16 <UART_Transmit_IT>
    return;
 80034e4:	e014      	b.n	8003510 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80034e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00e      	beq.n	8003510 <HAL_UART_IRQHandler+0x514>
 80034f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d008      	beq.n	8003510 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fb59 	bl	8003bb6 <UART_EndTransmit_IT>
    return;
 8003504:	e004      	b.n	8003510 <HAL_UART_IRQHandler+0x514>
    return;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <HAL_UART_IRQHandler+0x514>
      return;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_UART_IRQHandler+0x514>
      return;
 800350e:	bf00      	nop
  }
}
 8003510:	37e8      	adds	r7, #232	; 0xe8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop

08003518 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003520:	bf00      	nop
 8003522:	370c      	adds	r7, #12
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b09c      	sub	sp, #112	; 0x70
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356c:	2b00      	cmp	r3, #0
 800356e:	d172      	bne.n	8003656 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003572:	2200      	movs	r2, #0
 8003574:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003576:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	330c      	adds	r3, #12
 800357c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800357e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003580:	e853 3f00 	ldrex	r3, [r3]
 8003584:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003586:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800358c:	66bb      	str	r3, [r7, #104]	; 0x68
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	330c      	adds	r3, #12
 8003594:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003596:	65ba      	str	r2, [r7, #88]	; 0x58
 8003598:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800359c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800359e:	e841 2300 	strex	r3, r2, [r1]
 80035a2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80035a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1e5      	bne.n	8003576 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3314      	adds	r3, #20
 80035b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035b4:	e853 3f00 	ldrex	r3, [r3]
 80035b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80035ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035bc:	f023 0301 	bic.w	r3, r3, #1
 80035c0:	667b      	str	r3, [r7, #100]	; 0x64
 80035c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	3314      	adds	r3, #20
 80035c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80035ca:	647a      	str	r2, [r7, #68]	; 0x44
 80035cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035d2:	e841 2300 	strex	r3, r2, [r1]
 80035d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1e5      	bne.n	80035aa <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	3314      	adds	r3, #20
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e8:	e853 3f00 	ldrex	r3, [r3]
 80035ec:	623b      	str	r3, [r7, #32]
   return(result);
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035f4:	663b      	str	r3, [r7, #96]	; 0x60
 80035f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	3314      	adds	r3, #20
 80035fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035fe:	633a      	str	r2, [r7, #48]	; 0x30
 8003600:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003602:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800360c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e5      	bne.n	80035de <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003612:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800361a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	2b01      	cmp	r3, #1
 8003620:	d119      	bne.n	8003656 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003622:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	330c      	adds	r3, #12
 8003628:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	e853 3f00 	ldrex	r3, [r3]
 8003630:	60fb      	str	r3, [r7, #12]
   return(result);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f023 0310 	bic.w	r3, r3, #16
 8003638:	65fb      	str	r3, [r7, #92]	; 0x5c
 800363a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	330c      	adds	r3, #12
 8003640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003642:	61fa      	str	r2, [r7, #28]
 8003644:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003646:	69b9      	ldr	r1, [r7, #24]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	617b      	str	r3, [r7, #20]
   return(result);
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1e5      	bne.n	8003622 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003656:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	2b01      	cmp	r3, #1
 800365c:	d106      	bne.n	800366c <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800365e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003660:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003662:	4619      	mov	r1, r3
 8003664:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003666:	f7fd f9d9 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800366a:	e002      	b.n	8003672 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800366c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800366e:	f7fd f9c3 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 8003672:	bf00      	nop
 8003674:	3770      	adds	r7, #112	; 0x70
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b084      	sub	sp, #16
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003686:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368c:	2b01      	cmp	r3, #1
 800368e:	d108      	bne.n	80036a2 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003694:	085b      	lsrs	r3, r3, #1
 8003696:	b29b      	uxth	r3, r3
 8003698:	4619      	mov	r1, r3
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f7fd f9be 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80036a0:	e002      	b.n	80036a8 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80036a2:	68f8      	ldr	r0, [r7, #12]
 80036a4:	f7ff ff42 	bl	800352c <HAL_UART_RxHalfCpltCallback>
}
 80036a8:	bf00      	nop
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}

080036b0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	bf0c      	ite	eq
 80036d0:	2301      	moveq	r3, #1
 80036d2:	2300      	movne	r3, #0
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b21      	cmp	r3, #33	; 0x21
 80036e2:	d108      	bne.n	80036f6 <UART_DMAError+0x46>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d005      	beq.n	80036f6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	2200      	movs	r2, #0
 80036ee:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80036f0:	68b8      	ldr	r0, [r7, #8]
 80036f2:	f000 f971 	bl	80039d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003700:	2b40      	cmp	r3, #64	; 0x40
 8003702:	bf0c      	ite	eq
 8003704:	2301      	moveq	r3, #1
 8003706:	2300      	movne	r3, #0
 8003708:	b2db      	uxtb	r3, r3
 800370a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b22      	cmp	r3, #34	; 0x22
 8003716:	d108      	bne.n	800372a <UART_DMAError+0x7a>
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d005      	beq.n	800372a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	2200      	movs	r2, #0
 8003722:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003724:	68b8      	ldr	r0, [r7, #8]
 8003726:	f000 f97f 	bl	8003a28 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800372e:	f043 0210 	orr.w	r2, r3, #16
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003736:	68b8      	ldr	r0, [r7, #8]
 8003738:	f7ff ff02 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800373c:	bf00      	nop
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b090      	sub	sp, #64	; 0x40
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	603b      	str	r3, [r7, #0]
 8003750:	4613      	mov	r3, r2
 8003752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003754:	e050      	b.n	80037f8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800375c:	d04c      	beq.n	80037f8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800375e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003760:	2b00      	cmp	r3, #0
 8003762:	d007      	beq.n	8003774 <UART_WaitOnFlagUntilTimeout+0x30>
 8003764:	f7fd fba6 	bl	8000eb4 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003770:	429a      	cmp	r2, r3
 8003772:	d241      	bcs.n	80037f8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	330c      	adds	r3, #12
 800377a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800377c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800377e:	e853 3f00 	ldrex	r3, [r3]
 8003782:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800378a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	330c      	adds	r3, #12
 8003792:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003794:	637a      	str	r2, [r7, #52]	; 0x34
 8003796:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003798:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800379a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800379c:	e841 2300 	strex	r3, r2, [r1]
 80037a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80037a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1e5      	bne.n	8003774 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	3314      	adds	r3, #20
 80037ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	e853 3f00 	ldrex	r3, [r3]
 80037b6:	613b      	str	r3, [r7, #16]
   return(result);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f023 0301 	bic.w	r3, r3, #1
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3314      	adds	r3, #20
 80037c6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037c8:	623a      	str	r2, [r7, #32]
 80037ca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037cc:	69f9      	ldr	r1, [r7, #28]
 80037ce:	6a3a      	ldr	r2, [r7, #32]
 80037d0:	e841 2300 	strex	r3, r2, [r1]
 80037d4:	61bb      	str	r3, [r7, #24]
   return(result);
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1e5      	bne.n	80037a8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2220      	movs	r2, #32
 80037e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e00f      	b.n	8003818 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	4013      	ands	r3, r2
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	429a      	cmp	r2, r3
 8003806:	bf0c      	ite	eq
 8003808:	2301      	moveq	r3, #1
 800380a:	2300      	movne	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	461a      	mov	r2, r3
 8003810:	79fb      	ldrb	r3, [r7, #7]
 8003812:	429a      	cmp	r2, r3
 8003814:	d09f      	beq.n	8003756 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003816:	2300      	movs	r3, #0
}
 8003818:	4618      	mov	r0, r3
 800381a:	3740      	adds	r7, #64	; 0x40
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003820:	b480      	push	{r7}
 8003822:	b085      	sub	sp, #20
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	4613      	mov	r3, r2
 800382c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	88fa      	ldrh	r2, [r7, #6]
 8003838:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	88fa      	ldrh	r2, [r7, #6]
 800383e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2222      	movs	r2, #34	; 0x22
 800384a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d007      	beq.n	800386e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	68da      	ldr	r2, [r3, #12]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800386c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	695a      	ldr	r2, [r3, #20]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68da      	ldr	r2, [r3, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f042 0220 	orr.w	r2, r2, #32
 800388c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800388e:	2300      	movs	r3, #0
}
 8003890:	4618      	mov	r0, r3
 8003892:	3714      	adds	r7, #20
 8003894:	46bd      	mov	sp, r7
 8003896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389a:	4770      	bx	lr

0800389c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b098      	sub	sp, #96	; 0x60
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2222      	movs	r2, #34	; 0x22
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c8:	4a40      	ldr	r2, [pc, #256]	; (80039cc <UART_Start_Receive_DMA+0x130>)
 80038ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d0:	4a3f      	ldr	r2, [pc, #252]	; (80039d0 <UART_Start_Receive_DMA+0x134>)
 80038d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d8:	4a3e      	ldr	r2, [pc, #248]	; (80039d4 <UART_Start_Receive_DMA+0x138>)
 80038da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e0:	2200      	movs	r2, #0
 80038e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80038e4:	f107 0308 	add.w	r3, r7, #8
 80038e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	3304      	adds	r3, #4
 80038f4:	4619      	mov	r1, r3
 80038f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f8:	681a      	ldr	r2, [r3, #0]
 80038fa:	88fb      	ldrh	r3, [r7, #6]
 80038fc:	f7fd fcca 	bl	8001294 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003900:	2300      	movs	r3, #0
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	613b      	str	r3, [r7, #16]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	691b      	ldr	r3, [r3, #16]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d019      	beq.n	800395a <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	330c      	adds	r3, #12
 800392c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003930:	e853 3f00 	ldrex	r3, [r3]
 8003934:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393c:	65bb      	str	r3, [r7, #88]	; 0x58
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	330c      	adds	r3, #12
 8003944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003946:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003948:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800394c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1e5      	bne.n	8003926 <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3314      	adds	r3, #20
 8003960:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003964:	e853 3f00 	ldrex	r3, [r3]
 8003968:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800396a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800396c:	f043 0301 	orr.w	r3, r3, #1
 8003970:	657b      	str	r3, [r7, #84]	; 0x54
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	3314      	adds	r3, #20
 8003978:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800397a:	63ba      	str	r2, [r7, #56]	; 0x38
 800397c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003980:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003982:	e841 2300 	strex	r3, r2, [r1]
 8003986:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1e5      	bne.n	800395a <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	3314      	adds	r3, #20
 8003994:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	e853 3f00 	ldrex	r3, [r3]
 800399c:	617b      	str	r3, [r7, #20]
   return(result);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a4:	653b      	str	r3, [r7, #80]	; 0x50
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3314      	adds	r3, #20
 80039ac:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039ae:	627a      	str	r2, [r7, #36]	; 0x24
 80039b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b2:	6a39      	ldr	r1, [r7, #32]
 80039b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039b6:	e841 2300 	strex	r3, r2, [r1]
 80039ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d1e5      	bne.n	800398e <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3760      	adds	r7, #96	; 0x60
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	08003555 	.word	0x08003555
 80039d0:	0800367b 	.word	0x0800367b
 80039d4:	080036b1 	.word	0x080036b1

080039d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	61ba      	str	r2, [r7, #24]
 8003a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a04:	6979      	ldr	r1, [r7, #20]
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	e841 2300 	strex	r3, r2, [r1]
 8003a0c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d1e5      	bne.n	80039e0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2220      	movs	r2, #32
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8003a1c:	bf00      	nop
 8003a1e:	3724      	adds	r7, #36	; 0x24
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b095      	sub	sp, #84	; 0x54
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	330c      	adds	r3, #12
 8003a36:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a3a:	e853 3f00 	ldrex	r3, [r3]
 8003a3e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003a40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a42:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003a46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	330c      	adds	r3, #12
 8003a4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a50:	643a      	str	r2, [r7, #64]	; 0x40
 8003a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a56:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e5      	bne.n	8003a30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3314      	adds	r3, #20
 8003a6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6c:	6a3b      	ldr	r3, [r7, #32]
 8003a6e:	e853 3f00 	ldrex	r3, [r3]
 8003a72:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	f023 0301 	bic.w	r3, r3, #1
 8003a7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	3314      	adds	r3, #20
 8003a82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a84:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a86:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a8c:	e841 2300 	strex	r3, r2, [r1]
 8003a90:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1e5      	bne.n	8003a64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d119      	bne.n	8003ad4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	330c      	adds	r3, #12
 8003aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	e853 3f00 	ldrex	r3, [r3]
 8003aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	f023 0310 	bic.w	r3, r3, #16
 8003ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	330c      	adds	r3, #12
 8003abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ac0:	61ba      	str	r2, [r7, #24]
 8003ac2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac4:	6979      	ldr	r1, [r7, #20]
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	e841 2300 	strex	r3, r2, [r1]
 8003acc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e5      	bne.n	8003aa0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003ae2:	bf00      	nop
 8003ae4:	3754      	adds	r7, #84	; 0x54
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003b08:	68f8      	ldr	r0, [r7, #12]
 8003b0a:	f7ff fd19 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b0e:	bf00      	nop
 8003b10:	3710      	adds	r7, #16
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bd80      	pop	{r7, pc}

08003b16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003b16:	b480      	push	{r7}
 8003b18:	b085      	sub	sp, #20
 8003b1a:	af00      	add	r7, sp, #0
 8003b1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b21      	cmp	r3, #33	; 0x21
 8003b28:	d13e      	bne.n	8003ba8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b32:	d114      	bne.n	8003b5e <UART_Transmit_IT+0x48>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d110      	bne.n	8003b5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a1b      	ldr	r3, [r3, #32]
 8003b40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	1c9a      	adds	r2, r3, #2
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	621a      	str	r2, [r3, #32]
 8003b5c:	e008      	b.n	8003b70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a1b      	ldr	r3, [r3, #32]
 8003b62:	1c59      	adds	r1, r3, #1
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	6211      	str	r1, [r2, #32]
 8003b68:	781a      	ldrb	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d10f      	bne.n	8003ba4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ba2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	e000      	b.n	8003baa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ba8:	2302      	movs	r3, #2
  }
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr

08003bb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003bb6:	b580      	push	{r7, lr}
 8003bb8:	b082      	sub	sp, #8
 8003bba:	af00      	add	r7, sp, #0
 8003bbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f7ff fc9e 	bl	8003518 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bdc:	2300      	movs	r3, #0
}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3708      	adds	r7, #8
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}

08003be6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003be6:	b580      	push	{r7, lr}
 8003be8:	b08c      	sub	sp, #48	; 0x30
 8003bea:	af00      	add	r7, sp, #0
 8003bec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b22      	cmp	r3, #34	; 0x22
 8003bf8:	f040 80ab 	bne.w	8003d52 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c04:	d117      	bne.n	8003c36 <UART_Receive_IT+0x50>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d113      	bne.n	8003c36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c16:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	1c9a      	adds	r2, r3, #2
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	629a      	str	r2, [r3, #40]	; 0x28
 8003c34:	e026      	b.n	8003c84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c48:	d007      	beq.n	8003c5a <UART_Receive_IT+0x74>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10a      	bne.n	8003c68 <UART_Receive_IT+0x82>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d106      	bne.n	8003c68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	b2da      	uxtb	r2, r3
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	701a      	strb	r2, [r3, #0]
 8003c66:	e008      	b.n	8003c7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	b2db      	uxtb	r3, r3
 8003c70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c74:	b2da      	uxtb	r2, r3
 8003c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	4619      	mov	r1, r3
 8003c92:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d15a      	bne.n	8003d4e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f022 0220 	bic.w	r2, r2, #32
 8003ca6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	68da      	ldr	r2, [r3, #12]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	695a      	ldr	r2, [r3, #20]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f022 0201 	bic.w	r2, r2, #1
 8003cc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d135      	bne.n	8003d44 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	613b      	str	r3, [r7, #16]
   return(result);
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	f023 0310 	bic.w	r3, r3, #16
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	330c      	adds	r3, #12
 8003cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfe:	623a      	str	r2, [r7, #32]
 8003d00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	69f9      	ldr	r1, [r7, #28]
 8003d04:	6a3a      	ldr	r2, [r7, #32]
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e5      	bne.n	8003cde <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0310 	and.w	r3, r3, #16
 8003d1c:	2b10      	cmp	r3, #16
 8003d1e:	d10a      	bne.n	8003d36 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d20:	2300      	movs	r3, #0
 8003d22:	60fb      	str	r3, [r7, #12]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60fb      	str	r3, [r7, #12]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	60fb      	str	r3, [r7, #12]
 8003d34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7fc fe6d 	bl	8000a1c <HAL_UARTEx_RxEventCallback>
 8003d42:	e002      	b.n	8003d4a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d44:	6878      	ldr	r0, [r7, #4]
 8003d46:	f7fc fe57 	bl	80009f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	e002      	b.n	8003d54 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	e000      	b.n	8003d54 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003d52:	2302      	movs	r3, #2
  }
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3730      	adds	r7, #48	; 0x30
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d60:	b0c0      	sub	sp, #256	; 0x100
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d78:	68d9      	ldr	r1, [r3, #12]
 8003d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	ea40 0301 	orr.w	r3, r0, r1
 8003d84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	431a      	orrs	r2, r3
 8003d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da0:	69db      	ldr	r3, [r3, #28]
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68db      	ldr	r3, [r3, #12]
 8003db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003db4:	f021 010c 	bic.w	r1, r1, #12
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dc2:	430b      	orrs	r3, r1
 8003dc4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd6:	6999      	ldr	r1, [r3, #24]
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	ea40 0301 	orr.w	r3, r0, r1
 8003de2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	4b8f      	ldr	r3, [pc, #572]	; (8004028 <UART_SetConfig+0x2cc>)
 8003dec:	429a      	cmp	r2, r3
 8003dee:	d005      	beq.n	8003dfc <UART_SetConfig+0xa0>
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	4b8d      	ldr	r3, [pc, #564]	; (800402c <UART_SetConfig+0x2d0>)
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d104      	bne.n	8003e06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dfc:	f7fe fbb2 	bl	8002564 <HAL_RCC_GetPCLK2Freq>
 8003e00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e04:	e003      	b.n	8003e0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e06:	f7fe fb99 	bl	800253c <HAL_RCC_GetPCLK1Freq>
 8003e0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e18:	f040 810c 	bne.w	8004034 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e20:	2200      	movs	r2, #0
 8003e22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e2e:	4622      	mov	r2, r4
 8003e30:	462b      	mov	r3, r5
 8003e32:	1891      	adds	r1, r2, r2
 8003e34:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e36:	415b      	adcs	r3, r3
 8003e38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e3e:	4621      	mov	r1, r4
 8003e40:	eb12 0801 	adds.w	r8, r2, r1
 8003e44:	4629      	mov	r1, r5
 8003e46:	eb43 0901 	adc.w	r9, r3, r1
 8003e4a:	f04f 0200 	mov.w	r2, #0
 8003e4e:	f04f 0300 	mov.w	r3, #0
 8003e52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e5e:	4690      	mov	r8, r2
 8003e60:	4699      	mov	r9, r3
 8003e62:	4623      	mov	r3, r4
 8003e64:	eb18 0303 	adds.w	r3, r8, r3
 8003e68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e6c:	462b      	mov	r3, r5
 8003e6e:	eb49 0303 	adc.w	r3, r9, r3
 8003e72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	18db      	adds	r3, r3, r3
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e90:	4613      	mov	r3, r2
 8003e92:	eb42 0303 	adc.w	r3, r2, r3
 8003e96:	657b      	str	r3, [r7, #84]	; 0x54
 8003e98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003e9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003ea0:	f7fc f9a2 	bl	80001e8 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4b61      	ldr	r3, [pc, #388]	; (8004030 <UART_SetConfig+0x2d4>)
 8003eaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003eae:	095b      	lsrs	r3, r3, #5
 8003eb0:	011c      	lsls	r4, r3, #4
 8003eb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ebc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ec0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ec4:	4642      	mov	r2, r8
 8003ec6:	464b      	mov	r3, r9
 8003ec8:	1891      	adds	r1, r2, r2
 8003eca:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ecc:	415b      	adcs	r3, r3
 8003ece:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ed0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	eb12 0a01 	adds.w	sl, r2, r1
 8003eda:	4649      	mov	r1, r9
 8003edc:	eb43 0b01 	adc.w	fp, r3, r1
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	f04f 0300 	mov.w	r3, #0
 8003ee8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003eec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ef4:	4692      	mov	sl, r2
 8003ef6:	469b      	mov	fp, r3
 8003ef8:	4643      	mov	r3, r8
 8003efa:	eb1a 0303 	adds.w	r3, sl, r3
 8003efe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f02:	464b      	mov	r3, r9
 8003f04:	eb4b 0303 	adc.w	r3, fp, r3
 8003f08:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f18:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f1c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f20:	460b      	mov	r3, r1
 8003f22:	18db      	adds	r3, r3, r3
 8003f24:	643b      	str	r3, [r7, #64]	; 0x40
 8003f26:	4613      	mov	r3, r2
 8003f28:	eb42 0303 	adc.w	r3, r2, r3
 8003f2c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f2e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f36:	f7fc f957 	bl	80001e8 <__aeabi_uldivmod>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4611      	mov	r1, r2
 8003f40:	4b3b      	ldr	r3, [pc, #236]	; (8004030 <UART_SetConfig+0x2d4>)
 8003f42:	fba3 2301 	umull	r2, r3, r3, r1
 8003f46:	095b      	lsrs	r3, r3, #5
 8003f48:	2264      	movs	r2, #100	; 0x64
 8003f4a:	fb02 f303 	mul.w	r3, r2, r3
 8003f4e:	1acb      	subs	r3, r1, r3
 8003f50:	00db      	lsls	r3, r3, #3
 8003f52:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f56:	4b36      	ldr	r3, [pc, #216]	; (8004030 <UART_SetConfig+0x2d4>)
 8003f58:	fba3 2302 	umull	r2, r3, r3, r2
 8003f5c:	095b      	lsrs	r3, r3, #5
 8003f5e:	005b      	lsls	r3, r3, #1
 8003f60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f64:	441c      	add	r4, r3
 8003f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f70:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f74:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f78:	4642      	mov	r2, r8
 8003f7a:	464b      	mov	r3, r9
 8003f7c:	1891      	adds	r1, r2, r2
 8003f7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f80:	415b      	adcs	r3, r3
 8003f82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003f88:	4641      	mov	r1, r8
 8003f8a:	1851      	adds	r1, r2, r1
 8003f8c:	6339      	str	r1, [r7, #48]	; 0x30
 8003f8e:	4649      	mov	r1, r9
 8003f90:	414b      	adcs	r3, r1
 8003f92:	637b      	str	r3, [r7, #52]	; 0x34
 8003f94:	f04f 0200 	mov.w	r2, #0
 8003f98:	f04f 0300 	mov.w	r3, #0
 8003f9c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fa0:	4659      	mov	r1, fp
 8003fa2:	00cb      	lsls	r3, r1, #3
 8003fa4:	4651      	mov	r1, sl
 8003fa6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003faa:	4651      	mov	r1, sl
 8003fac:	00ca      	lsls	r2, r1, #3
 8003fae:	4610      	mov	r0, r2
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	189b      	adds	r3, r3, r2
 8003fb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fbc:	464b      	mov	r3, r9
 8003fbe:	460a      	mov	r2, r1
 8003fc0:	eb42 0303 	adc.w	r3, r2, r3
 8003fc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fd4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003fd8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003fdc:	460b      	mov	r3, r1
 8003fde:	18db      	adds	r3, r3, r3
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	eb42 0303 	adc.w	r3, r2, r3
 8003fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003ff2:	f7fc f8f9 	bl	80001e8 <__aeabi_uldivmod>
 8003ff6:	4602      	mov	r2, r0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4b0d      	ldr	r3, [pc, #52]	; (8004030 <UART_SetConfig+0x2d4>)
 8003ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	2164      	movs	r1, #100	; 0x64
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	3332      	adds	r3, #50	; 0x32
 800400e:	4a08      	ldr	r2, [pc, #32]	; (8004030 <UART_SetConfig+0x2d4>)
 8004010:	fba2 2303 	umull	r2, r3, r2, r3
 8004014:	095b      	lsrs	r3, r3, #5
 8004016:	f003 0207 	and.w	r2, r3, #7
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4422      	add	r2, r4
 8004022:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004024:	e105      	b.n	8004232 <UART_SetConfig+0x4d6>
 8004026:	bf00      	nop
 8004028:	40011000 	.word	0x40011000
 800402c:	40011400 	.word	0x40011400
 8004030:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800403e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004042:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004046:	4642      	mov	r2, r8
 8004048:	464b      	mov	r3, r9
 800404a:	1891      	adds	r1, r2, r2
 800404c:	6239      	str	r1, [r7, #32]
 800404e:	415b      	adcs	r3, r3
 8004050:	627b      	str	r3, [r7, #36]	; 0x24
 8004052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004056:	4641      	mov	r1, r8
 8004058:	1854      	adds	r4, r2, r1
 800405a:	4649      	mov	r1, r9
 800405c:	eb43 0501 	adc.w	r5, r3, r1
 8004060:	f04f 0200 	mov.w	r2, #0
 8004064:	f04f 0300 	mov.w	r3, #0
 8004068:	00eb      	lsls	r3, r5, #3
 800406a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800406e:	00e2      	lsls	r2, r4, #3
 8004070:	4614      	mov	r4, r2
 8004072:	461d      	mov	r5, r3
 8004074:	4643      	mov	r3, r8
 8004076:	18e3      	adds	r3, r4, r3
 8004078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800407c:	464b      	mov	r3, r9
 800407e:	eb45 0303 	adc.w	r3, r5, r3
 8004082:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004092:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004096:	f04f 0200 	mov.w	r2, #0
 800409a:	f04f 0300 	mov.w	r3, #0
 800409e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040a2:	4629      	mov	r1, r5
 80040a4:	008b      	lsls	r3, r1, #2
 80040a6:	4621      	mov	r1, r4
 80040a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040ac:	4621      	mov	r1, r4
 80040ae:	008a      	lsls	r2, r1, #2
 80040b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040b4:	f7fc f898 	bl	80001e8 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4b60      	ldr	r3, [pc, #384]	; (8004240 <UART_SetConfig+0x4e4>)
 80040be:	fba3 2302 	umull	r2, r3, r3, r2
 80040c2:	095b      	lsrs	r3, r3, #5
 80040c4:	011c      	lsls	r4, r3, #4
 80040c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040ca:	2200      	movs	r2, #0
 80040cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040d8:	4642      	mov	r2, r8
 80040da:	464b      	mov	r3, r9
 80040dc:	1891      	adds	r1, r2, r2
 80040de:	61b9      	str	r1, [r7, #24]
 80040e0:	415b      	adcs	r3, r3
 80040e2:	61fb      	str	r3, [r7, #28]
 80040e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040e8:	4641      	mov	r1, r8
 80040ea:	1851      	adds	r1, r2, r1
 80040ec:	6139      	str	r1, [r7, #16]
 80040ee:	4649      	mov	r1, r9
 80040f0:	414b      	adcs	r3, r1
 80040f2:	617b      	str	r3, [r7, #20]
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	f04f 0300 	mov.w	r3, #0
 80040fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004100:	4659      	mov	r1, fp
 8004102:	00cb      	lsls	r3, r1, #3
 8004104:	4651      	mov	r1, sl
 8004106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800410a:	4651      	mov	r1, sl
 800410c:	00ca      	lsls	r2, r1, #3
 800410e:	4610      	mov	r0, r2
 8004110:	4619      	mov	r1, r3
 8004112:	4603      	mov	r3, r0
 8004114:	4642      	mov	r2, r8
 8004116:	189b      	adds	r3, r3, r2
 8004118:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800411c:	464b      	mov	r3, r9
 800411e:	460a      	mov	r2, r1
 8004120:	eb42 0303 	adc.w	r3, r2, r3
 8004124:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	67bb      	str	r3, [r7, #120]	; 0x78
 8004132:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	f04f 0300 	mov.w	r3, #0
 800413c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004140:	4649      	mov	r1, r9
 8004142:	008b      	lsls	r3, r1, #2
 8004144:	4641      	mov	r1, r8
 8004146:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800414a:	4641      	mov	r1, r8
 800414c:	008a      	lsls	r2, r1, #2
 800414e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004152:	f7fc f849 	bl	80001e8 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4b39      	ldr	r3, [pc, #228]	; (8004240 <UART_SetConfig+0x4e4>)
 800415c:	fba3 1302 	umull	r1, r3, r3, r2
 8004160:	095b      	lsrs	r3, r3, #5
 8004162:	2164      	movs	r1, #100	; 0x64
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	011b      	lsls	r3, r3, #4
 800416c:	3332      	adds	r3, #50	; 0x32
 800416e:	4a34      	ldr	r2, [pc, #208]	; (8004240 <UART_SetConfig+0x4e4>)
 8004170:	fba2 2303 	umull	r2, r3, r2, r3
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800417a:	441c      	add	r4, r3
 800417c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004180:	2200      	movs	r2, #0
 8004182:	673b      	str	r3, [r7, #112]	; 0x70
 8004184:	677a      	str	r2, [r7, #116]	; 0x74
 8004186:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800418a:	4642      	mov	r2, r8
 800418c:	464b      	mov	r3, r9
 800418e:	1891      	adds	r1, r2, r2
 8004190:	60b9      	str	r1, [r7, #8]
 8004192:	415b      	adcs	r3, r3
 8004194:	60fb      	str	r3, [r7, #12]
 8004196:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800419a:	4641      	mov	r1, r8
 800419c:	1851      	adds	r1, r2, r1
 800419e:	6039      	str	r1, [r7, #0]
 80041a0:	4649      	mov	r1, r9
 80041a2:	414b      	adcs	r3, r1
 80041a4:	607b      	str	r3, [r7, #4]
 80041a6:	f04f 0200 	mov.w	r2, #0
 80041aa:	f04f 0300 	mov.w	r3, #0
 80041ae:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041b2:	4659      	mov	r1, fp
 80041b4:	00cb      	lsls	r3, r1, #3
 80041b6:	4651      	mov	r1, sl
 80041b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041bc:	4651      	mov	r1, sl
 80041be:	00ca      	lsls	r2, r1, #3
 80041c0:	4610      	mov	r0, r2
 80041c2:	4619      	mov	r1, r3
 80041c4:	4603      	mov	r3, r0
 80041c6:	4642      	mov	r2, r8
 80041c8:	189b      	adds	r3, r3, r2
 80041ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80041cc:	464b      	mov	r3, r9
 80041ce:	460a      	mov	r2, r1
 80041d0:	eb42 0303 	adc.w	r3, r2, r3
 80041d4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	663b      	str	r3, [r7, #96]	; 0x60
 80041e0:	667a      	str	r2, [r7, #100]	; 0x64
 80041e2:	f04f 0200 	mov.w	r2, #0
 80041e6:	f04f 0300 	mov.w	r3, #0
 80041ea:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80041ee:	4649      	mov	r1, r9
 80041f0:	008b      	lsls	r3, r1, #2
 80041f2:	4641      	mov	r1, r8
 80041f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041f8:	4641      	mov	r1, r8
 80041fa:	008a      	lsls	r2, r1, #2
 80041fc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004200:	f7fb fff2 	bl	80001e8 <__aeabi_uldivmod>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4b0d      	ldr	r3, [pc, #52]	; (8004240 <UART_SetConfig+0x4e4>)
 800420a:	fba3 1302 	umull	r1, r3, r3, r2
 800420e:	095b      	lsrs	r3, r3, #5
 8004210:	2164      	movs	r1, #100	; 0x64
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	3332      	adds	r3, #50	; 0x32
 800421c:	4a08      	ldr	r2, [pc, #32]	; (8004240 <UART_SetConfig+0x4e4>)
 800421e:	fba2 2303 	umull	r2, r3, r2, r3
 8004222:	095b      	lsrs	r3, r3, #5
 8004224:	f003 020f 	and.w	r2, r3, #15
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4422      	add	r2, r4
 8004230:	609a      	str	r2, [r3, #8]
}
 8004232:	bf00      	nop
 8004234:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004238:	46bd      	mov	sp, r7
 800423a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800423e:	bf00      	nop
 8004240:	51eb851f 	.word	0x51eb851f

08004244 <rylr998SetAddress>:

	return ret;
}
//AT+ADDRESS=<Address>
Rylr998_Status_t rylr998SetAddress(uint8_t* address)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
	Rylr998_Status_t 	ret 				= Rylr998_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	77fb      	strb	r3, [r7, #31]
	const uint16_t 		packetSize 			= 14;
 8004250:	230e      	movs	r3, #14
 8004252:	83bb      	strh	r3, [r7, #28]
	char	 			uartTxBuffer[14] 	= {0};
 8004254:	2300      	movs	r3, #0
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	f107 0310 	add.w	r3, r7, #16
 800425c:	2200      	movs	r2, #0
 800425e:	601a      	str	r2, [r3, #0]
 8004260:	605a      	str	r2, [r3, #4]
 8004262:	811a      	strh	r2, [r3, #8]

	memcpy(uartTxBuffer, AT, AT_PRIFEX_SIZE);
 8004264:	f107 030c 	add.w	r3, r7, #12
 8004268:	2203      	movs	r2, #3
 800426a:	4923      	ldr	r1, [pc, #140]	; (80042f8 <rylr998SetAddress+0xb4>)
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fda1 	bl	8004db4 <memcpy>
	strcat(uartTxBuffer, ADDRESS);
 8004272:	f107 030c 	add.w	r3, r7, #12
 8004276:	4618      	mov	r0, r3
 8004278:	f7fb ffae 	bl	80001d8 <strlen>
 800427c:	4603      	mov	r3, r0
 800427e:	461a      	mov	r2, r3
 8004280:	f107 030c 	add.w	r3, r7, #12
 8004284:	4413      	add	r3, r2
 8004286:	491d      	ldr	r1, [pc, #116]	; (80042fc <rylr998SetAddress+0xb8>)
 8004288:	461a      	mov	r2, r3
 800428a:	460b      	mov	r3, r1
 800428c:	cb03      	ldmia	r3!, {r0, r1}
 800428e:	6010      	str	r0, [r2, #0]
 8004290:	6051      	str	r1, [r2, #4]
	strcat(uartTxBuffer, SET_VALUE);
 8004292:	f107 030c 	add.w	r3, r7, #12
 8004296:	4618      	mov	r0, r3
 8004298:	f7fb ff9e 	bl	80001d8 <strlen>
 800429c:	4603      	mov	r3, r0
 800429e:	461a      	mov	r2, r3
 80042a0:	f107 030c 	add.w	r3, r7, #12
 80042a4:	4413      	add	r3, r2
 80042a6:	4916      	ldr	r1, [pc, #88]	; (8004300 <rylr998SetAddress+0xbc>)
 80042a8:	461a      	mov	r2, r3
 80042aa:	460b      	mov	r3, r1
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	8013      	strh	r3, [r2, #0]

	strcat((char*) uartTxBuffer, (char*)  address);
 80042b0:	f107 030c 	add.w	r3, r7, #12
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fd92 	bl	8004de0 <strcat>
	strcat((char*) uartTxBuffer, TERMINATOR);
 80042bc:	f107 030c 	add.w	r3, r7, #12
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7fb ff89 	bl	80001d8 <strlen>
 80042c6:	4603      	mov	r3, r0
 80042c8:	461a      	mov	r2, r3
 80042ca:	f107 030c 	add.w	r3, r7, #12
 80042ce:	4413      	add	r3, r2
 80042d0:	4a0c      	ldr	r2, [pc, #48]	; (8004304 <rylr998SetAddress+0xc0>)
 80042d2:	8811      	ldrh	r1, [r2, #0]
 80042d4:	7892      	ldrb	r2, [r2, #2]
 80042d6:	8019      	strh	r1, [r3, #0]
 80042d8:	709a      	strb	r2, [r3, #2]

	ret = HAL_UART_Transmit(&huart1,(uint8_t*) uartTxBuffer, packetSize, 10);
 80042da:	8bba      	ldrh	r2, [r7, #28]
 80042dc:	f107 010c 	add.w	r1, r7, #12
 80042e0:	230a      	movs	r3, #10
 80042e2:	4809      	ldr	r0, [pc, #36]	; (8004308 <rylr998SetAddress+0xc4>)
 80042e4:	f7fe fd63 	bl	8002dae <HAL_UART_Transmit>
 80042e8:	4603      	mov	r3, r0
 80042ea:	77fb      	strb	r3, [r7, #31]

	return ret;
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3720      	adds	r7, #32
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	08004e18 	.word	0x08004e18
 80042fc:	08004e20 	.word	0x08004e20
 8004300:	08004e28 	.word	0x08004e28
 8004304:	08004e1c 	.word	0x08004e1c
 8004308:	20000028 	.word	0x20000028

0800430c <rylr998Send>:
}

//AT+SEND=<Address>,<Payload Length>,<Data>
Rylr998_Status_t rylr998Send(Rylr998Handler_t* hRylr998, UloraCommand_e uLoRaCommand)
//Rylr998_Status_t rylr998Send(uint16_t address, uint8_t payloadLength, uint8_t* txBuffer)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b0c6      	sub	sp, #280	; 0x118
 8004310:	af00      	add	r7, sp, #0
 8004312:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004316:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800431a:	6018      	str	r0, [r3, #0]
 800431c:	460a      	mov	r2, r1
 800431e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004322:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8004326:	701a      	strb	r2, [r3, #0]
	Rylr998_Status_t 	ret 					= Rylr998_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114
	uint8_t 			uartTxBuffer[256] 		= {0};
 800432e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004332:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004336:	2200      	movs	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	3304      	adds	r3, #4
 800433c:	22fc      	movs	r2, #252	; 0xfc
 800433e:	2100      	movs	r1, #0
 8004340:	4618      	mov	r0, r3
 8004342:	f000 fd45 	bl	8004dd0 <memset>
	uint16_t			packetSize				= 0;
 8004346:	2300      	movs	r3, #0
 8004348:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
	uint8_t				packetSizeAscii[2]		= {0};
 800434c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004350:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004354:	2200      	movs	r2, #0
 8004356:	801a      	strh	r2, [r3, #0]
	uint8_t				payloadSize				= 0;
 8004358:	2300      	movs	r3, #0
 800435a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
	UloraCommand_e				Command			= uLoRaCommand;
 800435e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004362:	f2a3 1315 	subw	r3, r3, #277	; 0x115
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	f887 3113 	strb.w	r3, [r7, #275]	; 0x113
	switch (Command)
 800436c:	f997 3113 	ldrsb.w	r3, [r7, #275]	; 0x113
 8004370:	2b03      	cmp	r3, #3
 8004372:	d860      	bhi.n	8004436 <rylr998Send+0x12a>
 8004374:	a201      	add	r2, pc, #4	; (adr r2, 800437c <rylr998Send+0x70>)
 8004376:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800437a:	bf00      	nop
 800437c:	08004437 	.word	0x08004437
 8004380:	0800438d 	.word	0x0800438d
 8004384:	080043c1 	.word	0x080043c1
 8004388:	08004411 	.word	0x08004411
	{
		case ULORA_NAK:

			break;
		case ULORA_ACK:
			hRylr998->rylr998Transmitter.TxBuffer[0] = ULORA_ACK;
 800438c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004390:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2020 	strb.w	r2, [r3, #32]
			hRylr998->rylr998Transmitter.TxBuffer[1] = 0;
 800439c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043a0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2200      	movs	r2, #0
 80043a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			payloadSize = 1;
 80043ac:	2301      	movs	r3, #1
 80043ae:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			packetSizeAscii[0] = '1';							//One single byte to transmit
 80043b2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043b6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043ba:	2231      	movs	r2, #49	; 0x31
 80043bc:	701a      	strb	r2, [r3, #0]
			break;
 80043be:	e03a      	b.n	8004436 <rylr998Send+0x12a>
		case ULORA_CONN_COUNT:
			uloraCommunicationTest	(hRylr998->rylr998Transmitter.TxBuffer);
 80043c0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043c4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3320      	adds	r3, #32
 80043cc:	4618      	mov	r0, r3
 80043ce:	f000 fb17 	bl	8004a00 <uloraCommunicationTest>
			packetSize += hRylr998->rylr998Transmitter.TxBuffer[1] - 1 - '0' ;
 80043d2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043d6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80043e6:	4413      	add	r3, r2
 80043e8:	b29b      	uxth	r3, r3
 80043ea:	3b31      	subs	r3, #49	; 0x31
 80043ec:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
			packetSizeAscii[0] = hRylr998->rylr998Transmitter.TxBuffer[1];
 80043f0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80043f4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 80043fe:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004402:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004406:	701a      	strb	r2, [r3, #0]
			payloadSize = 4;
 8004408:	2304      	movs	r3, #4
 800440a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			break;
 800440e:	e012      	b.n	8004436 <rylr998Send+0x12a>
		case ULORA_PIR_SENS:
			uloraPirStatusLoad(hRylr998->rylr998Transmitter.TxBuffer);
 8004410:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004414:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3320      	adds	r3, #32
 800441c:	4618      	mov	r0, r3
 800441e:	f000 fb15 	bl	8004a4c <uloraPirStatusLoad>
			packetSizeAscii[0] = '3';
 8004422:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8004426:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800442a:	2233      	movs	r2, #51	; 0x33
 800442c:	701a      	strb	r2, [r3, #0]
			payloadSize = 3;
 800442e:	2303      	movs	r3, #3
 8004430:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
			break;
 8004434:	bf00      	nop
	}
	packetSize += AT_PRIFEX_SIZE + AT_SET_VALUE_SIZE + strlen(SEND) + 2 + 1 + 1;
 8004436:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800443a:	330c      	adds	r3, #12
 800443c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116
//	packetSize += AT_OVERHEAD_SIZE + sizeof(SEND) + 2 + 1 + 1;   //2 is the number of segment separators
																 //1 is for the receiver address
																 //1 is for the payload size
	memcpy(uartTxBuffer, AT, AT_PRIFEX_SIZE);
 8004440:	f107 0310 	add.w	r3, r7, #16
 8004444:	2203      	movs	r2, #3
 8004446:	4947      	ldr	r1, [pc, #284]	; (8004564 <rylr998Send+0x258>)
 8004448:	4618      	mov	r0, r3
 800444a:	f000 fcb3 	bl	8004db4 <memcpy>
	strcat((char*) uartTxBuffer, SEND);
 800444e:	f107 0310 	add.w	r3, r7, #16
 8004452:	4618      	mov	r0, r3
 8004454:	f7fb fec0 	bl	80001d8 <strlen>
 8004458:	4603      	mov	r3, r0
 800445a:	461a      	mov	r2, r3
 800445c:	f107 0310 	add.w	r3, r7, #16
 8004460:	4413      	add	r3, r2
 8004462:	4a41      	ldr	r2, [pc, #260]	; (8004568 <rylr998Send+0x25c>)
 8004464:	6810      	ldr	r0, [r2, #0]
 8004466:	6018      	str	r0, [r3, #0]
 8004468:	7912      	ldrb	r2, [r2, #4]
 800446a:	711a      	strb	r2, [r3, #4]
	strcat((char*) uartTxBuffer, SET_VALUE);
 800446c:	f107 0310 	add.w	r3, r7, #16
 8004470:	4618      	mov	r0, r3
 8004472:	f7fb feb1 	bl	80001d8 <strlen>
 8004476:	4603      	mov	r3, r0
 8004478:	461a      	mov	r2, r3
 800447a:	f107 0310 	add.w	r3, r7, #16
 800447e:	4413      	add	r3, r2
 8004480:	493a      	ldr	r1, [pc, #232]	; (800456c <rylr998Send+0x260>)
 8004482:	461a      	mov	r2, r3
 8004484:	460b      	mov	r3, r1
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	8013      	strh	r3, [r2, #0]

	strcat((char*) uartTxBuffer, (char*) hRylr998->rylr998Transmitter.address);
 800448a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800448e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f103 021c 	add.w	r2, r3, #28
 8004498:	f107 0310 	add.w	r3, r7, #16
 800449c:	4611      	mov	r1, r2
 800449e:	4618      	mov	r0, r3
 80044a0:	f000 fc9e 	bl	8004de0 <strcat>
	strcat((char*) uartTxBuffer, SEGMENT_SEPARATOR);
 80044a4:	f107 0310 	add.w	r3, r7, #16
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7fb fe95 	bl	80001d8 <strlen>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	f107 0310 	add.w	r3, r7, #16
 80044b6:	4413      	add	r3, r2
 80044b8:	492d      	ldr	r1, [pc, #180]	; (8004570 <rylr998Send+0x264>)
 80044ba:	461a      	mov	r2, r3
 80044bc:	460b      	mov	r3, r1
 80044be:	881b      	ldrh	r3, [r3, #0]
 80044c0:	8013      	strh	r3, [r2, #0]


	strcat((char*) uartTxBuffer, (char*)  packetSizeAscii);
 80044c2:	f107 020c 	add.w	r2, r7, #12
 80044c6:	f107 0310 	add.w	r3, r7, #16
 80044ca:	4611      	mov	r1, r2
 80044cc:	4618      	mov	r0, r3
 80044ce:	f000 fc87 	bl	8004de0 <strcat>
	strcat((char*) uartTxBuffer, SEGMENT_SEPARATOR);
 80044d2:	f107 0310 	add.w	r3, r7, #16
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fb fe7e 	bl	80001d8 <strlen>
 80044dc:	4603      	mov	r3, r0
 80044de:	461a      	mov	r2, r3
 80044e0:	f107 0310 	add.w	r3, r7, #16
 80044e4:	4413      	add	r3, r2
 80044e6:	4922      	ldr	r1, [pc, #136]	; (8004570 <rylr998Send+0x264>)
 80044e8:	461a      	mov	r2, r3
 80044ea:	460b      	mov	r3, r1
 80044ec:	881b      	ldrh	r3, [r3, #0]
 80044ee:	8013      	strh	r3, [r2, #0]
//	strcat((char*) uartTxBuffer, (char*) hRylr998->rylr998Transmitter.TxBuffer);
	memcpy(uartTxBuffer + packetSize, hRylr998->rylr998Transmitter.TxBuffer , packetSize);
 80044f0:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 80044f4:	f107 0210 	add.w	r2, r7, #16
 80044f8:	18d0      	adds	r0, r2, r3
 80044fa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 80044fe:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	3320      	adds	r3, #32
 8004506:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 800450a:	4619      	mov	r1, r3
 800450c:	f000 fc52 	bl	8004db4 <memcpy>
	packetSize += payloadSize;
 8004510:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8004514:	b29a      	uxth	r2, r3
 8004516:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800451a:	4413      	add	r3, r2
 800451c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

	memcpy(uartTxBuffer + packetSize, TERMINATOR , AT_TERMINATOR_SIZE);
 8004520:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8004524:	f107 0210 	add.w	r2, r7, #16
 8004528:	4413      	add	r3, r2
 800452a:	2202      	movs	r2, #2
 800452c:	4911      	ldr	r1, [pc, #68]	; (8004574 <rylr998Send+0x268>)
 800452e:	4618      	mov	r0, r3
 8004530:	f000 fc40 	bl	8004db4 <memcpy>
	packetSize += AT_TERMINATOR_SIZE;
 8004534:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8004538:	3302      	adds	r3, #2
 800453a:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

//	strcat((char*) uartTxBuffer, TERMINATOR);


	ret = HAL_UART_Transmit(&huart1, uartTxBuffer, packetSize, 10);
 800453e:	f8b7 2116 	ldrh.w	r2, [r7, #278]	; 0x116
 8004542:	f107 0110 	add.w	r1, r7, #16
 8004546:	230a      	movs	r3, #10
 8004548:	480b      	ldr	r0, [pc, #44]	; (8004578 <rylr998Send+0x26c>)
 800454a:	f7fe fc30 	bl	8002dae <HAL_UART_Transmit>
 800454e:	4603      	mov	r3, r0
 8004550:	f887 3114 	strb.w	r3, [r7, #276]	; 0x114

	return ret;
 8004554:	f897 3114 	ldrb.w	r3, [r7, #276]	; 0x114
}
 8004558:	4618      	mov	r0, r3
 800455a:	f507 778c 	add.w	r7, r7, #280	; 0x118
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	08004e18 	.word	0x08004e18
 8004568:	08004e48 	.word	0x08004e48
 800456c:	08004e28 	.word	0x08004e28
 8004570:	08004e50 	.word	0x08004e50
 8004574:	08004e1c 	.word	0x08004e1c
 8004578:	20000028 	.word	0x20000028

0800457c <rylr998ReceivePacketParser>:

Rylr998_Status_t rylr998ReceivePacketParser(Rylr998Handler_t* hRylr998)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b0c2      	sub	sp, #264	; 0x108
 8004580:	af00      	add	r7, sp, #0
 8004582:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004586:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800458a:	6018      	str	r0, [r3, #0]
	Rylr998_Status_t 	ret 						= Rylr998_ERROR;
 800458c:	2301      	movs	r3, #1
 800458e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	Rylr998RxCommand_e  command						= Rylr998R_NOT_FOUND;
 8004592:	2304      	movs	r3, #4
 8004594:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	uint8_t 			tempUartRxBuffer[250] 		= {0};
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
 800459c:	f107 0310 	add.w	r3, r7, #16
 80045a0:	22f6      	movs	r2, #246	; 0xf6
 80045a2:	2100      	movs	r1, #0
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 fc13 	bl	8004dd0 <memset>
    //Real size should be used instead
	memcpy(tempUartRxBuffer, hRylr998->rylr998Receiver.rxBuffer, 30);
 80045aa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80045ae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f203 1113 	addw	r1, r3, #275	; 0x113
 80045b8:	f107 030c 	add.w	r3, r7, #12
 80045bc:	221e      	movs	r2, #30
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 fbf8 	bl	8004db4 <memcpy>

	if(!memcmp(tempUartRxBuffer, RX_PACKET_START, 1))
 80045c4:	f107 030c 	add.w	r3, r7, #12
 80045c8:	781a      	ldrb	r2, [r3, #0]
 80045ca:	4b31      	ldr	r3, [pc, #196]	; (8004690 <rylr998ReceivePacketParser+0x114>)
 80045cc:	781b      	ldrb	r3, [r3, #0]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d151      	bne.n	8004676 <rylr998ReceivePacketParser+0xfa>
	{
		command = rylr998ResponseFind	(tempUartRxBuffer + RESPONSE_OFFSET);
 80045d2:	f107 030c 	add.w	r3, r7, #12
 80045d6:	3301      	adds	r3, #1
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 f9a1 	bl	8004920 <rylr998ResponseFind>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		switch (command)
 80045e4:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d846      	bhi.n	800467a <rylr998ReceivePacketParser+0xfe>
 80045ec:	a201      	add	r2, pc, #4	; (adr r2, 80045f4 <rylr998ReceivePacketParser+0x78>)
 80045ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f2:	bf00      	nop
 80045f4:	0800467b 	.word	0x0800467b
 80045f8:	08004605 	.word	0x08004605
 80045fc:	08004665 	.word	0x08004665
 8004600:	0800467b 	.word	0x0800467b
		{
			case Rylr998R_OK:

				break;
			case Rylr998R_ADDRESS:
				rylr998Ascii2Int(&hRylr998->rylr998Receiver.rxBuffer[ADDRESS_OFFSET]);
 8004604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004608:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8004612:	4618      	mov	r0, r3
 8004614:	f000 f9d8 	bl	80049c8 <rylr998Ascii2Int>
				if(hRylr998->rylr998Receiver.rxBuffer[ADDRESS_OFFSET] != RYLR998_ADDRESS)
 8004618:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800461c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
 8004626:	2b02      	cmp	r3, #2
 8004628:	d029      	beq.n	800467e <rylr998ReceivePacketParser+0x102>
				{
					hRylr998->rylr998Receiver.address[0] = RYLR998_ADDRESS;
 800462a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800462e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2202      	movs	r2, #2
 8004636:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
					rylr998Int2Ascii(hRylr998->rylr998Receiver.address);
 800463a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800463e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8004648:	4618      	mov	r0, r3
 800464a:	f000 f9ad 	bl	80049a8 <rylr998Int2Ascii>
					rylr998SetAddress(hRylr998->rylr998Receiver.address);
 800464e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8004652:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800465c:	4618      	mov	r0, r3
 800465e:	f7ff fdf1 	bl	8004244 <rylr998SetAddress>
				}
				break;
 8004662:	e00c      	b.n	800467e <rylr998ReceivePacketParser+0x102>
			case Rylr998R_RCV:
				if(uloraPacketStore(tempUartRxBuffer + 9, tempUartRxBuffer[7]) != ULORA_MAX_ID)
 8004664:	f107 030c 	add.w	r3, r7, #12
 8004668:	3309      	adds	r3, #9
 800466a:	7cfa      	ldrb	r2, [r7, #19]
 800466c:	4611      	mov	r1, r2
 800466e:	4618      	mov	r0, r3
 8004670:	f000 fa30 	bl	8004ad4 <uloraPacketStore>
				{
//					RYLR998_WriteSuccessfulRxFlag(ENABLE);
				}
				break;
 8004674:	e004      	b.n	8004680 <rylr998ReceivePacketParser+0x104>

				break;
			default:
				break;
		}
	}
 8004676:	bf00      	nop
 8004678:	e002      	b.n	8004680 <rylr998ReceivePacketParser+0x104>
				break;
 800467a:	bf00      	nop
 800467c:	e000      	b.n	8004680 <rylr998ReceivePacketParser+0x104>
				break;
 800467e:	bf00      	nop

	return ret;
 8004680:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
}
 8004684:	4618      	mov	r0, r3
 8004686:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	08004e54 	.word	0x08004e54

08004694 <rylr998Get>:
}



Rylr998_Status_t rylr998Get(Rylr998Handler_t* hRylr998, Rylr998Command_e command)
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b08a      	sub	sp, #40	; 0x28
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	460b      	mov	r3, r1
 800469e:	70fb      	strb	r3, [r7, #3]
	Rylr998_Status_t 	ret 				= Rylr998_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	uint8_t 			txPacketSize 		= 0;
 80046a6:	2300      	movs	r3, #0
 80046a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t 			rxPacketSize 		= 0;
 80046ac:	2300      	movs	r3, #0
 80046ae:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t 			uartTxBuffer[20] 	= {0};
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	f107 0310 	add.w	r3, r7, #16
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]

	memcpy(uartTxBuffer, 		 AT, AT_PRIFEX_SIZE);
 80046c2:	f107 030c 	add.w	r3, r7, #12
 80046c6:	2203      	movs	r2, #3
 80046c8:	4988      	ldr	r1, [pc, #544]	; (80048ec <rylr998Get+0x258>)
 80046ca:	4618      	mov	r0, r3
 80046cc:	f000 fb72 	bl	8004db4 <memcpy>

	switch (command)											//This part calculates the command length and
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	f200 80c6 	bhi.w	8004864 <rylr998Get+0x1d0>
 80046d8:	a201      	add	r2, pc, #4	; (adr r2, 80046e0 <rylr998Get+0x4c>)
 80046da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046de:	bf00      	nop
 80046e0:	08004705 	.word	0x08004705
 80046e4:	08004727 	.word	0x08004727
 80046e8:	08004757 	.word	0x08004757
 80046ec:	0800477d 	.word	0x0800477d
 80046f0:	080047a9 	.word	0x080047a9
 80046f4:	080047d5 	.word	0x080047d5
 80046f8:	080047fb 	.word	0x080047fb
 80046fc:	08004821 	.word	0x08004821
 8004700:	08004843 	.word	0x08004843
	{															//selects the wanted command string
		case Rylr998_BOUDRATE:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(IPR) - 1;
 8004704:	2309      	movs	r3, #9
 8004706:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, IPR);
 800470a:	f107 030c 	add.w	r3, r7, #12
 800470e:	4618      	mov	r0, r3
 8004710:	f7fb fd62 	bl	80001d8 <strlen>
 8004714:	4603      	mov	r3, r0
 8004716:	461a      	mov	r2, r3
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	4413      	add	r3, r2
 800471e:	4a74      	ldr	r2, [pc, #464]	; (80048f0 <rylr998Get+0x25c>)
 8004720:	6810      	ldr	r0, [r2, #0]
 8004722:	6018      	str	r0, [r3, #0]

			break;
 8004724:	e09e      	b.n	8004864 <rylr998Get+0x1d0>
		case Rylr998_PARAMETER:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(PARAMETER) - 1;
 8004726:	230f      	movs	r3, #15
 8004728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, PARAMETER);
 800472c:	f107 030c 	add.w	r3, r7, #12
 8004730:	4618      	mov	r0, r3
 8004732:	f7fb fd51 	bl	80001d8 <strlen>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	f107 030c 	add.w	r3, r7, #12
 800473e:	4413      	add	r3, r2
 8004740:	496c      	ldr	r1, [pc, #432]	; (80048f4 <rylr998Get+0x260>)
 8004742:	461a      	mov	r2, r3
 8004744:	460b      	mov	r3, r1
 8004746:	cb03      	ldmia	r3!, {r0, r1}
 8004748:	6010      	str	r0, [r2, #0]
 800474a:	6051      	str	r1, [r2, #4]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	8113      	strh	r3, [r2, #8]
			rxPacketSize = 21;
 8004750:	2315      	movs	r3, #21
 8004752:	84bb      	strh	r3, [r7, #36]	; 0x24

			break;
 8004754:	e086      	b.n	8004864 <rylr998Get+0x1d0>
		case Rylr998_BAND:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(BAND) - 1;
 8004756:	230a      	movs	r3, #10
 8004758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, BAND);
 800475c:	f107 030c 	add.w	r3, r7, #12
 8004760:	4618      	mov	r0, r3
 8004762:	f7fb fd39 	bl	80001d8 <strlen>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	f107 030c 	add.w	r3, r7, #12
 800476e:	4413      	add	r3, r2
 8004770:	4a61      	ldr	r2, [pc, #388]	; (80048f8 <rylr998Get+0x264>)
 8004772:	6810      	ldr	r0, [r2, #0]
 8004774:	6018      	str	r0, [r3, #0]
 8004776:	7912      	ldrb	r2, [r2, #4]
 8004778:	711a      	strb	r2, [r3, #4]

			break;
 800477a:	e073      	b.n	8004864 <rylr998Get+0x1d0>
		case Rylr998_ADDRESS:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(ADDRESS) - 1;
 800477c:	230d      	movs	r3, #13
 800477e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, ADDRESS);
 8004782:	f107 030c 	add.w	r3, r7, #12
 8004786:	4618      	mov	r0, r3
 8004788:	f7fb fd26 	bl	80001d8 <strlen>
 800478c:	4603      	mov	r3, r0
 800478e:	461a      	mov	r2, r3
 8004790:	f107 030c 	add.w	r3, r7, #12
 8004794:	4413      	add	r3, r2
 8004796:	4959      	ldr	r1, [pc, #356]	; (80048fc <rylr998Get+0x268>)
 8004798:	461a      	mov	r2, r3
 800479a:	460b      	mov	r3, r1
 800479c:	cb03      	ldmia	r3!, {r0, r1}
 800479e:	6010      	str	r0, [r2, #0]
 80047a0:	6051      	str	r1, [r2, #4]
			rxPacketSize = 12;
 80047a2:	230c      	movs	r3, #12
 80047a4:	84bb      	strh	r3, [r7, #36]	; 0x24

			break;
 80047a6:	e05d      	b.n	8004864 <rylr998Get+0x1d0>
		case Rylr998_NETWORKID:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(NETWORKID) - 1;
 80047a8:	230f      	movs	r3, #15
 80047aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, NETWORKID);
 80047ae:	f107 030c 	add.w	r3, r7, #12
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fb fd10 	bl	80001d8 <strlen>
 80047b8:	4603      	mov	r3, r0
 80047ba:	461a      	mov	r2, r3
 80047bc:	f107 030c 	add.w	r3, r7, #12
 80047c0:	4413      	add	r3, r2
 80047c2:	494f      	ldr	r1, [pc, #316]	; (8004900 <rylr998Get+0x26c>)
 80047c4:	461a      	mov	r2, r3
 80047c6:	460b      	mov	r3, r1
 80047c8:	cb03      	ldmia	r3!, {r0, r1}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	6051      	str	r1, [r2, #4]
 80047ce:	881b      	ldrh	r3, [r3, #0]
 80047d0:	8113      	strh	r3, [r2, #8]

			break;
 80047d2:	e047      	b.n	8004864 <rylr998Get+0x1d0>
		case Rylr998_CRFOP:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(CRFOP) - 1;
 80047d4:	230b      	movs	r3, #11
 80047d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, CRFOP);
 80047da:	f107 030c 	add.w	r3, r7, #12
 80047de:	4618      	mov	r0, r3
 80047e0:	f7fb fcfa 	bl	80001d8 <strlen>
 80047e4:	4603      	mov	r3, r0
 80047e6:	461a      	mov	r2, r3
 80047e8:	f107 030c 	add.w	r3, r7, #12
 80047ec:	4413      	add	r3, r2
 80047ee:	4a45      	ldr	r2, [pc, #276]	; (8004904 <rylr998Get+0x270>)
 80047f0:	6810      	ldr	r0, [r2, #0]
 80047f2:	6018      	str	r0, [r3, #0]
 80047f4:	8892      	ldrh	r2, [r2, #4]
 80047f6:	809a      	strh	r2, [r3, #4]

			break;
 80047f8:	e034      	b.n	8004864 <rylr998Get+0x1d0>
		case Rylr998_SEND:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(SEND) - 1;
 80047fa:	230a      	movs	r3, #10
 80047fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, SEND);
 8004800:	f107 030c 	add.w	r3, r7, #12
 8004804:	4618      	mov	r0, r3
 8004806:	f7fb fce7 	bl	80001d8 <strlen>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	f107 030c 	add.w	r3, r7, #12
 8004812:	4413      	add	r3, r2
 8004814:	4a3c      	ldr	r2, [pc, #240]	; (8004908 <rylr998Get+0x274>)
 8004816:	6810      	ldr	r0, [r2, #0]
 8004818:	6018      	str	r0, [r3, #0]
 800481a:	7912      	ldrb	r2, [r2, #4]
 800481c:	711a      	strb	r2, [r3, #4]

			break;
 800481e:	e021      	b.n	8004864 <rylr998Get+0x1d0>
		case Rylr998_UID:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(UID) - 1;
 8004820:	2309      	movs	r3, #9
 8004822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, UID);
 8004826:	f107 030c 	add.w	r3, r7, #12
 800482a:	4618      	mov	r0, r3
 800482c:	f7fb fcd4 	bl	80001d8 <strlen>
 8004830:	4603      	mov	r3, r0
 8004832:	461a      	mov	r2, r3
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	4413      	add	r3, r2
 800483a:	4a34      	ldr	r2, [pc, #208]	; (800490c <rylr998Get+0x278>)
 800483c:	6810      	ldr	r0, [r2, #0]
 800483e:	6018      	str	r0, [r3, #0]

			break;
 8004840:	e010      	b.n	8004864 <rylr998Get+0x1d0>
		case Rylr998_VER:

			txPacketSize = AT_OVERHEAD_SIZE + sizeof(VER) - 1;
 8004842:	2309      	movs	r3, #9
 8004844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			strcat((char*) uartTxBuffer, VER);
 8004848:	f107 030c 	add.w	r3, r7, #12
 800484c:	4618      	mov	r0, r3
 800484e:	f7fb fcc3 	bl	80001d8 <strlen>
 8004852:	4603      	mov	r3, r0
 8004854:	461a      	mov	r2, r3
 8004856:	f107 030c 	add.w	r3, r7, #12
 800485a:	4413      	add	r3, r2
 800485c:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <rylr998Get+0x27c>)
 800485e:	6810      	ldr	r0, [r2, #0]
 8004860:	6018      	str	r0, [r3, #0]

			break;
 8004862:	bf00      	nop
	}

	strcat((char*)uartTxBuffer,  CHECK);
 8004864:	f107 030c 	add.w	r3, r7, #12
 8004868:	4618      	mov	r0, r3
 800486a:	f7fb fcb5 	bl	80001d8 <strlen>
 800486e:	4603      	mov	r3, r0
 8004870:	461a      	mov	r2, r3
 8004872:	f107 030c 	add.w	r3, r7, #12
 8004876:	4413      	add	r3, r2
 8004878:	4926      	ldr	r1, [pc, #152]	; (8004914 <rylr998Get+0x280>)
 800487a:	461a      	mov	r2, r3
 800487c:	460b      	mov	r3, r1
 800487e:	881b      	ldrh	r3, [r3, #0]
 8004880:	8013      	strh	r3, [r2, #0]
	strcat((char*)uartTxBuffer,  TERMINATOR);
 8004882:	f107 030c 	add.w	r3, r7, #12
 8004886:	4618      	mov	r0, r3
 8004888:	f7fb fca6 	bl	80001d8 <strlen>
 800488c:	4603      	mov	r3, r0
 800488e:	461a      	mov	r2, r3
 8004890:	f107 030c 	add.w	r3, r7, #12
 8004894:	4413      	add	r3, r2
 8004896:	4a20      	ldr	r2, [pc, #128]	; (8004918 <rylr998Get+0x284>)
 8004898:	8811      	ldrh	r1, [r2, #0]
 800489a:	7892      	ldrb	r2, [r2, #2]
 800489c:	8019      	strh	r1, [r3, #0]
 800489e:	709a      	strb	r2, [r3, #2]

	ret = HAL_UART_Transmit(&huart1, uartTxBuffer, txPacketSize, 10);
 80048a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	f107 010c 	add.w	r1, r7, #12
 80048aa:	230a      	movs	r3, #10
 80048ac:	481b      	ldr	r0, [pc, #108]	; (800491c <rylr998Get+0x288>)
 80048ae:	f7fe fa7e 	bl	8002dae <HAL_UART_Transmit>
 80048b2:	4603      	mov	r3, r0
 80048b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	memset(hRylr998->rylr998Receiver.rxBuffer, RESET, 20);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f203 1313 	addw	r3, r3, #275	; 0x113
 80048be:	2214      	movs	r2, #20
 80048c0:	2100      	movs	r1, #0
 80048c2:	4618      	mov	r0, r3
 80048c4:	f000 fa84 	bl	8004dd0 <memset>

	ret = HAL_UART_Receive_IT(&huart1, hRylr998->rylr998Receiver.rxBuffer, rxPacketSize);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f203 1313 	addw	r3, r3, #275	; 0x113
 80048ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80048d0:	4619      	mov	r1, r3
 80048d2:	4812      	ldr	r0, [pc, #72]	; (800491c <rylr998Get+0x288>)
 80048d4:	f7fe fafd 	bl	8002ed2 <HAL_UART_Receive_IT>
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	return ret;
 80048de:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3728      	adds	r7, #40	; 0x28
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}
 80048ea:	bf00      	nop
 80048ec:	08004e18 	.word	0x08004e18
 80048f0:	08004e58 	.word	0x08004e58
 80048f4:	08004e5c 	.word	0x08004e5c
 80048f8:	08004e68 	.word	0x08004e68
 80048fc:	08004e20 	.word	0x08004e20
 8004900:	08004e2c 	.word	0x08004e2c
 8004904:	08004e3c 	.word	0x08004e3c
 8004908:	08004e48 	.word	0x08004e48
 800490c:	08004e70 	.word	0x08004e70
 8004910:	08004e74 	.word	0x08004e74
 8004914:	08004e44 	.word	0x08004e44
 8004918:	08004e1c 	.word	0x08004e1c
 800491c:	20000028 	.word	0x20000028

08004920 <rylr998ResponseFind>:
	memcpy(hRylr998->rylr998Transmitter.TxBuffer, uartTxBuffer, packetSize);
	return ret;
}

Rylr998RxCommand_e rylr998ResponseFind(uint8_t* rxBuffer)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	Rylr998RxCommand_e 	ret 					= Rylr998R_NOT_FOUND;
 8004928:	2304      	movs	r3, #4
 800492a:	73fb      	strb	r3, [r7, #15]
	if(!memcmp(rxBuffer, ADDRESS, 7))
 800492c:	2207      	movs	r2, #7
 800492e:	491a      	ldr	r1, [pc, #104]	; (8004998 <rylr998ResponseFind+0x78>)
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 fa2f 	bl	8004d94 <memcmp>
 8004936:	4603      	mov	r3, r0
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <rylr998ResponseFind+0x24>
	{
		return ret = Rylr998R_ADDRESS;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
 8004940:	7bfb      	ldrb	r3, [r7, #15]
 8004942:	e024      	b.n	800498e <rylr998ResponseFind+0x6e>
	}
	else if(!memcmp(rxBuffer, RCV, 3))
 8004944:	2203      	movs	r2, #3
 8004946:	4915      	ldr	r1, [pc, #84]	; (800499c <rylr998ResponseFind+0x7c>)
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f000 fa23 	bl	8004d94 <memcmp>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d103      	bne.n	800495c <rylr998ResponseFind+0x3c>
	{
		return ret = Rylr998R_RCV;
 8004954:	2302      	movs	r3, #2
 8004956:	73fb      	strb	r3, [r7, #15]
 8004958:	7bfb      	ldrb	r3, [r7, #15]
 800495a:	e018      	b.n	800498e <rylr998ResponseFind+0x6e>
	}
	else if(!memcmp(rxBuffer, OK, 2))
 800495c:	2202      	movs	r2, #2
 800495e:	4910      	ldr	r1, [pc, #64]	; (80049a0 <rylr998ResponseFind+0x80>)
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fa17 	bl	8004d94 <memcmp>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d103      	bne.n	8004974 <rylr998ResponseFind+0x54>
	{
		return ret = Rylr998R_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
 8004970:	7bfb      	ldrb	r3, [r7, #15]
 8004972:	e00c      	b.n	800498e <rylr998ResponseFind+0x6e>
	}
	else if(!memcmp(rxBuffer, READY, 5))
 8004974:	2205      	movs	r2, #5
 8004976:	490b      	ldr	r1, [pc, #44]	; (80049a4 <rylr998ResponseFind+0x84>)
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fa0b 	bl	8004d94 <memcmp>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <rylr998ResponseFind+0x6c>
	{
		return ret = Rylr998R_RDY;
 8004984:	2303      	movs	r3, #3
 8004986:	73fb      	strb	r3, [r7, #15]
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	e000      	b.n	800498e <rylr998ResponseFind+0x6e>
	}
	return ret;
 800498c:	7bfb      	ldrb	r3, [r7, #15]
}
 800498e:	4618      	mov	r0, r3
 8004990:	3710      	adds	r7, #16
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	08004e20 	.word	0x08004e20
 800499c:	08004e78 	.word	0x08004e78
 80049a0:	08004e7c 	.word	0x08004e7c
 80049a4:	08004e80 	.word	0x08004e80

080049a8 <rylr998Int2Ascii>:
	}
	return ret;
}

void rylr998Int2Ascii(uint8_t* value)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b083      	sub	sp, #12
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
	*value += 0x30;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	3330      	adds	r3, #48	; 0x30
 80049b6:	b2da      	uxtb	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	701a      	strb	r2, [r3, #0]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <rylr998Ascii2Int>:

void rylr998Ascii2Int(uint8_t* value)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	*value -= 0x30;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	3b30      	subs	r3, #48	; 0x30
 80049d6:	b2da      	uxtb	r2, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	701a      	strb	r2, [r3, #0]
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <rylr998_enable>:

void rylr998_enable(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RYLR998_RST_GPIO_Port, RYLR998_RST_Pin, GPIO_PIN_SET);
 80049ec:	2201      	movs	r2, #1
 80049ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80049f2:	4802      	ldr	r0, [pc, #8]	; (80049fc <rylr998_enable+0x14>)
 80049f4:	f7fd f93e 	bl	8001c74 <HAL_GPIO_WritePin>
}
 80049f8:	bf00      	nop
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40020400 	.word	0x40020400

08004a00 <uloraCommunicationTest>:

UloraCommand_e 		uloraPacketDetermine(uint8_t idChar);
Rylr998_Status_t 	uloraChecksumValidate(uint8_t* rxBuffer, uint8_t packetSize);

Ulora_Status_t uloraCommunicationTest(uint8_t* payloadBuffer)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b085      	sub	sp, #20
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
	ULoraHandler_t uloraHandler;
	Ulora_Status_t ret = Ulora_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	73fb      	strb	r3, [r7, #15]
	uloraHandler.uloraPacketSize  = ULORA_CONN_COUNT_SIZE;
 8004a0c:	2304      	movs	r3, #4
 8004a0e:	72bb      	strb	r3, [r7, #10]
	uloraHandler.uloraDevicesCount = 1;
 8004a10:	2301      	movs	r3, #1
 8004a12:	72fb      	strb	r3, [r7, #11]

	payloadBuffer[0] = ULORA_CONN_COUNT + '0';
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2232      	movs	r2, #50	; 0x32
 8004a18:	701a      	strb	r2, [r3, #0]
	payloadBuffer[1] = uloraHandler.uloraPacketSize + '0' ;
 8004a1a:	7aba      	ldrb	r2, [r7, #10]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	3230      	adds	r2, #48	; 0x30
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	701a      	strb	r2, [r3, #0]
	payloadBuffer[2] = uloraHandler.uloraDevicesCount + '0';
 8004a26:	7afa      	ldrb	r2, [r7, #11]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3302      	adds	r3, #2
 8004a2c:	3230      	adds	r2, #48	; 0x30
 8004a2e:	b2d2      	uxtb	r2, r2
 8004a30:	701a      	strb	r2, [r3, #0]

	payloadBuffer[3] = '7';
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	3303      	adds	r3, #3
 8004a36:	2237      	movs	r2, #55	; 0x37
 8004a38:	701a      	strb	r2, [r3, #0]

	ret = Ulora_OK;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	73fb      	strb	r3, [r7, #15]
	return ret;
 8004a3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3714      	adds	r7, #20
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <uloraPirStatusLoad>:
Ulora_Status_t uloraPirStatusLoad(uint8_t* payloadBuffer)
{
 8004a4c:	b590      	push	{r4, r7, lr}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
	Ulora_Status_t ret = Ulora_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
	payloadBuffer[0] = ULORA_PIR_SENS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	701a      	strb	r2, [r3, #0]
	payloadBuffer[1] = hUloraProtocol.uloraPirDetection;
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <uloraPirStatusLoad+0x3c>)
 8004a60:	781a      	ldrb	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	3301      	adds	r3, #1
 8004a66:	701a      	strb	r2, [r3, #0]
	payloadBuffer[2] = uloraPacketChecksum(payloadBuffer, 3);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	1c9c      	adds	r4, r3, #2
 8004a6c:	2103      	movs	r1, #3
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f80c 	bl	8004a8c <uloraPacketChecksum>
 8004a74:	4603      	mov	r3, r0
 8004a76:	7023      	strb	r3, [r4, #0]
	ret = Ulora_OK;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	73fb      	strb	r3, [r7, #15]
	return ret;
 8004a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd90      	pop	{r4, r7, pc}
 8004a86:	bf00      	nop
 8004a88:	2000037c 	.word	0x2000037c

08004a8c <uloraPacketChecksum>:

uint8_t uloraPacketChecksum(uint8_t* buffer, uint8_t packetSize)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	460b      	mov	r3, r1
 8004a96:	70fb      	strb	r3, [r7, #3]
	uint8_t checksum = 0;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	73fb      	strb	r3, [r7, #15]
	packetSize 		-= 1;					//checksum should not be counted while calculating the packet checksum
 8004a9c:	78fb      	ldrb	r3, [r7, #3]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < packetSize; ++i)
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	73bb      	strb	r3, [r7, #14]
 8004aa6:	e009      	b.n	8004abc <uloraPacketChecksum+0x30>
	{
		checksum += buffer[i];
 8004aa8:	7bbb      	ldrb	r3, [r7, #14]
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	4413      	add	r3, r2
 8004aae:	781a      	ldrb	r2, [r3, #0]
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < packetSize; ++i)
 8004ab6:	7bbb      	ldrb	r3, [r7, #14]
 8004ab8:	3301      	adds	r3, #1
 8004aba:	73bb      	strb	r3, [r7, #14]
 8004abc:	7bba      	ldrb	r2, [r7, #14]
 8004abe:	78fb      	ldrb	r3, [r7, #3]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3f1      	bcc.n	8004aa8 <uloraPacketChecksum+0x1c>
	}
	return checksum;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <uloraPacketStore>:
uint8_t uloraPacketStore(uint8_t* buffer, uint8_t packetSize)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	460b      	mov	r3, r1
 8004ade:	70fb      	strb	r3, [r7, #3]
	UloraCommand_e packeId;
	packeId = uloraPacketDetermine(buffer[0]);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 f84b 	bl	8004b80 <uloraPacketDetermine>
 8004aea:	4603      	mov	r3, r0
 8004aec:	73fb      	strb	r3, [r7, #15]
	packetSize -= '0';				//Consider the integer value instead of the ASCII character
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	3b30      	subs	r3, #48	; 0x30
 8004af2:	70fb      	strb	r3, [r7, #3]
	switch (packeId)
 8004af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004af8:	2b03      	cmp	r3, #3
 8004afa:	d016      	beq.n	8004b2a <uloraPacketStore+0x56>
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	dc32      	bgt.n	8004b66 <uloraPacketStore+0x92>
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d02a      	beq.n	8004b5a <uloraPacketStore+0x86>
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d12e      	bne.n	8004b66 <uloraPacketStore+0x92>
	{
		case ULORA_CONN_COUNT:
			if(Rylr998_OK == uloraChecksumValidate(buffer, packetSize))
 8004b08:	78fb      	ldrb	r3, [r7, #3]
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f858 	bl	8004bc2 <uloraChecksumValidate>
 8004b12:	4603      	mov	r3, r0
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d108      	bne.n	8004b2a <uloraPacketStore+0x56>
			{
				hUloraProtocol.uloraDevicesCount = buffer[3];
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	78da      	ldrb	r2, [r3, #3]
 8004b1c:	4b16      	ldr	r3, [pc, #88]	; (8004b78 <uloraPacketStore+0xa4>)
 8004b1e:	70da      	strb	r2, [r3, #3]
				RYLR998_WriteSuccessfulRxFlag(ENABLE);
 8004b20:	4a16      	ldr	r2, [pc, #88]	; (8004b7c <uloraPacketStore+0xa8>)
 8004b22:	7b13      	ldrb	r3, [r2, #12]
 8004b24:	f043 0302 	orr.w	r3, r3, #2
 8004b28:	7313      	strb	r3, [r2, #12]
			}
		case ULORA_PIR_SENS:
			//TODO Modify code segment below
			if(Rylr998_OK == uloraChecksumValidate(buffer, packetSize))
 8004b2a:	78fb      	ldrb	r3, [r7, #3]
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 f847 	bl	8004bc2 <uloraChecksumValidate>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d117      	bne.n	8004b6a <uloraPacketStore+0x96>
			{
				hUloraProtocol.uloraPirDetection = buffer[1];
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	781b      	ldrb	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf14      	ite	ne
 8004b44:	2301      	movne	r3, #1
 8004b46:	2300      	moveq	r3, #0
 8004b48:	b2da      	uxtb	r2, r3
 8004b4a:	4b0b      	ldr	r3, [pc, #44]	; (8004b78 <uloraPacketStore+0xa4>)
 8004b4c:	701a      	strb	r2, [r3, #0]
				RYLR998_WritePirSensorPackRxFlag(ENABLE);
 8004b4e:	4a0b      	ldr	r2, [pc, #44]	; (8004b7c <uloraPacketStore+0xa8>)
 8004b50:	7b13      	ldrb	r3, [r2, #12]
 8004b52:	f043 0308 	orr.w	r3, r3, #8
 8004b56:	7313      	strb	r3, [r2, #12]
			}
			break;
 8004b58:	e007      	b.n	8004b6a <uloraPacketStore+0x96>
		case ULORA_ACK:
			RYLR998_WriteSuccessfulTxFlag(ENABLE);
 8004b5a:	4a08      	ldr	r2, [pc, #32]	; (8004b7c <uloraPacketStore+0xa8>)
 8004b5c:	7b13      	ldrb	r3, [r2, #12]
 8004b5e:	f043 0304 	orr.w	r3, r3, #4
 8004b62:	7313      	strb	r3, [r2, #12]
			break;
 8004b64:	e002      	b.n	8004b6c <uloraPacketStore+0x98>
		default:
			break;
 8004b66:	bf00      	nop
 8004b68:	e000      	b.n	8004b6c <uloraPacketStore+0x98>
			break;
 8004b6a:	bf00      	nop
	}
	return packeId;
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b6e:	4618      	mov	r0, r3
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	2000037c 	.word	0x2000037c
 8004b7c:	20000170 	.word	0x20000170

08004b80 <uloraPacketDetermine>:
UloraCommand_e uloraPacketDetermine(uint8_t idChar)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b085      	sub	sp, #20
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	4603      	mov	r3, r0
 8004b88:	71fb      	strb	r3, [r7, #7]
	UloraCommand_e idScanner = ULORA_UNKNOWN;
 8004b8a:	23ff      	movs	r3, #255	; 0xff
 8004b8c:	73fb      	strb	r3, [r7, #15]
//	rylr998Ascii2Int(&idChar);
	for(idScanner = ULORA_UNKNOWN; idScanner < ULORA_MAX_ID; ++idScanner)
 8004b8e:	23ff      	movs	r3, #255	; 0xff
 8004b90:	73fb      	strb	r3, [r7, #15]
 8004b92:	e008      	b.n	8004ba6 <uloraPacketDetermine+0x26>
	{
		if(idScanner == idChar)
 8004b94:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8004b98:	79fb      	ldrb	r3, [r7, #7]
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d008      	beq.n	8004bb0 <uloraPacketDetermine+0x30>
	for(idScanner = ULORA_UNKNOWN; idScanner < ULORA_MAX_ID; ++idScanner)
 8004b9e:	7bfb      	ldrb	r3, [r7, #15]
 8004ba0:	3301      	adds	r3, #1
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	73fb      	strb	r3, [r7, #15]
 8004ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004baa:	2b03      	cmp	r3, #3
 8004bac:	ddf2      	ble.n	8004b94 <uloraPacketDetermine+0x14>
 8004bae:	e000      	b.n	8004bb2 <uloraPacketDetermine+0x32>
		{
			break;
 8004bb0:	bf00      	nop
		}
	}
	return idScanner;
 8004bb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3714      	adds	r7, #20
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr

08004bc2 <uloraChecksumValidate>:

Rylr998_Status_t uloraChecksumValidate(uint8_t* rxBuffer, uint8_t packetSize)
{
 8004bc2:	b480      	push	{r7}
 8004bc4:	b085      	sub	sp, #20
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	460b      	mov	r3, r1
 8004bcc:	70fb      	strb	r3, [r7, #3]
	Rylr998_Status_t ret = Rylr998_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	73fb      	strb	r3, [r7, #15]
	uint8_t checksum = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	73bb      	strb	r3, [r7, #14]
	//In order not to consider  from the packet size
	uint8_t packetPayloadSize = packetSize - 1;
 8004bd6:	78fb      	ldrb	r3, [r7, #3]
 8004bd8:	3b01      	subs	r3, #1
 8004bda:	733b      	strb	r3, [r7, #12]

	for(uint8_t i = 0; i < packetPayloadSize; ++i)
 8004bdc:	2300      	movs	r3, #0
 8004bde:	737b      	strb	r3, [r7, #13]
 8004be0:	e009      	b.n	8004bf6 <uloraChecksumValidate+0x34>
	{
		checksum += rxBuffer[i];
 8004be2:	7b7b      	ldrb	r3, [r7, #13]
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	4413      	add	r3, r2
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	7bbb      	ldrb	r3, [r7, #14]
 8004bec:	4413      	add	r3, r2
 8004bee:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i = 0; i < packetPayloadSize; ++i)
 8004bf0:	7b7b      	ldrb	r3, [r7, #13]
 8004bf2:	3301      	adds	r3, #1
 8004bf4:	737b      	strb	r3, [r7, #13]
 8004bf6:	7b7a      	ldrb	r2, [r7, #13]
 8004bf8:	7b3b      	ldrb	r3, [r7, #12]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d3f1      	bcc.n	8004be2 <uloraChecksumValidate+0x20>
	}
	if(checksum == rxBuffer[packetSize - 1])
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	3b01      	subs	r3, #1
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	4413      	add	r3, r2
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	7bba      	ldrb	r2, [r7, #14]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d101      	bne.n	8004c12 <uloraChecksumValidate+0x50>
	{
		ret = Rylr998_OK;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	73fb      	strb	r3, [r7, #15]
	}
	return ret;
 8004c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr

08004c20 <sirenHandler>:
 * @param 	sirenTone			:	Timer pre-scaler should be passed to this function
 *
 * @param 	currentTickValue	:	systick is passed
 */
void sirenHandler(sirenHandler_t* sirenHandler, uint32_t* sirenTone, uint32_t currentTickValue)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b085      	sub	sp, #20
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	607a      	str	r2, [r7, #4]
	if(sirenHandler->activisionStatus == true)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	7a1b      	ldrb	r3, [r3, #8]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d02b      	beq.n	8004c8c <sirenHandler+0x6c>
	{
		if(currentTickValue - sirenHandler->timer >= sirenHandler->playSpeed)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	8a12      	ldrh	r2, [r2, #16]
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d323      	bcc.n	8004c8c <sirenHandler+0x6c>
		{
			sirenHandler->timer = currentTickValue;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
			if(sirenHandler->toneDirection)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	7a5b      	ldrb	r3, [r3, #9]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00e      	beq.n	8004c70 <sirenHandler+0x50>
			{
				*sirenTone += sirenHandler->oneStep;
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	7c92      	ldrb	r2, [r2, #18]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	601a      	str	r2, [r3, #0]
				if(*sirenTone <= SIREN_LIMIT_TONE)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2bc8      	cmp	r3, #200	; 0xc8
 8004c66:	d811      	bhi.n	8004c8c <sirenHandler+0x6c>
				{
					sirenHandler->toneDirection = false;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	725a      	strb	r2, [r3, #9]
				}
			}

		}
	}
}
 8004c6e:	e00d      	b.n	8004c8c <sirenHandler+0x6c>
				*sirenTone -= sirenHandler->oneStep;
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	7c92      	ldrb	r2, [r2, #18]
 8004c78:	1a9a      	subs	r2, r3, r2
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	601a      	str	r2, [r3, #0]
				if(*sirenTone <= SIREN_INITIAL_TONE)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b32      	cmp	r3, #50	; 0x32
 8004c84:	d802      	bhi.n	8004c8c <sirenHandler+0x6c>
					sirenHandler->toneDirection = true;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	725a      	strb	r2, [r3, #9]
}
 8004c8c:	bf00      	nop
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr

08004c98 <sirenSoundLevelSet>:
 * @param sirenHandler
 * @param newSoundLevel
 * @param setValue
 */
void sirenSoundLevelSet(sirenHandler_t* sirenHandler, uint32_t* newSoundLevel, uint32_t setValue)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
	*newSoundLevel 			 	= setValue;
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	601a      	str	r2, [r3, #0]
	sirenHandler->soundLevel 	= setValue;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	605a      	str	r2, [r3, #4]
}
 8004cb0:	bf00      	nop
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <sirenInitialize>:
 */
void sirenInitialize(sirenHandler_t* sirenHandler,
					uint32_t newSoundLevel,
					uint32_t playSpeed,
					uint8_t  oneStep)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
 8004cc8:	70fb      	strb	r3, [r7, #3]
	sirenHandler->soundLevel 	= newSoundLevel;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	605a      	str	r2, [r3, #4]
	sirenHandler->tone 			= SIREN_INITIAL_TONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2232      	movs	r2, #50	; 0x32
 8004cd4:	60da      	str	r2, [r3, #12]
	sirenHandler->playSpeed		= playSpeed;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	b29a      	uxth	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	821a      	strh	r2, [r3, #16]
	sirenHandler->oneStep		= oneStep;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	78fa      	ldrb	r2, [r7, #3]
 8004ce2:	749a      	strb	r2, [r3, #18]
}
 8004ce4:	bf00      	nop
 8004ce6:	3714      	adds	r7, #20
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <sirenStart>:
 * @param sirenHandler
 * @param newSoundLevel
 * @param currentTickValue
 */
void sirenStart(sirenHandler_t* sirenHandler, uint32_t* newSoundLevel, uint32_t currentTickValue)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b085      	sub	sp, #20
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	607a      	str	r2, [r7, #4]
	sirenHandler->activisionStatus 	= true;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	721a      	strb	r2, [r3, #8]
	sirenHandler->timer 			= currentTickValue;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	601a      	str	r2, [r3, #0]
	sirenHandler->toneDirection		= true;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	725a      	strb	r2, [r3, #9]
	*newSoundLevel 					= SIREN_INITIAL_SOUND_LEVEL;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004d14:	601a      	str	r2, [r3, #0]

}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <sirenStop>:
 *
 * @param sirenHandler
 * @param newSoundLevel
 */
void sirenStop(sirenHandler_t* sirenHandler, uint32_t* newSoundLevel)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
	sirenHandler->activisionStatus 	= false;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	721a      	strb	r2, [r3, #8]
	sirenHandler->tone 				= SIREN_INITIAL_TONE;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2232      	movs	r2, #50	; 0x32
 8004d36:	60da      	str	r2, [r3, #12]
	*newSoundLevel					= 0;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

}
 8004d3e:	bf00      	nop
 8004d40:	370c      	adds	r7, #12
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr
	...

08004d4c <__libc_init_array>:
 8004d4c:	b570      	push	{r4, r5, r6, lr}
 8004d4e:	4d0d      	ldr	r5, [pc, #52]	; (8004d84 <__libc_init_array+0x38>)
 8004d50:	4c0d      	ldr	r4, [pc, #52]	; (8004d88 <__libc_init_array+0x3c>)
 8004d52:	1b64      	subs	r4, r4, r5
 8004d54:	10a4      	asrs	r4, r4, #2
 8004d56:	2600      	movs	r6, #0
 8004d58:	42a6      	cmp	r6, r4
 8004d5a:	d109      	bne.n	8004d70 <__libc_init_array+0x24>
 8004d5c:	4d0b      	ldr	r5, [pc, #44]	; (8004d8c <__libc_init_array+0x40>)
 8004d5e:	4c0c      	ldr	r4, [pc, #48]	; (8004d90 <__libc_init_array+0x44>)
 8004d60:	f000 f84e 	bl	8004e00 <_init>
 8004d64:	1b64      	subs	r4, r4, r5
 8004d66:	10a4      	asrs	r4, r4, #2
 8004d68:	2600      	movs	r6, #0
 8004d6a:	42a6      	cmp	r6, r4
 8004d6c:	d105      	bne.n	8004d7a <__libc_init_array+0x2e>
 8004d6e:	bd70      	pop	{r4, r5, r6, pc}
 8004d70:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d74:	4798      	blx	r3
 8004d76:	3601      	adds	r6, #1
 8004d78:	e7ee      	b.n	8004d58 <__libc_init_array+0xc>
 8004d7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7e:	4798      	blx	r3
 8004d80:	3601      	adds	r6, #1
 8004d82:	e7f2      	b.n	8004d6a <__libc_init_array+0x1e>
 8004d84:	08004eb0 	.word	0x08004eb0
 8004d88:	08004eb0 	.word	0x08004eb0
 8004d8c:	08004eb0 	.word	0x08004eb0
 8004d90:	08004eb4 	.word	0x08004eb4

08004d94 <memcmp>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	3901      	subs	r1, #1
 8004d98:	4402      	add	r2, r0
 8004d9a:	4290      	cmp	r0, r2
 8004d9c:	d101      	bne.n	8004da2 <memcmp+0xe>
 8004d9e:	2000      	movs	r0, #0
 8004da0:	e005      	b.n	8004dae <memcmp+0x1a>
 8004da2:	7803      	ldrb	r3, [r0, #0]
 8004da4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8004da8:	42a3      	cmp	r3, r4
 8004daa:	d001      	beq.n	8004db0 <memcmp+0x1c>
 8004dac:	1b18      	subs	r0, r3, r4
 8004dae:	bd10      	pop	{r4, pc}
 8004db0:	3001      	adds	r0, #1
 8004db2:	e7f2      	b.n	8004d9a <memcmp+0x6>

08004db4 <memcpy>:
 8004db4:	440a      	add	r2, r1
 8004db6:	4291      	cmp	r1, r2
 8004db8:	f100 33ff 	add.w	r3, r0, #4294967295
 8004dbc:	d100      	bne.n	8004dc0 <memcpy+0xc>
 8004dbe:	4770      	bx	lr
 8004dc0:	b510      	push	{r4, lr}
 8004dc2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dc6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004dca:	4291      	cmp	r1, r2
 8004dcc:	d1f9      	bne.n	8004dc2 <memcpy+0xe>
 8004dce:	bd10      	pop	{r4, pc}

08004dd0 <memset>:
 8004dd0:	4402      	add	r2, r0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d100      	bne.n	8004dda <memset+0xa>
 8004dd8:	4770      	bx	lr
 8004dda:	f803 1b01 	strb.w	r1, [r3], #1
 8004dde:	e7f9      	b.n	8004dd4 <memset+0x4>

08004de0 <strcat>:
 8004de0:	b510      	push	{r4, lr}
 8004de2:	4602      	mov	r2, r0
 8004de4:	7814      	ldrb	r4, [r2, #0]
 8004de6:	4613      	mov	r3, r2
 8004de8:	3201      	adds	r2, #1
 8004dea:	2c00      	cmp	r4, #0
 8004dec:	d1fa      	bne.n	8004de4 <strcat+0x4>
 8004dee:	3b01      	subs	r3, #1
 8004df0:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004df4:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004df8:	2a00      	cmp	r2, #0
 8004dfa:	d1f9      	bne.n	8004df0 <strcat+0x10>
 8004dfc:	bd10      	pop	{r4, pc}
	...

08004e00 <_init>:
 8004e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e02:	bf00      	nop
 8004e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e06:	bc08      	pop	{r3}
 8004e08:	469e      	mov	lr, r3
 8004e0a:	4770      	bx	lr

08004e0c <_fini>:
 8004e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e0e:	bf00      	nop
 8004e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e12:	bc08      	pop	{r3}
 8004e14:	469e      	mov	lr, r3
 8004e16:	4770      	bx	lr
